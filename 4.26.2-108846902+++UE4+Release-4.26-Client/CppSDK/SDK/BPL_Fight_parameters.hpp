#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_Fight

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "SGEData_structs.hpp"
#include "Engine_structs.hpp"
#include "KuroGAS_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPL_Fight.BPL_Fight_C. dP(Hœ
// 0x0018 (0x0018 - 0x0000)
struct BPL_Fight_C__dP_H_ final
{
public:
	class ATsBaseCharacter_C*                     _n_a_;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle_;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C__dP_H_) == 0x000008, "Wrong alignment on BPL_Fight_C__dP_H_");
static_assert(sizeof(BPL_Fight_C__dP_H_) == 0x000018, "Wrong size on BPL_Fight_C__dP_H_");
static_assert(offsetof(BPL_Fight_C__dP_H_, _n_a_) == 0x000000, "Member 'BPL_Fight_C__dP_H_::_n_a_' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__dP_H_, Handle_) == 0x000008, "Member 'BPL_Fight_C__dP_H_::Handle_' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__dP_H_, __WorldContext) == 0x000010, "Member 'BPL_Fight_C__dP_H_::__WorldContext' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.¾nP(Hœ
// 0x0020 (0x0020 - 0x0000)
struct BPL_Fight_C__nP_H_ final
{
public:
	class ATsBaseCharacter_C*                     _n_a;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPD_CharacterControllerData_C*          P_Mn;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddMaterialControllerData_ReturnValue;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C__nP_H_) == 0x000008, "Wrong alignment on BPL_Fight_C__nP_H_");
static_assert(sizeof(BPL_Fight_C__nP_H_) == 0x000020, "Wrong size on BPL_Fight_C__nP_H_");
static_assert(offsetof(BPL_Fight_C__nP_H_, _n_a) == 0x000000, "Member 'BPL_Fight_C__nP_H_::_n_a' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__nP_H_, P_Mn) == 0x000008, "Member 'BPL_Fight_C__nP_H_::P_Mn' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__nP_H_, __WorldContext) == 0x000010, "Member 'BPL_Fight_C__nP_H_::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__nP_H_, Handle) == 0x000018, "Member 'BPL_Fight_C__nP_H_::Handle' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__nP_H_, CallFunc_AddMaterialControllerData_ReturnValue) == 0x00001C, "Member 'BPL_Fight_C__nP_H_::CallFunc_AddMaterialControllerData_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.·ÖîhôP¹
// 0x0080 (0x0080 - 0x0000)
struct BPL_Fight_C_____h_P__ final
{
public:
	struct FRotator                               ___l;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                __P_;                                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _l;                                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __;                                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___0;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                P__;                                               // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _l1;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __2;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_____h_P__) == 0x000008, "Wrong alignment on BPL_Fight_C_____h_P__");
static_assert(sizeof(BPL_Fight_C_____h_P__) == 0x000080, "Wrong size on BPL_Fight_C_____h_P__");
static_assert(offsetof(BPL_Fight_C_____h_P__, ___l) == 0x000000, "Member 'BPL_Fight_C_____h_P__::___l' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, __P_) == 0x00000C, "Member 'BPL_Fight_C_____h_P__::__P_' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, _l) == 0x000018, "Member 'BPL_Fight_C_____h_P__::_l' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, __) == 0x00001C, "Member 'BPL_Fight_C_____h_P__::__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, ___0) == 0x000020, "Member 'BPL_Fight_C_____h_P__::___0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, __WorldContext) == 0x000028, "Member 'BPL_Fight_C_____h_P__::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, P__) == 0x000030, "Member 'BPL_Fight_C_____h_P__::P__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, _l1) == 0x00003C, "Member 'BPL_Fight_C_____h_P__::_l1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, __2) == 0x000040, "Member 'BPL_Fight_C_____h_P__::__2' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BPL_Fight_C_____h_P__::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, CallFunc_RotateAngleAxis_ReturnValue) == 0x000050, "Member 'BPL_Fight_C_____h_P__::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x00005C, "Member 'BPL_Fight_C_____h_P__::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000068, "Member 'BPL_Fight_C_____h_P__::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____h_P__, CallFunc_Add_VectorVector_ReturnValue) == 0x000074, "Member 'BPL_Fight_C_____h_P__::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.¡—Ïò¿<
// 0x0040 (0x0040 - 0x0000)
struct BPL_Fight_C________ final
{
public:
	float                                         ______;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           ____;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ____0;                                             // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C________) == 0x000008, "Wrong alignment on BPL_Fight_C________");
static_assert(sizeof(BPL_Fight_C________) == 0x000040, "Wrong size on BPL_Fight_C________");
static_assert(offsetof(BPL_Fight_C________, ______) == 0x000000, "Member 'BPL_Fight_C________::______' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, ___) == 0x000004, "Member 'BPL_Fight_C________::___' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, ____) == 0x000008, "Member 'BPL_Fight_C________::____' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, __WorldContext) == 0x000010, "Member 'BPL_Fight_C________::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, ____0) == 0x000018, "Member 'BPL_Fight_C________::____0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, CallFunc_GetTimeRange_MinTime) == 0x000024, "Member 'BPL_Fight_C________::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, CallFunc_GetTimeRange_MaxTime) == 0x000028, "Member 'BPL_Fight_C________::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00002C, "Member 'BPL_Fight_C________::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, CallFunc_MapRangeClamped_ReturnValue) == 0x000030, "Member 'BPL_Fight_C________::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C________, CallFunc_GetVectorValue_ReturnValue) == 0x000034, "Member 'BPL_Fight_C________::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.¡—ò¿<
// 0x0030 (0x0030 - 0x0000)
struct BPL_Fight_C______ final
{
public:
	float                                         Param______;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            __;                                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____0;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C______) == 0x000008, "Wrong alignment on BPL_Fight_C______");
static_assert(sizeof(BPL_Fight_C______) == 0x000030, "Wrong size on BPL_Fight_C______");
static_assert(offsetof(BPL_Fight_C______, Param______) == 0x000000, "Member 'BPL_Fight_C______::Param______' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, ___) == 0x000004, "Member 'BPL_Fight_C______::___' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, __) == 0x000008, "Member 'BPL_Fight_C______::__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, __WorldContext) == 0x000010, "Member 'BPL_Fight_C______::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, ____0) == 0x000018, "Member 'BPL_Fight_C______::____0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BPL_Fight_C______::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, CallFunc_GetTimeRange_MinTime) == 0x000020, "Member 'BPL_Fight_C______::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, CallFunc_GetTimeRange_MaxTime) == 0x000024, "Member 'BPL_Fight_C______::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'BPL_Fight_C______::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C______, CallFunc_GetFloatValue_ReturnValue) == 0x00002C, "Member 'BPL_Fight_C______::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.Ò¦l
// 0x0028 (0x0028 - 0x0000)
struct BPL_Fight_C___l_ final
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Output;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tmp;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C___l_) == 0x000008, "Wrong alignment on BPL_Fight_C___l_");
static_assert(sizeof(BPL_Fight_C___l_) == 0x000028, "Wrong size on BPL_Fight_C___l_");
static_assert(offsetof(BPL_Fight_C___l_, Input) == 0x000000, "Member 'BPL_Fight_C___l_::Input' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___l_, __WorldContext) == 0x000008, "Member 'BPL_Fight_C___l_::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___l_, Output) == 0x000010, "Member 'BPL_Fight_C___l_::Output' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___l_, Tmp) == 0x000014, "Member 'BPL_Fight_C___l_::Tmp' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___l_, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BPL_Fight_C___l_::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___l_, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'BPL_Fight_C___l_::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___l_, CallFunc_Less_FloatFloat_ReturnValue) == 0x000020, "Member 'BPL_Fight_C___l_::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___l_, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000021, "Member 'BPL_Fight_C___l_::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.¿ÀK
// 0x0190 (0x0190 - 0x0000)
struct BPL_Fight_C____K final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreSelf;                                       // 0x0023(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           TraceColor;                                        // 0x0024(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0034(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawTime;                                          // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0050(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ___object_Variable;                                // 0x00E8(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00F8(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C____K) == 0x000008, "Wrong alignment on BPL_Fight_C____K");
static_assert(sizeof(BPL_Fight_C____K) == 0x000190, "Wrong size on BPL_Fight_C____K");
static_assert(offsetof(BPL_Fight_C____K, Context) == 0x000000, "Member 'BPL_Fight_C____K::Context' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, Start) == 0x000008, "Member 'BPL_Fight_C____K::Start' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, End) == 0x000014, "Member 'BPL_Fight_C____K::End' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, TraceChannel) == 0x000020, "Member 'BPL_Fight_C____K::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, bTraceComplex) == 0x000021, "Member 'BPL_Fight_C____K::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, DrawDebugType) == 0x000022, "Member 'BPL_Fight_C____K::DrawDebugType' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, bIgnoreSelf) == 0x000023, "Member 'BPL_Fight_C____K::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, TraceColor) == 0x000024, "Member 'BPL_Fight_C____K::TraceColor' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, TraceHitColor) == 0x000034, "Member 'BPL_Fight_C____K::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, DrawTime) == 0x000044, "Member 'BPL_Fight_C____K::DrawTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, __WorldContext) == 0x000048, "Member 'BPL_Fight_C____K::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, OutHit) == 0x000050, "Member 'BPL_Fight_C____K::OutHit' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, ReturnValue) == 0x0000E4, "Member 'BPL_Fight_C____K::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, ___object_Variable) == 0x0000E8, "Member 'BPL_Fight_C____K::___object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, CallFunc_LineTraceSingle_OutHit) == 0x0000F8, "Member 'BPL_Fight_C____K::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C____K, CallFunc_LineTraceSingle_ReturnValue) == 0x00018C, "Member 'BPL_Fight_C____K::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.·ÖActorhôP¹
// 0x0080 (0x0080 - 0x0000)
struct BPL_Fight_C___Actorh_P__ final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _l;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __;                                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___0;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                P__;                                               // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C___Actorh_P__) == 0x000008, "Wrong alignment on BPL_Fight_C___Actorh_P__");
static_assert(sizeof(BPL_Fight_C___Actorh_P__) == 0x000080, "Wrong size on BPL_Fight_C___Actorh_P__");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, Actor) == 0x000000, "Member 'BPL_Fight_C___Actorh_P__::Actor' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, _l) == 0x000008, "Member 'BPL_Fight_C___Actorh_P__::_l' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, __) == 0x00000C, "Member 'BPL_Fight_C___Actorh_P__::__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, ___0) == 0x000010, "Member 'BPL_Fight_C___Actorh_P__::___0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, __WorldContext) == 0x000018, "Member 'BPL_Fight_C___Actorh_P__::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, P__) == 0x000020, "Member 'BPL_Fight_C___Actorh_P__::P__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BPL_Fight_C___Actorh_P__::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000038, "Member 'BPL_Fight_C___Actorh_P__::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BPL_Fight_C___Actorh_P__::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, CallFunc_RotateAngleAxis_ReturnValue) == 0x000050, "Member 'BPL_Fight_C___Actorh_P__::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x00005C, "Member 'BPL_Fight_C___Actorh_P__::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000068, "Member 'BPL_Fight_C___Actorh_P__::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___Actorh_P__, CallFunc_Add_VectorVector_ReturnValue) == 0x000074, "Member 'BPL_Fight_C___Actorh_P__::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.·Ö8ž‹
// 0x0028 (0x0028 - 0x0000)
struct BPL_Fight_C___8___ final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MainGameInstance_C*                 AsBP_Main_Game_Instance;                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MainGameInstance_C*                 K2Node_DynamicCast_AsBP_Main_Game_Instance;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C___8___) == 0x000008, "Wrong alignment on BPL_Fight_C___8___");
static_assert(sizeof(BPL_Fight_C___8___) == 0x000028, "Wrong size on BPL_Fight_C___8___");
static_assert(offsetof(BPL_Fight_C___8___, __WorldContext) == 0x000000, "Member 'BPL_Fight_C___8___::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___8___, AsBP_Main_Game_Instance) == 0x000008, "Member 'BPL_Fight_C___8___::AsBP_Main_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___8___, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPL_Fight_C___8___::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___8___, K2Node_DynamicCast_AsBP_Main_Game_Instance) == 0x000018, "Member 'BPL_Fight_C___8___::K2Node_DynamicCast_AsBP_Main_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___8___, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPL_Fight_C___8___::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.&	~
// 0x0040 (0x0040 - 0x0000)
struct BPL_Fight_C_____ final
{
public:
	class ATsBaseCharacter_C*                     _r;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           __;                                                // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C_____) == 0x000008, "Wrong alignment on BPL_Fight_C_____");
static_assert(sizeof(BPL_Fight_C_____) == 0x000040, "Wrong size on BPL_Fight_C_____");
static_assert(offsetof(BPL_Fight_C_____, _r) == 0x000000, "Member 'BPL_Fight_C_____::_r' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, __) == 0x000008, "Member 'BPL_Fight_C_____::__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, __WorldContext) == 0x000018, "Member 'BPL_Fight_C_____::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, ReturnValue) == 0x000020, "Member 'BPL_Fight_C_____::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BPL_Fight_C_____::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'BPL_Fight_C_____::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000028, "Member 'BPL_Fight_C_____::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000038, "Member 'BPL_Fight_C_____::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.d~
// 0x0020 (0x0020 - 0x0000)
struct BPL_Fight_C__d__ final
{
public:
	class ATsBaseCharacter_C*                     _r;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           __;                                                // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C__d__) == 0x000008, "Wrong alignment on BPL_Fight_C__d__");
static_assert(sizeof(BPL_Fight_C__d__) == 0x000020, "Wrong size on BPL_Fight_C__d__");
static_assert(offsetof(BPL_Fight_C__d__, _r) == 0x000000, "Member 'BPL_Fight_C__d__::_r' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__d__, __) == 0x000008, "Member 'BPL_Fight_C__d__::__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C__d__, __WorldContext) == 0x000018, "Member 'BPL_Fight_C__d__::__WorldContext' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.û ~
// 0x0020 (0x0020 - 0x0000)
struct BPL_Fight_C_____ final
{
public:
	class ATsBaseCharacter_C*                     _r;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           __;                                                // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_____) == 0x000008, "Wrong alignment on BPL_Fight_C_____");
static_assert(sizeof(BPL_Fight_C_____) == 0x000020, "Wrong size on BPL_Fight_C_____");
static_assert(offsetof(BPL_Fight_C_____, _r) == 0x000000, "Member 'BPL_Fight_C_____::_r' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, __) == 0x000008, "Member 'BPL_Fight_C_____::__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_____, __WorldContext) == 0x000018, "Member 'BPL_Fight_C_____::__WorldContext' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.Í”$³‡¡—
// 0x0040 (0x0040 - 0x0000)
struct BPL_Fight_C_________ final
{
public:
	float                                         _r1____;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _r2____;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DAMAGE_CONSTANT7_0;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DAMAGE_CONSTANT8_0;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DAMAGE_CONSTANT9_0;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_________) == 0x000008, "Wrong alignment on BPL_Fight_C_________");
static_assert(sizeof(BPL_Fight_C_________) == 0x000040, "Wrong size on BPL_Fight_C_________");
static_assert(offsetof(BPL_Fight_C_________, _r1____) == 0x000000, "Member 'BPL_Fight_C_________::_r1____' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, _r2____) == 0x000004, "Member 'BPL_Fight_C_________::_r2____' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, __WorldContext) == 0x000008, "Member 'BPL_Fight_C_________::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, Result) == 0x000010, "Member 'BPL_Fight_C_________::Result' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, DAMAGE_CONSTANT7_0) == 0x000014, "Member 'BPL_Fight_C_________::DAMAGE_CONSTANT7_0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, DAMAGE_CONSTANT8_0) == 0x000018, "Member 'BPL_Fight_C_________::DAMAGE_CONSTANT8_0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, DAMAGE_CONSTANT9_0) == 0x00001C, "Member 'BPL_Fight_C_________::DAMAGE_CONSTANT9_0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BPL_Fight_C_________::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BPL_Fight_C_________::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BPL_Fight_C_________::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00002C, "Member 'BPL_Fight_C_________::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000030, "Member 'BPL_Fight_C_________::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BPL_Fight_C_________::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000038, "Member 'BPL_Fight_C_________::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_________, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x00003C, "Member 'BPL_Fight_C_________::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.(GE
// 0x01D0 (0x01D0 - 0x0000)
struct BPL_Fight_C___GE final
{
public:
	class ATsBaseCharacter_C*                     ___;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     __;                                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GE_I_;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  __AssetTags;                                       // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FGameplayTagContainer                  __GrantedTags;                                     // 0x0038(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Bp;                                                // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE___;                                             // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKuroGameplayParameterContainer        GE__p;                                             // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0080(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              OutgoingSpec;                                      // 0x0088(0x0010)(Edit, BlueprintVisible)
	struct FSGEData                               GLGEpn;                                            // 0x0098(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroGameplayParameter                 CallFunc_Array_Get_Item;                           // 0x00E4(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x00F8(0x0010)()
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_1;  // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0128(0x0010)()
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_2;  // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_3;  // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue_1;           // 0x0148(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_SetDuration_ReturnValue;                  // 0x0158(0x0010)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable;                      // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AddAssetTags_ReturnValue;                 // 0x0170(0x0010)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_AddGrantedTags_ReturnValue;               // 0x0188(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_SetStackCount_ReturnValue;                // 0x0198(0x0010)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           CallFunc_GetEffectContext_ReturnValue;             // 0x01B0(0x0018)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue; // 0x01C8(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C___GE) == 0x000008, "Wrong alignment on BPL_Fight_C___GE");
static_assert(sizeof(BPL_Fight_C___GE) == 0x0001D0, "Wrong size on BPL_Fight_C___GE");
static_assert(offsetof(BPL_Fight_C___GE, ___) == 0x000000, "Member 'BPL_Fight_C___GE::___' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, __) == 0x000008, "Member 'BPL_Fight_C___GE::__' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, GE_I_) == 0x000010, "Member 'BPL_Fight_C___GE::GE_I_' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, __AssetTags) == 0x000018, "Member 'BPL_Fight_C___GE::__AssetTags' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, __GrantedTags) == 0x000038, "Member 'BPL_Fight_C___GE::__GrantedTags' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, Bp) == 0x000058, "Member 'BPL_Fight_C___GE::Bp' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, Duration) == 0x00005C, "Member 'BPL_Fight_C___GE::Duration' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, GE___) == 0x000060, "Member 'BPL_Fight_C___GE::GE___' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, GE__p) == 0x000068, "Member 'BPL_Fight_C___GE::GE__p' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, __WorldContext) == 0x000078, "Member 'BPL_Fight_C___GE::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, ActiveHandle) == 0x000080, "Member 'BPL_Fight_C___GE::ActiveHandle' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, OutgoingSpec) == 0x000088, "Member 'BPL_Fight_C___GE::OutgoingSpec' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, GLGEpn) == 0x000098, "Member 'BPL_Fight_C___GE::GLGEpn' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, ___int_Array_Index_Variable) == 0x0000D8, "Member 'BPL_Fight_C___GE::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_IsValid_ReturnValue) == 0x0000DC, "Member 'BPL_Fight_C___GE::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_IsValid_ReturnValue_1) == 0x0000DD, "Member 'BPL_Fight_C___GE::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Not_PreBool_ReturnValue) == 0x0000DE, "Member 'BPL_Fight_C___GE::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000DF, "Member 'BPL_Fight_C___GE::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_BooleanOR_ReturnValue) == 0x0000E0, "Member 'BPL_Fight_C___GE::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Array_Get_Item) == 0x0000E4, "Member 'BPL_Fight_C___GE::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Array_Length_ReturnValue) == 0x0000F4, "Member 'BPL_Fight_C___GE::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x0000F8, "Member 'BPL_Fight_C___GE::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000108, "Member 'BPL_Fight_C___GE::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000110, "Member 'BPL_Fight_C___GE::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_GetAbilitySystemComponent_ReturnValue_1) == 0x000118, "Member 'BPL_Fight_C___GE::CallFunc_GetAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000120, "Member 'BPL_Fight_C___GE::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000128, "Member 'BPL_Fight_C___GE::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_GetAbilitySystemComponent_ReturnValue_2) == 0x000138, "Member 'BPL_Fight_C___GE::CallFunc_GetAbilitySystemComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_GetAbilitySystemComponent_ReturnValue_3) == 0x000140, "Member 'BPL_Fight_C___GE::CallFunc_GetAbilitySystemComponent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_MakeOutgoingSpec_ReturnValue_1) == 0x000148, "Member 'BPL_Fight_C___GE::CallFunc_MakeOutgoingSpec_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_SetDuration_ReturnValue) == 0x000158, "Member 'BPL_Fight_C___GE::CallFunc_SetDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000168, "Member 'BPL_Fight_C___GE::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, ___int_Loop_Counter_Variable) == 0x00016C, "Member 'BPL_Fight_C___GE::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_AddAssetTags_ReturnValue) == 0x000170, "Member 'BPL_Fight_C___GE::CallFunc_AddAssetTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Less_IntInt_ReturnValue) == 0x000180, "Member 'BPL_Fight_C___GE::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_AddGrantedTags_ReturnValue) == 0x000188, "Member 'BPL_Fight_C___GE::CallFunc_AddGrantedTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_SetStackCount_ReturnValue) == 0x000198, "Member 'BPL_Fight_C___GE::CallFunc_SetStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_Add_IntInt_ReturnValue) == 0x0001A8, "Member 'BPL_Fight_C___GE::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_GetEffectContext_ReturnValue) == 0x0001B0, "Member 'BPL_Fight_C___GE::CallFunc_GetEffectContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C___GE, CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue) == 0x0001C8, "Member 'BPL_Fight_C___GE::CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue' has a wrong offset!");

}

