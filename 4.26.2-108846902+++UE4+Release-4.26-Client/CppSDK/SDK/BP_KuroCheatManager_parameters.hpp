#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroCheatManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_KuroCheatManager.BP_KuroCheatManager_C.ExecuteUbergraph_BP_KuroCheatManager
// 0x0020 (0x0020 - 0x0000)
struct BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetOuterObject_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CharacterController_C*              K2Node_DynamicCast_AsBP_Character_Controller;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager) == 0x000008, "Wrong alignment on BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager");
static_assert(sizeof(BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager) == 0x000020, "Wrong size on BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager");
static_assert(offsetof(BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager, EntryPoint) == 0x000000, "Member 'BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager, CallFunc_GetOuterObject_ReturnValue) == 0x000008, "Member 'BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager::CallFunc_GetOuterObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager, K2Node_DynamicCast_AsBP_Character_Controller) == 0x000010, "Member 'BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager::K2Node_DynamicCast_AsBP_Character_Controller' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_KuroCheatManager_C_ExecuteUbergraph_BP_KuroCheatManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_KuroCheatManager.BP_KuroCheatManager_C.\
ä
// 0x0108 (0x0108 - 0x0000)
struct BP_KuroCheatManager_C_____ final
{
public:
	struct FKey                                   Param__e__;                                        // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Param___;                                          // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_1;        // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_2;        // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_3;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_3;        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_4;          // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_4;        // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_5;          // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_5;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_6;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_7;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_6;        // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_8;          // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_7;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_8;        // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_9;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_9;        // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_10;       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_10;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_11;       // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_11;         // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_12;       // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_12;         // 0x00E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGlobalTimeDilation_ReturnValue;        // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___float_Variable;                                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_13;       // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_13;         // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroCheatManager_C_____) == 0x000008, "Wrong alignment on BP_KuroCheatManager_C_____");
static_assert(sizeof(BP_KuroCheatManager_C_____) == 0x000108, "Wrong size on BP_KuroCheatManager_C_____");
static_assert(offsetof(BP_KuroCheatManager_C_____, Param__e__) == 0x000000, "Member 'BP_KuroCheatManager_C_____::Param__e__' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, Param___) == 0x000020, "Member 'BP_KuroCheatManager_C_____::Param___' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000021, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000022, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_1) == 0x000023, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000025, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_2) == 0x000026, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x000027, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_1) == 0x000028, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_2) == 0x000029, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_3) == 0x00002A, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_3) == 0x00002B, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_3) == 0x00002C, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_4) == 0x00002D, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_4) == 0x00002E, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_5) == 0x00002F, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_4) == 0x000030, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_5) == 0x000031, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_6) == 0x000032, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_5) == 0x000033, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_7) == 0x000034, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Not_PreBool_ReturnValue) == 0x000035, "Member 'BP_KuroCheatManager_C_____::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_6) == 0x000036, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_8) == 0x000037, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_7) == 0x000038, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_6) == 0x000039, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_7) == 0x00003A, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_8) == 0x00003B, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_9) == 0x00003C, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_8) == 0x00003D, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_9) == 0x00003E, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_9) == 0x00003F, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Create_ReturnValue) == 0x000040, "Member 'BP_KuroCheatManager_C_____::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Conv_BoolToText_ReturnValue) == 0x000048, "Member 'BP_KuroCheatManager_C_____::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'BP_KuroCheatManager_C_____::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, K2Node_MakeArray_Array) == 0x0000A0, "Member 'BP_KuroCheatManager_C_____::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_10) == 0x0000B0, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'BP_KuroCheatManager_C_____::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'BP_KuroCheatManager_C_____::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_10) == 0x0000E0, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_10) == 0x0000E1, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000E2, "Member 'BP_KuroCheatManager_C_____::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_11) == 0x0000E3, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_11) == 0x0000E4, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_12) == 0x0000E5, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_11) == 0x0000E6, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_12) == 0x0000E7, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_12) == 0x0000E8, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000EC, "Member 'BP_KuroCheatManager_C_____::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_GetGlobalTimeDilation_ReturnValue) == 0x0000F0, "Member 'BP_KuroCheatManager_C_____::CallFunc_GetGlobalTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, ___float_Variable) == 0x0000F4, "Member 'BP_KuroCheatManager_C_____::___float_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000F8, "Member 'BP_KuroCheatManager_C_____::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_Percent_FloatFloat_ReturnValue) == 0x0000FC, "Member 'BP_KuroCheatManager_C_____::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_FClamp_ReturnValue) == 0x000100, "Member 'BP_KuroCheatManager_C_____::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_BoolBool_ReturnValue_13) == 0x000104, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_BoolBool_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_EqualEqual_KeyKey_ReturnValue_13) == 0x000105, "Member 'BP_KuroCheatManager_C_____::CallFunc_EqualEqual_KeyKey_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_____, CallFunc_BooleanAND_ReturnValue_13) == 0x000106, "Member 'BP_KuroCheatManager_C_____::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");

// Function BP_KuroCheatManager.BP_KuroCheatManager_C.UpdateFunctionKey
// 0x0002 (0x0002 - 0x0000)
struct BP_KuroCheatManager_C_UpdateFunctionKey final
{
public:
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroCheatManager_C_UpdateFunctionKey) == 0x000001, "Wrong alignment on BP_KuroCheatManager_C_UpdateFunctionKey");
static_assert(sizeof(BP_KuroCheatManager_C_UpdateFunctionKey) == 0x000002, "Wrong size on BP_KuroCheatManager_C_UpdateFunctionKey");
static_assert(offsetof(BP_KuroCheatManager_C_UpdateFunctionKey, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000000, "Member 'BP_KuroCheatManager_C_UpdateFunctionKey::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_UpdateFunctionKey, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000001, "Member 'BP_KuroCheatManager_C_UpdateFunctionKey::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");

// Function BP_KuroCheatManager.BP_KuroCheatManager_C.PrintTimeScale
// 0x0080 (0x0080 - 0x0000)
struct BP_KuroCheatManager_C_PrintTimeScale final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0058(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroCheatManager_C_PrintTimeScale) == 0x000008, "Wrong alignment on BP_KuroCheatManager_C_PrintTimeScale");
static_assert(sizeof(BP_KuroCheatManager_C_PrintTimeScale) == 0x000080, "Wrong size on BP_KuroCheatManager_C_PrintTimeScale");
static_assert(offsetof(BP_KuroCheatManager_C_PrintTimeScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_KuroCheatManager_C_PrintTimeScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_PrintTimeScale, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'BP_KuroCheatManager_C_PrintTimeScale::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_PrintTimeScale, K2Node_MakeArray_Array) == 0x000048, "Member 'BP_KuroCheatManager_C_PrintTimeScale::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_PrintTimeScale, CallFunc_Format_ReturnValue) == 0x000058, "Member 'BP_KuroCheatManager_C_PrintTimeScale::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_PrintTimeScale, CallFunc_Conv_TextToString_ReturnValue) == 0x000070, "Member 'BP_KuroCheatManager_C_PrintTimeScale::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_KuroCheatManager.BP_KuroCheatManager_C.TouchDebug
// 0x0044 (0x0044 - 0x0000)
struct BP_KuroCheatManager_C_TouchDebug final
{
public:
	float                                         CallFunc_GetInputTouchState_LocationX;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputTouchState_LocationY;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInputTouchState_bIsCurrentlyPressed;   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInputTouchState_LocationX_1;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputTouchState_LocationY_1;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInputTouchState_bIsCurrentlyPressed_1; // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeSeconds_ReturnValue_1;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroCheatManager_C_TouchDebug) == 0x000004, "Wrong alignment on BP_KuroCheatManager_C_TouchDebug");
static_assert(sizeof(BP_KuroCheatManager_C_TouchDebug) == 0x000044, "Wrong size on BP_KuroCheatManager_C_TouchDebug");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetInputTouchState_LocationX) == 0x000000, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetInputTouchState_LocationX' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetInputTouchState_LocationY) == 0x000004, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetInputTouchState_LocationY' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetInputTouchState_bIsCurrentlyPressed) == 0x000008, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetInputTouchState_bIsCurrentlyPressed' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetInputTouchState_LocationX_1) == 0x00000C, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetInputTouchState_LocationX_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetInputTouchState_LocationY_1) == 0x000010, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetInputTouchState_LocationY_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetInputTouchState_bIsCurrentlyPressed_1) == 0x000014, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetInputTouchState_bIsCurrentlyPressed_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_Less_FloatFloat_ReturnValue) == 0x000015, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000016, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000017, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetViewportSize_ReturnValue) == 0x00001C, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_BreakVector2D_X) == 0x000024, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetTimeSeconds_ReturnValue) == 0x00002C, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_BooleanAND_ReturnValue_1) == 0x000035, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_GetTimeSeconds_ReturnValue_1) == 0x000038, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_GetTimeSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_TouchDebug, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_KuroCheatManager_C_TouchDebug::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_KuroCheatManager.BP_KuroCheatManager_C.:ØÒr
// 0x0028 (0x0028 - 0x0000)
struct BP_KuroCheatManager_C_______r final
{
public:
	bool                                          _____;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     PlayerAsTsBaseCharacter;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroCheatManager_C_______r) == 0x000008, "Wrong alignment on BP_KuroCheatManager_C_______r");
static_assert(sizeof(BP_KuroCheatManager_C_______r) == 0x000028, "Wrong size on BP_KuroCheatManager_C_______r");
static_assert(offsetof(BP_KuroCheatManager_C_______r, _____) == 0x000000, "Member 'BP_KuroCheatManager_C_______r::_____' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_______r, PlayerAsTsBaseCharacter) == 0x000008, "Member 'BP_KuroCheatManager_C_______r::PlayerAsTsBaseCharacter' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_______r, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_KuroCheatManager_C_______r::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_______r, K2Node_DynamicCast_AsTs_Base_Character) == 0x000018, "Member 'BP_KuroCheatManager_C_______r::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(BP_KuroCheatManager_C_______r, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_KuroCheatManager_C_______r::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

