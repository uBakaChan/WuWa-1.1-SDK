#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightsGroup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightsGroup.BP_LightsGroup_C
// 0x0060 (0x0308 - 0x02A8)
class ABP_LightsGroup_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTick;                                            // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TurnOffOrOn;                                       // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseSimpleToggle;                                   // 0x02BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseColorChange;                                    // 0x02BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Time;                                              // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 LightsIntensity;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           ColorOriginal;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorTarget;                                       // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Test;                                              // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LightsGroup(int32 EntryPoint);
	void ReceiveTick(float Param_DeltaSeconds);
	void ReceiveBeginPlay();
	void ToggleLights(bool InEnable);
	void ToggleLightsIntensity();
	void TurnOffLights(float ElapsedTime);
	void TurnOnLights(float ElapsedTime);
	void Timer(float* ElapsedTime);
	void GetLightsIntensity();
	void ToggleLightsColorChange();
	void LightsColorChange(float ElapsedTime, const struct FLinearColor& Param_ColorOriginal, const struct FLinearColor& Param_ColorTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightsGroup_C">();
	}
	static class ABP_LightsGroup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightsGroup_C>();
	}
};
static_assert(alignof(ABP_LightsGroup_C) == 0x000008, "Wrong alignment on ABP_LightsGroup_C");
static_assert(sizeof(ABP_LightsGroup_C) == 0x000308, "Wrong size on ABP_LightsGroup_C");
static_assert(offsetof(ABP_LightsGroup_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_LightsGroup_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_LightsGroup_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, IsTick) == 0x0002B8, "Member 'ABP_LightsGroup_C::IsTick' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, TurnOffOrOn) == 0x0002B9, "Member 'ABP_LightsGroup_C::TurnOffOrOn' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, UseSimpleToggle) == 0x0002BA, "Member 'ABP_LightsGroup_C::UseSimpleToggle' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, UseColorChange) == 0x0002BB, "Member 'ABP_LightsGroup_C::UseColorChange' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, Time) == 0x0002BC, "Member 'ABP_LightsGroup_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, Duration) == 0x0002C0, "Member 'ABP_LightsGroup_C::Duration' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, DeltaSeconds) == 0x0002C4, "Member 'ABP_LightsGroup_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, LightsIntensity) == 0x0002C8, "Member 'ABP_LightsGroup_C::LightsIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, ColorOriginal) == 0x0002D8, "Member 'ABP_LightsGroup_C::ColorOriginal' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, ColorTarget) == 0x0002E8, "Member 'ABP_LightsGroup_C::ColorTarget' has a wrong offset!");
static_assert(offsetof(ABP_LightsGroup_C, Test) == 0x0002F8, "Member 'ABP_LightsGroup_C::Test' has a wrong offset!");

}

