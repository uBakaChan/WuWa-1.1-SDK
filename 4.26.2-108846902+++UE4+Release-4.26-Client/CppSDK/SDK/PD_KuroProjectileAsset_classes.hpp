#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PD_KuroProjectileAsset

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PD_KuroProjectileAsset.PD_KuroProjectileAsset_C
// 0x0030 (0x0068 - 0x0038)
class UPD_KuroProjectileAsset_C final : public UPrimaryDataAsset
{
public:
	class UStaticMesh*                            DistanceRocordMesh;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisplayDistancePerRecord;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxPlaceCount;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecordDeltaAngle;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDeltaAngle;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetSize;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetThreshold;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationSpeed;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecordSize;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      TargetDecalMat;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PD_KuroProjectileAsset_C">();
	}
	static class UPD_KuroProjectileAsset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPD_KuroProjectileAsset_C>();
	}
};
static_assert(alignof(UPD_KuroProjectileAsset_C) == 0x000008, "Wrong alignment on UPD_KuroProjectileAsset_C");
static_assert(sizeof(UPD_KuroProjectileAsset_C) == 0x000068, "Wrong size on UPD_KuroProjectileAsset_C");
static_assert(offsetof(UPD_KuroProjectileAsset_C, DistanceRocordMesh) == 0x000038, "Member 'UPD_KuroProjectileAsset_C::DistanceRocordMesh' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, DisplayDistancePerRecord) == 0x000040, "Member 'UPD_KuroProjectileAsset_C::DisplayDistancePerRecord' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, MaxPlaceCount) == 0x000044, "Member 'UPD_KuroProjectileAsset_C::MaxPlaceCount' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, RecordDeltaAngle) == 0x000048, "Member 'UPD_KuroProjectileAsset_C::RecordDeltaAngle' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, TargetDeltaAngle) == 0x00004C, "Member 'UPD_KuroProjectileAsset_C::TargetDeltaAngle' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, TargetSize) == 0x000050, "Member 'UPD_KuroProjectileAsset_C::TargetSize' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, TargetThreshold) == 0x000054, "Member 'UPD_KuroProjectileAsset_C::TargetThreshold' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, AnimationSpeed) == 0x000058, "Member 'UPD_KuroProjectileAsset_C::AnimationSpeed' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, RecordSize) == 0x00005C, "Member 'UPD_KuroProjectileAsset_C::RecordSize' has a wrong offset!");
static_assert(offsetof(UPD_KuroProjectileAsset_C, TargetDecalMat) == 0x000060, "Member 'UPD_KuroProjectileAsset_C::TargetDecalMat' has a wrong offset!");

}

