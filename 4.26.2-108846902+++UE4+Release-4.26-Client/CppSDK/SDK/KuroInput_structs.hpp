#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroInput

#include "Basic.hpp"


namespace SDK
{

// Enum KuroInput.EInputMode
// NumValues: 0x0004
enum class EInputMode : uint8
{
	GameOnly                                 = 0,
	GameAndUI                                = 1,
	UIOnly                                   = 2,
	EInputMode_MAX                           = 3,
};

// Enum KuroInput.EKuroForceFeedbackType
// NumValues: 0x0003
enum class EKuroForceFeedbackType : uint8
{
	Always                                   = 0,
	Limit                                    = 1,
	EKuroForceFeedbackType_MAX               = 2,
};

// Enum KuroInput.EGlobalKuroForceFeedbackType
// NumValues: 0x0004
enum class EGlobalKuroForceFeedbackType : uint8
{
	Always                                   = 0,
	Sometimes                                = 1,
	Never                                    = 2,
	EGlobalKuroForceFeedbackType_MAX         = 3,
};

// ScriptStruct KuroInput.InputModeReply
// 0x0020 (0x0020 - 0x0000)
struct FInputModeReply final
{
public:
	int32                                         HandleID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputMode                                    InputModeType;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLockMouseToViewport;                             // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHideCursorDuringCapture;                         // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputModeReply) == 0x000008, "Wrong alignment on FInputModeReply");
static_assert(sizeof(FInputModeReply) == 0x000020, "Wrong size on FInputModeReply");
static_assert(offsetof(FInputModeReply, HandleID) == 0x000000, "Member 'FInputModeReply::HandleID' has a wrong offset!");
static_assert(offsetof(FInputModeReply, Reason) == 0x000008, "Member 'FInputModeReply::Reason' has a wrong offset!");
static_assert(offsetof(FInputModeReply, InputModeType) == 0x000018, "Member 'FInputModeReply::InputModeType' has a wrong offset!");
static_assert(offsetof(FInputModeReply, IsLockMouseToViewport) == 0x000019, "Member 'FInputModeReply::IsLockMouseToViewport' has a wrong offset!");
static_assert(offsetof(FInputModeReply, IsHideCursorDuringCapture) == 0x00001A, "Member 'FInputModeReply::IsHideCursorDuringCapture' has a wrong offset!");

}

