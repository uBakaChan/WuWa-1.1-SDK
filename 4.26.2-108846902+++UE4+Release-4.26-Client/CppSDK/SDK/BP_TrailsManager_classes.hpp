#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrailsManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "STrailDrawInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrailsManager.BP_TrailsManager_C
// 0x00B8 (0x0368 - 0x02B0)
class ABP_TrailsManager_C final : public AKuroHighResLandscapeActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_TrailDrawComponent_C*>       Drawers;                                           // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ABP_TrailSensorActor_C*>         TrailFields;                                       // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector2D                              Position;                                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DrawSize;                                          // 0x02F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTrailDrawInfo>                DrawInfo;                                          // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          ShouldDraw;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PixelWidth_Save;                                   // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         PixelWidth_Blur;                                   // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         EdgeWidth;                                         // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlurWidth;                                         // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PixelWidth_Capture;                                // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_TrailSensorActor_C*>         TrailFields_NeedRemove;                            // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          DebugLog;                                          // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ActiveHighResLandscape;                            // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALandscapeStreamingProxy*>       LowLandscapes;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ALandscapeStreamingProxy*>       HighLandscapes;                                    // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          LandscapeDirty;                                    // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Old_Enabled;                                       // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnProxyShow(class ALandscapeStreamingProxy* Proxy);
	void OnProxyHide(class ALandscapeStreamingProxy* Proxy);
	void ExecuteUbergraph_BP_TrailsManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void IsEnable(bool* Param_IsEnable);
	void ShowProxy(class ALandscapeStreamingProxy* Proxy);
	void HideProxy(class ALandscapeStreamingProxy* Proxy);
	void ContainsTag(class ALandscapeStreamingProxy* Actor, class FName Str, bool* Ret, int32* Param_Index);
	void GetTag(class ALandscapeStreamingProxy* Proxy, int32 Param_Index, class FString* Tag);
	void UpdateLandscapes();
	void Test();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrailsManager_C">();
	}
	static class ABP_TrailsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrailsManager_C>();
	}
};
static_assert(alignof(ABP_TrailsManager_C) == 0x000008, "Wrong alignment on ABP_TrailsManager_C");
static_assert(sizeof(ABP_TrailsManager_C) == 0x000368, "Wrong size on ABP_TrailsManager_C");
static_assert(offsetof(ABP_TrailsManager_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_TrailsManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, Billboard) == 0x0002B8, "Member 'ABP_TrailsManager_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_TrailsManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, Drawers) == 0x0002C8, "Member 'ABP_TrailsManager_C::Drawers' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailFields) == 0x0002D8, "Member 'ABP_TrailsManager_C::TrailFields' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, Position) == 0x0002E8, "Member 'ABP_TrailsManager_C::Position' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, Rotation) == 0x0002F0, "Member 'ABP_TrailsManager_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, DrawSize) == 0x0002F4, "Member 'ABP_TrailsManager_C::DrawSize' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, DrawInfo) == 0x000300, "Member 'ABP_TrailsManager_C::DrawInfo' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, ShouldDraw) == 0x000310, "Member 'ABP_TrailsManager_C::ShouldDraw' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PixelWidth_Save) == 0x000314, "Member 'ABP_TrailsManager_C::PixelWidth_Save' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PixelWidth_Blur) == 0x000318, "Member 'ABP_TrailsManager_C::PixelWidth_Blur' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, EdgeWidth) == 0x00031C, "Member 'ABP_TrailsManager_C::EdgeWidth' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, BlurWidth) == 0x000320, "Member 'ABP_TrailsManager_C::BlurWidth' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, PixelWidth_Capture) == 0x000324, "Member 'ABP_TrailsManager_C::PixelWidth_Capture' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailFields_NeedRemove) == 0x000328, "Member 'ABP_TrailsManager_C::TrailFields_NeedRemove' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, DebugLog) == 0x000338, "Member 'ABP_TrailsManager_C::DebugLog' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, ActiveHighResLandscape) == 0x000339, "Member 'ABP_TrailsManager_C::ActiveHighResLandscape' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, LowLandscapes) == 0x000340, "Member 'ABP_TrailsManager_C::LowLandscapes' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HighLandscapes) == 0x000350, "Member 'ABP_TrailsManager_C::HighLandscapes' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, LandscapeDirty) == 0x000360, "Member 'ABP_TrailsManager_C::LandscapeDirty' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, Old_Enabled) == 0x000361, "Member 'ABP_TrailsManager_C::Old_Enabled' has a wrong offset!");

}

