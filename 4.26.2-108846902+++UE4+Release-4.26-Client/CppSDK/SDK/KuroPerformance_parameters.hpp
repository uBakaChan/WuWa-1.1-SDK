#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroPerformance

#include "Basic.hpp"

#include "KuroPerformance_structs.hpp"


namespace SDK::Params
{

// Function KuroPerformance.KuroPerformanceBPLibrary.BoostCPU
// 0x000C (0x000C - 0x0000)
struct KuroPerformanceBPLibrary_BoostCPU final
{
public:
	int32                                         FrequencyPercentage;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostDurationInMilliSecond;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoostMemory;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroPerformanceBPLibrary_BoostCPU) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_BoostCPU");
static_assert(sizeof(KuroPerformanceBPLibrary_BoostCPU) == 0x00000C, "Wrong size on KuroPerformanceBPLibrary_BoostCPU");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostCPU, FrequencyPercentage) == 0x000000, "Member 'KuroPerformanceBPLibrary_BoostCPU::FrequencyPercentage' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostCPU, BoostDurationInMilliSecond) == 0x000004, "Member 'KuroPerformanceBPLibrary_BoostCPU::BoostDurationInMilliSecond' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostCPU, bBoostMemory) == 0x000008, "Member 'KuroPerformanceBPLibrary_BoostCPU::bBoostMemory' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostCPU, ReturnValue) == 0x000009, "Member 'KuroPerformanceBPLibrary_BoostCPU::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.BoostGPU
// 0x000C (0x000C - 0x0000)
struct KuroPerformanceBPLibrary_BoostGPU final
{
public:
	int32                                         FrequencyPercentage;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostDurationInMilliSecond;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoostMemory;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroPerformanceBPLibrary_BoostGPU) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_BoostGPU");
static_assert(sizeof(KuroPerformanceBPLibrary_BoostGPU) == 0x00000C, "Wrong size on KuroPerformanceBPLibrary_BoostGPU");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostGPU, FrequencyPercentage) == 0x000000, "Member 'KuroPerformanceBPLibrary_BoostGPU::FrequencyPercentage' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostGPU, BoostDurationInMilliSecond) == 0x000004, "Member 'KuroPerformanceBPLibrary_BoostGPU::BoostDurationInMilliSecond' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostGPU, bBoostMemory) == 0x000008, "Member 'KuroPerformanceBPLibrary_BoostGPU::bBoostMemory' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_BoostGPU, ReturnValue) == 0x000009, "Member 'KuroPerformanceBPLibrary_BoostGPU::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.GetCurrentTemperatureData
// 0x0028 (0x0028 - 0x0000)
struct KuroPerformanceBPLibrary_GetCurrentTemperatureData final
{
public:
	TDelegate<void(bool bResult, float CurrentTemperature, float TempBudget)> Delegate;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroPerformanceBPLibrary_GetCurrentTemperatureData) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_GetCurrentTemperatureData");
static_assert(sizeof(KuroPerformanceBPLibrary_GetCurrentTemperatureData) == 0x000028, "Wrong size on KuroPerformanceBPLibrary_GetCurrentTemperatureData");
static_assert(offsetof(KuroPerformanceBPLibrary_GetCurrentTemperatureData, Delegate) == 0x000000, "Member 'KuroPerformanceBPLibrary_GetCurrentTemperatureData::Delegate' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.GetTickedPerformanceReport
// 0x0014 (0x0014 - 0x0000)
struct KuroPerformanceBPLibrary_GetTickedPerformanceReport final
{
public:
	struct FKuroPerformanceReport                 PerformanceReport;                                 // 0x0000(0x0014)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroPerformanceBPLibrary_GetTickedPerformanceReport) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_GetTickedPerformanceReport");
static_assert(sizeof(KuroPerformanceBPLibrary_GetTickedPerformanceReport) == 0x000014, "Wrong size on KuroPerformanceBPLibrary_GetTickedPerformanceReport");
static_assert(offsetof(KuroPerformanceBPLibrary_GetTickedPerformanceReport, PerformanceReport) == 0x000000, "Member 'KuroPerformanceBPLibrary_GetTickedPerformanceReport::PerformanceReport' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.IsPerformanceAdaptiveRunning
// 0x0001 (0x0001 - 0x0000)
struct KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning) == 0x000001, "Wrong alignment on KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning");
static_assert(sizeof(KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning) == 0x000001, "Wrong size on KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning");
static_assert(offsetof(KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning, ReturnValue) == 0x000000, "Member 'KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.PredictWorkload
// 0x000C (0x000C - 0x0000)
struct KuroPerformanceBPLibrary_PredictWorkload final
{
public:
	int32                                         CPULoadScale;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GPULoadScale;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroPerformanceBPLibrary_PredictWorkload) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_PredictWorkload");
static_assert(sizeof(KuroPerformanceBPLibrary_PredictWorkload) == 0x00000C, "Wrong size on KuroPerformanceBPLibrary_PredictWorkload");
static_assert(offsetof(KuroPerformanceBPLibrary_PredictWorkload, CPULoadScale) == 0x000000, "Member 'KuroPerformanceBPLibrary_PredictWorkload::CPULoadScale' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_PredictWorkload, GPULoadScale) == 0x000004, "Member 'KuroPerformanceBPLibrary_PredictWorkload::GPULoadScale' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_PredictWorkload, ReturnValue) == 0x000008, "Member 'KuroPerformanceBPLibrary_PredictWorkload::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.SetPerformanceAdaptiveStatus
// 0x0001 (0x0001 - 0x0000)
struct KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus) == 0x000001, "Wrong alignment on KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus");
static_assert(sizeof(KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus) == 0x000001, "Wrong size on KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus");
static_assert(offsetof(KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus, bEnable) == 0x000000, "Member 'KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus::bEnable' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.SetTargetFPS
// 0x000C (0x000C - 0x0000)
struct KuroPerformanceBPLibrary_SetTargetFPS final
{
public:
	int32                                         FPS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThreadId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroPerformanceBPLibrary_SetTargetFPS) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_SetTargetFPS");
static_assert(sizeof(KuroPerformanceBPLibrary_SetTargetFPS) == 0x00000C, "Wrong size on KuroPerformanceBPLibrary_SetTargetFPS");
static_assert(offsetof(KuroPerformanceBPLibrary_SetTargetFPS, FPS) == 0x000000, "Member 'KuroPerformanceBPLibrary_SetTargetFPS::FPS' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_SetTargetFPS, ThreadId) == 0x000004, "Member 'KuroPerformanceBPLibrary_SetTargetFPS::ThreadId' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_SetTargetFPS, ReturnValue) == 0x000008, "Member 'KuroPerformanceBPLibrary_SetTargetFPS::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.StartPerformanceAdaptiveService
// 0x0008 (0x0008 - 0x0000)
struct KuroPerformanceBPLibrary_StartPerformanceAdaptiveService final
{
public:
	int32                                         EServiceFlags;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroPerformanceBPLibrary_StartPerformanceAdaptiveService) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_StartPerformanceAdaptiveService");
static_assert(sizeof(KuroPerformanceBPLibrary_StartPerformanceAdaptiveService) == 0x000008, "Wrong size on KuroPerformanceBPLibrary_StartPerformanceAdaptiveService");
static_assert(offsetof(KuroPerformanceBPLibrary_StartPerformanceAdaptiveService, EServiceFlags) == 0x000000, "Member 'KuroPerformanceBPLibrary_StartPerformanceAdaptiveService::EServiceFlags' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_StartPerformanceAdaptiveService, ReturnValue) == 0x000004, "Member 'KuroPerformanceBPLibrary_StartPerformanceAdaptiveService::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.StopPerformanceAdaptiveService
// 0x0008 (0x0008 - 0x0000)
struct KuroPerformanceBPLibrary_StopPerformanceAdaptiveService final
{
public:
	int32                                         EServiceFlags;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroPerformanceBPLibrary_StopPerformanceAdaptiveService) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_StopPerformanceAdaptiveService");
static_assert(sizeof(KuroPerformanceBPLibrary_StopPerformanceAdaptiveService) == 0x000008, "Wrong size on KuroPerformanceBPLibrary_StopPerformanceAdaptiveService");
static_assert(offsetof(KuroPerformanceBPLibrary_StopPerformanceAdaptiveService, EServiceFlags) == 0x000000, "Member 'KuroPerformanceBPLibrary_StopPerformanceAdaptiveService::EServiceFlags' has a wrong offset!");
static_assert(offsetof(KuroPerformanceBPLibrary_StopPerformanceAdaptiveService, ReturnValue) == 0x000004, "Member 'KuroPerformanceBPLibrary_StopPerformanceAdaptiveService::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.Tick
// 0x0004 (0x0004 - 0x0000)
struct KuroPerformanceBPLibrary_Tick final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroPerformanceBPLibrary_Tick) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_Tick");
static_assert(sizeof(KuroPerformanceBPLibrary_Tick) == 0x000004, "Wrong size on KuroPerformanceBPLibrary_Tick");
static_assert(offsetof(KuroPerformanceBPLibrary_Tick, ReturnValue) == 0x000000, "Member 'KuroPerformanceBPLibrary_Tick::ReturnValue' has a wrong offset!");

// Function KuroPerformance.KuroPerformanceBPLibrary.TickPerfReport
// 0x0004 (0x0004 - 0x0000)
struct KuroPerformanceBPLibrary_TickPerfReport final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroPerformanceBPLibrary_TickPerfReport) == 0x000004, "Wrong alignment on KuroPerformanceBPLibrary_TickPerfReport");
static_assert(sizeof(KuroPerformanceBPLibrary_TickPerfReport) == 0x000004, "Wrong size on KuroPerformanceBPLibrary_TickPerfReport");
static_assert(offsetof(KuroPerformanceBPLibrary_TickPerfReport, ReturnValue) == 0x000000, "Member 'KuroPerformanceBPLibrary_TickPerfReport::ReturnValue' has a wrong offset!");

}

