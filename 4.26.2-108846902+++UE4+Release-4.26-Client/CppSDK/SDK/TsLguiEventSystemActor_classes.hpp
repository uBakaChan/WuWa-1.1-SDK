#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsLguiEventSystemActor

#include "Basic.hpp"

#include "LGUI_structs.hpp"
#include "LGUI_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsLguiEventSystemActor.TsLguiEventSystemActor_C
// 0x0028 (0x02D8 - 0x02B0)
class ATsLguiEventSystemActor_C final : public ALGUIEventSystemActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULGUI_TouchInputModule*                 TouchInputModule;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULGUI_StandaloneInputModule*            StandaloneInputModule;                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULGUI_PointerInputModule*               CurrentInputModule;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NavigationEnable;                                  // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void InputTrigger(bool TriggerPress, EMouseButtonType MouseButtonType);
	void InputNavigation(ELGUINavigationDirection Direction, bool PressOrRelease, bool ForceNavigation);
	void InputTriggerForNavigation(bool TriggerPress);
	void InputScroll(float AxisValue);
	void InputTouchTrigger(bool TouchPress, int32 TouchId, const struct FVector& TouchPointPosition);
	void InputTouchMove(int32 TouchId, const struct FVector& TouchPointPosition);
	class UUIItem* GetNowHitComponent();
	class ULGUIPointerEventData* GetPointerEventData(float PointerId, bool CreateIfNotExist);
	bool IsPointerEventDataLineTrace(class ULGUIPointerEventData* PointerEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsLguiEventSystemActor_C">();
	}
	static class ATsLguiEventSystemActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATsLguiEventSystemActor_C>();
	}
};
static_assert(alignof(ATsLguiEventSystemActor_C) == 0x000008, "Wrong alignment on ATsLguiEventSystemActor_C");
static_assert(sizeof(ATsLguiEventSystemActor_C) == 0x0002D8, "Wrong size on ATsLguiEventSystemActor_C");
static_assert(offsetof(ATsLguiEventSystemActor_C, DefaultSceneRoot) == 0x0002B0, "Member 'ATsLguiEventSystemActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ATsLguiEventSystemActor_C, TouchInputModule) == 0x0002B8, "Member 'ATsLguiEventSystemActor_C::TouchInputModule' has a wrong offset!");
static_assert(offsetof(ATsLguiEventSystemActor_C, StandaloneInputModule) == 0x0002C0, "Member 'ATsLguiEventSystemActor_C::StandaloneInputModule' has a wrong offset!");
static_assert(offsetof(ATsLguiEventSystemActor_C, CurrentInputModule) == 0x0002C8, "Member 'ATsLguiEventSystemActor_C::CurrentInputModule' has a wrong offset!");
static_assert(offsetof(ATsLguiEventSystemActor_C, NavigationEnable) == 0x0002D0, "Member 'ATsLguiEventSystemActor_C::NavigationEnable' has a wrong offset!");

}

