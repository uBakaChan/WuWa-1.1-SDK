#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Role_AimThrow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GA_Base_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Role_AimThrow.GA_Role_AimThrow_C
// 0x0090 (0x05C0 - 0x0530)
class UGA_Role_AimThrow_C final : public UGA_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Role_AimThrow_C;                 // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAbilityTask_WaitDelay*                 _e_______;                                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameplayTask_WaitDelay*                _e______K;                                         // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayEvent*         _e________0;                                       // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors_to_Ignore;                                  // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                P9___;                                             // 0x0560(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Projectile_Radius;                                 // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Projectile_Speed;                                  // 0x0570(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Override_Gravity_Z;                                // 0x0574(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sim_Frequency;                                     // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Sim_Time;                                      // 0x057C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Average_Delta_Time;                                // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584[0x4];                                      // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Array_Delta_Time;                                  // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Line_Trace_Update;                                 // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_WaitDelay*                _e_____fh;                                         // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameplayTask_WaitDelay*                _e_____yH;                                         // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimaryDataAsset*                      DA_Fx_Throw_Casting;                               // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EffectHandel;                                      // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Role_AimThrow(int32 EntryPoint);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnTick_8D96293640861CE3D30811B27CA46F28();
	void OnFinish_8D96293640861CE3D30811B27CA46F28();
	void EventReceived_18B59F5945020DB23C42FD88533AE3C7(const struct FGameplayEventData& Payload);
	void OnFinish_174DF1B944D91B2618D3C4A0584E72A0();
	void OnTick_8D96293640861CE3D30811B28AAEC61F();
	void OnFinish_8D96293640861CE3D30811B28AAEC61F();
	void OnTick_8D96293640861CE3D30811B2D8DBA7E8();
	void OnFinish_8D96293640861CE3D30811B2D8DBA7E8();
	void OnFinish_C807E679403EDDDC3E3AA399AC949573();
	void __sG_(TArray<float>& ArrayFloat, float* AverageFloat);
	struct FVector __P9___();
	void __fh__(bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Role_AimThrow_C">();
	}
	static class UGA_Role_AimThrow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Role_AimThrow_C>();
	}
};
static_assert(alignof(UGA_Role_AimThrow_C) == 0x000008, "Wrong alignment on UGA_Role_AimThrow_C");
static_assert(sizeof(UGA_Role_AimThrow_C) == 0x0005C0, "Wrong size on UGA_Role_AimThrow_C");
static_assert(offsetof(UGA_Role_AimThrow_C, UberGraphFrame_GA_Role_AimThrow_C) == 0x000530, "Member 'UGA_Role_AimThrow_C::UberGraphFrame_GA_Role_AimThrow_C' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, _e_______) == 0x000538, "Member 'UGA_Role_AimThrow_C::_e_______' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, _e______K) == 0x000540, "Member 'UGA_Role_AimThrow_C::_e______K' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, _e________0) == 0x000548, "Member 'UGA_Role_AimThrow_C::_e________0' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Actors_to_Ignore) == 0x000550, "Member 'UGA_Role_AimThrow_C::Actors_to_Ignore' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, P9___) == 0x000560, "Member 'UGA_Role_AimThrow_C::P9___' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Projectile_Radius) == 0x00056C, "Member 'UGA_Role_AimThrow_C::Projectile_Radius' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Projectile_Speed) == 0x000570, "Member 'UGA_Role_AimThrow_C::Projectile_Speed' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Override_Gravity_Z) == 0x000574, "Member 'UGA_Role_AimThrow_C::Override_Gravity_Z' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Sim_Frequency) == 0x000578, "Member 'UGA_Role_AimThrow_C::Sim_Frequency' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Max_Sim_Time) == 0x00057C, "Member 'UGA_Role_AimThrow_C::Max_Sim_Time' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Average_Delta_Time) == 0x000580, "Member 'UGA_Role_AimThrow_C::Average_Delta_Time' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Array_Delta_Time) == 0x000588, "Member 'UGA_Role_AimThrow_C::Array_Delta_Time' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, Line_Trace_Update) == 0x000598, "Member 'UGA_Role_AimThrow_C::Line_Trace_Update' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, _e_____fh) == 0x0005A0, "Member 'UGA_Role_AimThrow_C::_e_____fh' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, _e_____yH) == 0x0005A8, "Member 'UGA_Role_AimThrow_C::_e_____yH' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, DA_Fx_Throw_Casting) == 0x0005B0, "Member 'UGA_Role_AimThrow_C::DA_Fx_Throw_Casting' has a wrong offset!");
static_assert(offsetof(UGA_Role_AimThrow_C, EffectHandel) == 0x0005B8, "Member 'UGA_Role_AimThrow_C::EffectHandel' has a wrong offset!");

}

