#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsMoveBlueprintFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EMovementDirection_structs.hpp"
#include "EExitClimb_structs.hpp"
#include "EClimbState_structs.hpp"
#include "EEnterClimb_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UTsMoveBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static bool SetActorRotationWithPriority(int32 EntityId, const struct FRotator& Value, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static bool SetActorRotationWithContext(int32 EntityId, const struct FRotator& Rotation, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static void ActorTeleportToWithContext(int32 EntityId, const struct FVector& Location, const struct FRotator& Rotation, const class FString& Context, class UObject* __WorldContext);
	static void ActorKuroMoveAlongFloorWithContext(int32 EntityId, const struct FVector& Velocity, float DeltaSeconds, const class FString& Context, class UObject* __WorldContext);
	static struct FVector GetInputDirect(int32 EntityId, class UObject* __WorldContext);
	static void SetInputDirect(int32 EntityId, const struct FVector& Direct, class UObject* __WorldContext);
	static struct FRotator GetInputRotator(int32 EntityId, class UObject* __WorldContext);
	static void SetInputRotator(int32 EntityId, const struct FRotator& Rotator, class UObject* __WorldContext);
	static void SetCharacterHidden(int32 EntityId, bool IsHidden, class UObject* CallObject, const class FString& Reason, class UObject* __WorldContext);
	static void SetHiddenMovementMode(int32 EntityId, bool IsHidden, class UObject* __WorldContext);
	static bool CanResponseInput(int32 EntityId, class UObject* __WorldContext);
	static bool CanJumpPress(int32 EntityId, class UObject* __WorldContext);
	static bool CanWalkPress(int32 EntityId, class UObject* __WorldContext);
	static float GetHeightAboveGround(int32 EntityId, class UObject* __WorldContext);
	static struct FVector GetAcceleration(int32 EntityId, class UObject* __WorldContext);
	static float GetAimYawRate(int32 EntityId, class UObject* __WorldContext);
	static struct FSMovementSetting_State GetMovementData(int32 EntityId, class UObject* __WorldContext);
	static void SmoothCharacterRotation(int32 EntityId, const struct FRotator& Target, float Speed, const class FString& Context, class UObject* __WorldContext);
	static bool HasMoveInput(int32 EntityId, class UObject* __WorldContext);
	static bool HasRotatorInput(int32 EntityId, class UObject* __WorldContext);
	static bool IsMoving(int32 EntityId, class UObject* __WorldContext);
	static bool IsJump(int32 EntityId, class UObject* __WorldContext);
	static float GetSpeed(int32 EntityId, class UObject* __WorldContext);
	static float GetGroundedTime(int32 EntityId, class UObject* __WorldContext);
	static bool IsFallingIntoWater(int32 EntityId, class UObject* __WorldContext);
	static void SetForceSpeed(int32 EntityId, const struct FVector& Speed, class UObject* __WorldContext);
	static void SetAddMove(int32 EntityId, class UMeshComponent* Mesh, const struct FVector& Speed, float TimeLength, class UCurveFloat* Curve, class UObject* __WorldContext);
	static void StopAddMove(int32 EntityId, class UMeshComponent* Mesh, class UObject* __WorldContext);
	static struct FHitResult FixActorLocation(int32 EntityId, const struct FVector& Target, float Offset, class UObject* __WorldContext);
	static void StopAllAddMove(int32 EntityId, class UObject* __WorldContext);
	static void SetAddMoveWorld(int32 EntityId, class UMeshComponent* Mesh, const struct FVector& Speed, float TimeLength, class UCurveFloat* Curve, class UObject* __WorldContext);
	static void SetAddMoveWorldSpeed(int32 EntityId, class UMeshComponent* Mesh, const struct FVector& Speed, class UObject* __WorldContext);
	static void SetAddMoveOffset(int32 EntityId, const struct FVector& Offset, class UObject* __WorldContext);
	static void SetAddMoveRotation(int32 EntityId, const struct FRotator& Rotation, class UObject* __WorldContext);
	static void SetEnterWaterState(int32 EntityId, bool IsEnter, class UObject* __WorldContext);
	static struct FSClimbState GetClimbState(int32 EntityId, class UObject* __WorldContext);
	static float GetClimbRadius(int32 EntityId, class UObject* __WorldContext);
	static struct FSClimbInfo GetClimbInfo(int32 EntityId, class UObject* __WorldContext);
	static void KickExitCheck(int32 EntityId, class UObject* __WorldContext);
	static bool CanClimbPress(int32 EntityId, class UObject* __WorldContext);
	static void OnEnterClimb(int32 EntityId, class UObject* __WorldContext);
	static void OnExitClimb(int32 EntityId, class UObject* __WorldContext);
	static void DealClimbUpStart(int32 EntityId, class UObject* __WorldContext);
	static void FinishClimbDown(int32 EntityId, class UObject* __WorldContext);
	static void DealClimbUpFinish(int32 EntityId, class UObject* __WorldContext);
	static void SetClimbState(int32 EntityId, EClimbState ClimbState, class UObject* __WorldContext);
	static void SetEnterClimbType(int32 EntityId, EEnterClimb EnterType, class UObject* __WorldContext);
	static void SetExitClimbType(int32 EntityId, EExitClimb ExitType, class UObject* __WorldContext);
	static struct FVector GetWaterLocation(int32 EntityId, class UObject* __WorldContext);
	static bool GetWaterVolume(int32 EntityId, class UObject* __WorldContext);
	static float GetClimbOnWallAngle(int32 EntityId, class UObject* __WorldContext);
	static void SetUseDebugMovementSetting(int32 EntityId, bool NewSelect, class UObject* __WorldContext);
	static void SetDebugMovementSetting(int32 EntityId, const struct FSMovementSetting& NewSetting, class UObject* __WorldContext);
	static void SetLockedRotation(int32 EntityId, bool Lock, class UObject* __WorldContext);
	static bool GetLockedRotation(int32 EntityId, class UObject* __WorldContext);
	static void SetFallingHorizontalMaxSpeed(int32 EntityId, float Speed, class UObject* __WorldContext);
	static void ClearFallingHorizontalMaxSpeed(int32 EntityId, class UObject* __WorldContext);
	static bool DetectClimbWithDirect(int32 EntityId, bool bSprintEnter, const struct FVector& Direct, class UObject* __WorldContext);
	static void TurnToTarget(int32 EntityId, class AActor* Target, float Speed, class UObject* __WorldContext);
	static EMovementDirection GetMonsterMoveDirection(int32 EntityId, class UObject* __WorldContext);
	static class FString GetRoleBody(int32 EntityId, class UObject* __WorldContext);
	static float GetRacingRightSpeed(int32 EntityId, class UObject* __WorldContext);
	static void SetPendulumData(int32 EntityId, float AddVelocityX, float AddVelocityY, float AddVelocityZ, float ForwardLossPercentage, float LossPercentage, float Gravity, float Friction, float Deceleration, float Accelerator, float MaxSpeed, float MaxFallingSpeed, class UObject* __WorldContext);
	static void Reset(int32 EntityId, class UObject* __WorldContext);
	static void SetGrabPoint(int32 EntityId, const struct FVector& Point, class UObject* __WorldContext);
	static struct FVector GetGrabPoint(int32 EntityId, class UObject* __WorldContext);
	static void SetHooked(int32 EntityId, bool IsHooked, class UObject* __WorldContext);
	static bool GetHooked(int32 EntityId, class UObject* __WorldContext);
	static void SetSocketName(int32 EntityId, const class FString& SocketName, class UObject* __WorldContext);
	static void SetRopeForce(int32 EntityId, float RopeForce, class UObject* __WorldContext);
	static float GetRopeForce(int32 EntityId, class UObject* __WorldContext);
	static void SetDistanceRopeToActor(int32 EntityId, float RopeForce, class UObject* __WorldContext);
	static float GetDistanceRopeToActor(int32 EntityId, class UObject* __WorldContext);
	static void SetAirControl(int32 EntityId, float AirControl, class UObject* __WorldContext);
	static float GetAirControl(int32 EntityId, class UObject* __WorldContext);
	static void SetUpLength(int32 EntityId, float Length, class UObject* __WorldContext);
	static void SetCanMoveFromInput(int32 EntityId, bool CanMove, class UObject* __WorldContext);
	static void UpdateAnimInfoMoveMonster(int32 EntityId, class UBP_ABPLogicParams_C* AnimLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoMove(int32 EntityId, class UBP_ABPLogicParams_C* AnimLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoMoveRoleNpc(int32 EntityId, class UBP_ABPLogicParams_C* AnimLogicParams, class UObject* __WorldContext);
	static void TurnOffAutomaticFlightMode(int32 EntityId, class UObject* __WorldContext);
	static void TurnOnAutomaticFlightMode(int32 EntityId, class UICM_AutomaticFlight_DataBase_C* DataAsset, class UObject* __WorldContext);
	static bool HasMoveInputOrTickIntervalAndModelBuffer(int32 EntityId, class UObject* __WorldContext);
	static bool SetActorLocationWithContext(int32 EntityId, const struct FVector& Location, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static void SetActorLocationAndRotationWithContext(int32 EntityId, const struct FVector& Location, const struct FRotator& Rotation, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static void AddActorWorldOffsetWithContext(int32 EntityId, const struct FVector& Offset, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static void AddActorWorldRotationWithContext(int32 EntityId, const struct FRotator& Rotation, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static void AddActorLocalRotationWithContext(int32 EntityId, const struct FRotator& Rotation, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static void AddActorLocalOffsetWithContext(int32 EntityId, const struct FVector& Offset, bool Sweep, const class FString& Context, class UObject* __WorldContext);
	static struct FVector GetSwimLocation(int32 EntityId, class UObject* __WorldContext);
	static struct FVector SimpleSwim(int32 EntityId, float DeltaSeconds, float DetectedHeight, const struct FVector& CurrentSpeed, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsMoveBlueprintFunctionLibrary_C">();
	}
	static class UTsMoveBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsMoveBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UTsMoveBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UTsMoveBlueprintFunctionLibrary_C");
static_assert(sizeof(UTsMoveBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UTsMoveBlueprintFunctionLibrary_C");

}

