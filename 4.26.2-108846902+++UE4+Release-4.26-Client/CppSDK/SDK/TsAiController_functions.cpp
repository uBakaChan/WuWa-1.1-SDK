#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAiController

#include "Basic.hpp"

#include "TsAiController_classes.hpp"
#include "TsAiController_parameters.hpp"


namespace SDK
{

// Function TsAiController.TsAiController_C.AicApplyBuffToTarget
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TargetId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   buffId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicApplyBuffToTarget(int32 TargetId, int64 buffId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicApplyBuffToTarget");

	Params::TsAiController_C_AicApplyBuffToTarget Parms{};

	Parms.TargetId = TargetId;
	Parms.buffId = buffId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ChangeDebugDraw
// (Native, Public, BlueprintCallable, BlueprintEvent)

void ATsAiController_C::ChangeDebugDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ChangeDebugDraw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.GetDebugStateMachine
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Output                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ATsAiController_C::GetDebugStateMachine(TArray<class FText>& Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetDebugStateMachine");

	Params::TsAiController_C_GetDebugStateMachine Parms{};

	Parms.Output = std::move(Output);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Output = std::move(Parms.Output);
}


// Function TsAiController.TsAiController_C.b∂:∂
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   States                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ATsAiController_C::_b_____(TArray<class FString>& States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "b∂:∂");

	Params::TsAiController_C__b_____ Parms{};

	Parms.States = std::move(States);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	States = std::move(Parms.States);
}


// Function TsAiController.TsAiController_C.¿Â∂:∂
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>                   States                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::_______(TArray<class FString>& States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "¿Â∂:∂");

	Params::TsAiController_C________ Parms{};

	Parms.States = std::move(States);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	States = std::move(Parms.States);

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.∂bˆ
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterState                         OldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterState                         NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsAutonomousProxy                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATsAiController_C::___b_(ECharacterState OldState, ECharacterState NewState, bool Param_IsAutonomousProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "∂bˆ");

	Params::TsAiController_C____b_ Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;
	Parms.Param_IsAutonomousProxy = Param_IsAutonomousProxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.∑÷ß6Cˆ
// (Native, Public, BlueprintCallable, BlueprintEvent)

void ATsAiController_C::___6C_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "∑÷ß6Cˆ");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.˚®;ß
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::____()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "˚®;ß");

	Params::TsAiController_C_____ Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.;ë;ß
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::_____0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", ";ë;ß");

	Params::TsAiController_C_____ Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.StartCooldownTimer
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::StartCooldownTimer(int32 Id, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "StartCooldownTimer");

	Params::TsAiController_C_StartCooldownTimer Parms{};

	Parms.Id = Id;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.InitCooldownEvent
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKuroBooleanEventBinder*          EventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::InitCooldownEvent(int32 Id, class UKuroBooleanEventBinder* EventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "InitCooldownEvent");

	Params::TsAiController_C_InitCooldownEvent Parms{};

	Parms.Id = Id;
	Parms.EventBinder = EventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetCoolDown
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Cd                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::SetCoolDown(int32 Id, float Cd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetCoolDown");

	Params::TsAiController_C_SetCoolDown Parms{};

	Parms.Id = Id;
	Parms.Cd = Cd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.GetCoolDownRemainTime
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ATsAiController_C::GetCoolDownRemainTime(int32 Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetCoolDownRemainTime");

	Params::TsAiController_C_GetCoolDownRemainTime Parms{};

	Parms.Id = Id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.GetCoolDownDone
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::GetCoolDownDone(int32 Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetCoolDownDone");

	Params::TsAiController_C_GetCoolDownDone Parms{};

	Parms.Id = Id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.SetAiAlertConfig
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ConfigId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::SetAiAlertConfig(const class FString& ConfigId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiAlertConfig");

	Params::TsAiController_C_SetAiAlertConfig Parms{};

	Parms.ConfigId = std::move(ConfigId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddAlertEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroBooleanEventBinder*          EventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddAlertEventBinder(class UKuroBooleanEventBinder* EventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddAlertEventBinder");

	Params::TsAiController_C_AddAlertEventBinder Parms{};

	Parms.EventBinder = EventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetAiHateConfig
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ConfigId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::SetAiHateConfig(const class FString& ConfigId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiHateConfig");

	Params::TsAiController_C_SetAiHateConfig Parms{};

	Parms.ConfigId = std::move(ConfigId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddSceneItemDestroyEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKuroActorEventBinder*            EventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddSceneItemDestroyEventBinder(float Distance, class UKuroActorEventBinder* EventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddSceneItemDestroyEventBinder");

	Params::TsAiController_C_AddSceneItemDestroyEventBinder Parms{};

	Parms.Distance = Distance;
	Parms.EventBinder = EventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetPerceptionEventState
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IncludeFriend                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
// bool                                    IncludeEnemy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
// bool                                    IncludeNeutral                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::SetPerceptionEventState(bool IncludeFriend, bool IncludeEnemy, bool IncludeNeutral)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetPerceptionEventState");

	Params::TsAiController_C_SetPerceptionEventState Parms{};

	Parms.IncludeFriend = IncludeFriend;
	Parms.IncludeEnemy = IncludeEnemy;
	Parms.IncludeNeutral = IncludeNeutral;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddHateOutRangeEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroPerceptionEventBinder*       Handler                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddHateOutRangeEventBinder(class UKuroPerceptionEventBinder* Handler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddHateOutRangeEventBinder");

	Params::TsAiController_C_AddHateOutRangeEventBinder Parms{};

	Parms.Handler = Handler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddPerceptionEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroPerceptionEventBinder*       Handler                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddPerceptionEventBinder(class UKuroPerceptionEventBinder* Handler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddPerceptionEventBinder");

	Params::TsAiController_C_AddPerceptionEventBinder Parms{};

	Parms.Handler = Handler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddHateEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroPerceptionEventBinder*       Handler1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddHateEventBinder(class UKuroPerceptionEventBinder* Handler1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddHateEventBinder");

	Params::TsAiController_C_AddHateEventBinder Parms{};

	Parms.Handler1 = Handler1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.EnableAiSenseByType
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::EnableAiSenseByType(int32 Type, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "EnableAiSenseByType");

	Params::TsAiController_C_EnableAiSenseByType Parms{};

	Parms.Type = Type;
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddOrRemoveAiSense
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AiSenseId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::AddOrRemoveAiSense(int32 AiSenseId, bool Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddOrRemoveAiSense");

	Params::TsAiController_C_AddOrRemoveAiSense Parms{};

	Parms.AiSenseId = AiSenseId;
	Parms.Add = Add;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetAiSenseEnable
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::SetAiSenseEnable(int32 Param_Index, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiSenseEnable");

	Params::TsAiController_C_SetAiSenseEnable Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.LogReport
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LogId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::LogReport(int32 LogId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "LogReport");

	Params::TsAiController_C_LogReport Parms{};

	Parms.LogId = LogId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetAiEnable
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ATsAiController_C::SetAiEnable(bool Enable, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiEnable");

	Params::TsAiController_C_SetAiEnable Parms{};

	Parms.Enable = Enable;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicRemoveTag
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicRemoveTag(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicRemoveTag");

	Params::TsAiController_C_AicRemoveTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicAddTag
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicAddTag(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicAddTag");

	Params::TsAiController_C_AicAddTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicRemoveBuff
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   buffId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicRemoveBuff(int64 buffId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicRemoveBuff");

	Params::TsAiController_C_AicRemoveBuff Parms{};

	Parms.buffId = buffId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicApplyBuff
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   buffId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicApplyBuff(int64 buffId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicApplyBuff");

	Params::TsAiController_C_AicApplyBuff Parms{};

	Parms.buffId = buffId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.TestChangeAi
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ATsAiController_C::TestChangeAi(const class FString& Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "TestChangeAi");

	Params::TsAiController_C_TestChangeAi Parms{};

	Parms.Id = std::move(Id);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddBattleWanderEndTime
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AddTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AddBattleWanderEndTime(float AddTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddBattleWanderEndTime");

	Params::TsAiController_C_AddBattleWanderEndTime Parms{};

	Parms.AddTime = AddTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetBattleWanderIndex
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::SetBattleWanderIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetBattleWanderIndex");

	Params::TsAiController_C_SetBattleWanderIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ClearHatred
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::ClearHatred(int32 EntityId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ClearHatred");

	Params::TsAiController_C_ClearHatred Parms{};

	Parms.EntityId = EntityId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ChangeHatred
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   Abs                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::ChangeHatred(int32 EntityId, float Rate, float Abs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ChangeHatred");

	Params::TsAiController_C_ChangeHatred Parms{};

	Parms.EntityId = EntityId;
	Parms.Rate = Rate;
	Parms.Abs = Abs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.GetDebugText
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ATsAiController_C::GetDebugText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetDebugText");

	Params::TsAiController_C_GetDebugText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.OnStart
// (Native, Public, BlueprintCallable, BlueprintEvent)

void ATsAiController_C::OnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "OnStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddComplicatedEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSAiConditions                   Conditions                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UKuroBooleanEventBinder*          EventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddComplicatedEventBinder(const struct FSAiConditions& Conditions, class UKuroBooleanEventBinder* EventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddComplicatedEventBinder");

	Params::TsAiController_C_AddComplicatedEventBinder Parms{};

	Parms.Conditions = std::move(Conditions);
	Parms.EventBinder = EventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetBattleWanderTime
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::SetBattleWanderTime(float Min, float Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetBattleWanderTime");

	Params::TsAiController_C_SetBattleWanderTime Parms{};

	Parms.Min = Min;
	Parms.Max = Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddSkillCd
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillInfoId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CdAdd                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AddSkillCd(int32 SkillInfoId, float CdAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddSkillCd");

	Params::TsAiController_C_AddSkillCd Parms{};

	Parms.SkillInfoId = SkillInfoId;
	Parms.CdAdd = CdAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ActivateSkillGroup
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillGroupIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATsAiController_C::ActivateSkillGroup(int32 SkillGroupIndex, bool Activate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ActivateSkillGroup");

	Params::TsAiController_C_ActivateSkillGroup Parms{};

	Parms.SkillGroupIndex = SkillGroupIndex;
	Parms.Activate = Activate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ReceiveDestroyed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ATsAiController_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ExecuteUbergraph_TsAiController
// (Final, Native, UbergraphFunction, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::ExecuteUbergraph_TsAiController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ExecuteUbergraph_TsAiController");

	Params::TsAiController_C_ExecuteUbergraph_TsAiController Parms{};

	Parms.EntryPoint = EntryPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

