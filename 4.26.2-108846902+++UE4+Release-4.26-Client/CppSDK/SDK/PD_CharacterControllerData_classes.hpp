#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PD_CharacterControllerData

#include "Basic.hpp"

#include "SMaterialControllerLoopTime_structs.hpp"
#include "ECharacterControllerType_structs.hpp"
#include "ECharacterMeshPart_structs.hpp"
#include "ECharacterControllerUVSwitch_structs.hpp"
#include "ECharacterBodySpecifiedType_structs.hpp"
#include "ECharacterSlotSpecifiedType_structs.hpp"
#include "ECharacterControllerApplyType_structs.hpp"
#include "ECharacterControllerChannelSwitch_structs.hpp"
#include "SMaterialControllerFloatGroup_structs.hpp"
#include "SMaterialControllerColorGroup_structs.hpp"
#include "SMaterialControllerFloatParameter_structs.hpp"
#include "SMaterialControllerColorParameter_structs.hpp"
#include "SMaterialControllerTextureParameter_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PD_CharacterControllerData.PD_CharacterControllerData_C
// 0x4A38 (0x4A70 - 0x0038)
class UPD_CharacterControllerData_C final : public UPrimaryDataAsset
{
public:
	ECharacterControllerType                      DataType;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterBodySpecifiedType                   SpecifiedBodyType;                                 // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECharacterMeshPart>                    SpecifiedParts;                                    // 0x0040(0x0010)(Edit, BlueprintVisible)
	ECharacterSlotSpecifiedType                   SpecifiedSlotType;                                 // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterControllerApplyType                 MaterialModifyType;                                // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReplaceMaterial;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRim;                                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseOutline;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseDissolve;                                       // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerLoopTime           LoopTime;                                          // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RimRevertProperty;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RimUseTex;                                         // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterControllerChannelSwitch             RimChannel;                                        // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerFloatGroup         RimRange;                                          // 0x0078(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerColorGroup         RimColor;                                          // 0x0228(0x0660)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          OutlineRevertProperty;                             // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutlineUseTex;                                     // 0x0889(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88A[0x6];                                      // 0x088A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerFloatGroup         OutlineWidth;                                      // 0x0890(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerColorGroup         OutlineColor;                                      // 0x0A40(0x0660)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          DissolveRevertProperty;                            // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterControllerChannelSwitch             DissolveChannel;                                   // 0x10A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A2[0x6];                                     // 0x10A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerFloatGroup         DissolveProgress;                                  // 0x10A8(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerColorGroup         DissolveColor;                                     // 0x1258(0x0660)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerFloatGroup         DissolveColorIntensity;                            // 0x18B8(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          UseTextureSample;                                  // 0x1A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TextureSampleRevertProperty;                       // 0x1A69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseAlphaToMask;                                    // 0x1A6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A6B[0x5];                                     // 0x1A6B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MaskTexture;                                       // 0x1A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSMaterialControllerFloatGroup         Rotation;                                          // 0x1A78(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	ECharacterControllerUVSwitch                  UVSelection;                                       // 0x1C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C29[0x7];                                     // 0x1C29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerColorGroup         TextureScaleAndOffset;                             // 0x1C30(0x0660)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerColorGroup         TextureSpeed;                                      // 0x2290(0x0660)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerColorGroup         TextureColorTint;                                  // 0x28F0(0x0660)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerFloatGroup         OutlineIntensity;                                  // 0x2F50(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          UseOuterOutlineEffect;                             // 0x3100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MobileUseDifferentMaterial;                        // 0x3101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3102[0x6];                                     // 0x3102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReplaceMaterialMobile;                             // 0x3108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RevertMaterial;                                    // 0x3110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseParameterModify;                                // 0x3111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3112[0x6];                                     // 0x3112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMaterialControllerFloatParameter> FloatParameters;                                   // 0x3118(0x0010)(Edit, BlueprintVisible)
	bool                                          UseColor;                                          // 0x3128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ColorRevertProperty;                               // 0x3129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BaseUseTex;                                        // 0x312A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_312B[0x5];                                     // 0x312B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerColorGroup         BaseColor;                                         // 0x3130(0x0660)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerFloatGroup         BaseColorIntensity;                                // 0x3790(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          EmissionUseTex;                                    // 0x3940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3941[0x7];                                     // 0x3941(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerColorGroup         EmissionColor;                                     // 0x3948(0x0660)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSMaterialControllerFloatGroup         EmissionIntensity;                                 // 0x3FA8(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FSMaterialControllerColorParameter> ColorParameters;                                   // 0x4158(0x0010)(Edit, BlueprintVisible)
	bool                                          UseCustomMaterialEffect;                           // 0x4168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CustomRevertProperty;                              // 0x4169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_416A[0x6];                                     // 0x416A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMaterialControllerFloatParameter> CustomFloatParameters;                             // 0x4170(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSMaterialControllerColorParameter> CustomColorParameters;                             // 0x4180(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<struct FSMaterialControllerTextureParameter> CustomTextureParameters;                           // 0x4190(0x0010)(Edit, BlueprintVisible)
	bool                                          UseMotionOffset;                                   // 0x41A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MotionOffsetRevertProperty;                        // 0x41A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A2[0x2];                                     // 0x41A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotionOffsetLength;                                // 0x41A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MotionAffectVertexRange;                           // 0x41A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AC[0x4];                                     // 0x41AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         WeaponCases;                                       // 0x41B0(0x0010)(Edit, BlueprintVisible)
	bool                                          IgnoreTimeDilation;                                // 0x41C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HiddenAfterEffect;                                 // 0x41C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C2[0x6];                                     // 0x41C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerFloatGroup         DissolveSmooth;                                    // 0x41C8(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMaterialControllerFloatGroup         MotionNoiseSpeed;                                  // 0x4378(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          UseDitherEffect;                                   // 0x4528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DitherRevertProperty;                              // 0x4529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_452A[0x6];                                     // 0x452A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerFloatGroup         DitherValue;                                       // 0x4530(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FString>                         OtherCases;                                        // 0x46E0(0x0010)(Edit, BlueprintVisible)
	class UKuroCharacterMaterialControllerCache*  CacheObject;                                       // 0x46F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsInitCacheObject;                                 // 0x46F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          CleanOriginEffect;                                 // 0x46F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46FA[0x6];                                     // 0x46FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMaterialControllerFloatGroup         RimIntensity;                                      // 0x4700(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FString>                         CustomPartNames;                                   // 0x48B0(0x0010)(Edit, BlueprintVisible)
	struct FSMaterialControllerFloatGroup         TextureMaskRange;                                  // 0x48C0(0x01B0)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void InitCache();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PD_CharacterControllerData_C">();
	}
	static class UPD_CharacterControllerData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPD_CharacterControllerData_C>();
	}
};
static_assert(alignof(UPD_CharacterControllerData_C) == 0x000008, "Wrong alignment on UPD_CharacterControllerData_C");
static_assert(sizeof(UPD_CharacterControllerData_C) == 0x004A70, "Wrong size on UPD_CharacterControllerData_C");
static_assert(offsetof(UPD_CharacterControllerData_C, DataType) == 0x000038, "Member 'UPD_CharacterControllerData_C::DataType' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, SpecifiedBodyType) == 0x000039, "Member 'UPD_CharacterControllerData_C::SpecifiedBodyType' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, SpecifiedParts) == 0x000040, "Member 'UPD_CharacterControllerData_C::SpecifiedParts' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, SpecifiedSlotType) == 0x000050, "Member 'UPD_CharacterControllerData_C::SpecifiedSlotType' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, MaterialModifyType) == 0x000051, "Member 'UPD_CharacterControllerData_C::MaterialModifyType' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, ReplaceMaterial) == 0x000058, "Member 'UPD_CharacterControllerData_C::ReplaceMaterial' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseRim) == 0x000060, "Member 'UPD_CharacterControllerData_C::UseRim' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseOutline) == 0x000061, "Member 'UPD_CharacterControllerData_C::UseOutline' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseDissolve) == 0x000062, "Member 'UPD_CharacterControllerData_C::UseDissolve' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, LoopTime) == 0x000064, "Member 'UPD_CharacterControllerData_C::LoopTime' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, RimRevertProperty) == 0x000070, "Member 'UPD_CharacterControllerData_C::RimRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, RimUseTex) == 0x000071, "Member 'UPD_CharacterControllerData_C::RimUseTex' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, RimChannel) == 0x000072, "Member 'UPD_CharacterControllerData_C::RimChannel' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, RimRange) == 0x000078, "Member 'UPD_CharacterControllerData_C::RimRange' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, RimColor) == 0x000228, "Member 'UPD_CharacterControllerData_C::RimColor' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, OutlineRevertProperty) == 0x000888, "Member 'UPD_CharacterControllerData_C::OutlineRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, OutlineUseTex) == 0x000889, "Member 'UPD_CharacterControllerData_C::OutlineUseTex' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, OutlineWidth) == 0x000890, "Member 'UPD_CharacterControllerData_C::OutlineWidth' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, OutlineColor) == 0x000A40, "Member 'UPD_CharacterControllerData_C::OutlineColor' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DissolveRevertProperty) == 0x0010A0, "Member 'UPD_CharacterControllerData_C::DissolveRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DissolveChannel) == 0x0010A1, "Member 'UPD_CharacterControllerData_C::DissolveChannel' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DissolveProgress) == 0x0010A8, "Member 'UPD_CharacterControllerData_C::DissolveProgress' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DissolveColor) == 0x001258, "Member 'UPD_CharacterControllerData_C::DissolveColor' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DissolveColorIntensity) == 0x0018B8, "Member 'UPD_CharacterControllerData_C::DissolveColorIntensity' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseTextureSample) == 0x001A68, "Member 'UPD_CharacterControllerData_C::UseTextureSample' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, TextureSampleRevertProperty) == 0x001A69, "Member 'UPD_CharacterControllerData_C::TextureSampleRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseAlphaToMask) == 0x001A6A, "Member 'UPD_CharacterControllerData_C::UseAlphaToMask' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, MaskTexture) == 0x001A70, "Member 'UPD_CharacterControllerData_C::MaskTexture' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, Rotation) == 0x001A78, "Member 'UPD_CharacterControllerData_C::Rotation' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UVSelection) == 0x001C28, "Member 'UPD_CharacterControllerData_C::UVSelection' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, TextureScaleAndOffset) == 0x001C30, "Member 'UPD_CharacterControllerData_C::TextureScaleAndOffset' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, TextureSpeed) == 0x002290, "Member 'UPD_CharacterControllerData_C::TextureSpeed' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, TextureColorTint) == 0x0028F0, "Member 'UPD_CharacterControllerData_C::TextureColorTint' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, OutlineIntensity) == 0x002F50, "Member 'UPD_CharacterControllerData_C::OutlineIntensity' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseOuterOutlineEffect) == 0x003100, "Member 'UPD_CharacterControllerData_C::UseOuterOutlineEffect' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, MobileUseDifferentMaterial) == 0x003101, "Member 'UPD_CharacterControllerData_C::MobileUseDifferentMaterial' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, ReplaceMaterialMobile) == 0x003108, "Member 'UPD_CharacterControllerData_C::ReplaceMaterialMobile' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, RevertMaterial) == 0x003110, "Member 'UPD_CharacterControllerData_C::RevertMaterial' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseParameterModify) == 0x003111, "Member 'UPD_CharacterControllerData_C::UseParameterModify' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, FloatParameters) == 0x003118, "Member 'UPD_CharacterControllerData_C::FloatParameters' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseColor) == 0x003128, "Member 'UPD_CharacterControllerData_C::UseColor' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, ColorRevertProperty) == 0x003129, "Member 'UPD_CharacterControllerData_C::ColorRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, BaseUseTex) == 0x00312A, "Member 'UPD_CharacterControllerData_C::BaseUseTex' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, BaseColor) == 0x003130, "Member 'UPD_CharacterControllerData_C::BaseColor' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, BaseColorIntensity) == 0x003790, "Member 'UPD_CharacterControllerData_C::BaseColorIntensity' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, EmissionUseTex) == 0x003940, "Member 'UPD_CharacterControllerData_C::EmissionUseTex' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, EmissionColor) == 0x003948, "Member 'UPD_CharacterControllerData_C::EmissionColor' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, EmissionIntensity) == 0x003FA8, "Member 'UPD_CharacterControllerData_C::EmissionIntensity' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, ColorParameters) == 0x004158, "Member 'UPD_CharacterControllerData_C::ColorParameters' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseCustomMaterialEffect) == 0x004168, "Member 'UPD_CharacterControllerData_C::UseCustomMaterialEffect' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, CustomRevertProperty) == 0x004169, "Member 'UPD_CharacterControllerData_C::CustomRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, CustomFloatParameters) == 0x004170, "Member 'UPD_CharacterControllerData_C::CustomFloatParameters' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, CustomColorParameters) == 0x004180, "Member 'UPD_CharacterControllerData_C::CustomColorParameters' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, CustomTextureParameters) == 0x004190, "Member 'UPD_CharacterControllerData_C::CustomTextureParameters' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseMotionOffset) == 0x0041A0, "Member 'UPD_CharacterControllerData_C::UseMotionOffset' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, MotionOffsetRevertProperty) == 0x0041A1, "Member 'UPD_CharacterControllerData_C::MotionOffsetRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, MotionOffsetLength) == 0x0041A4, "Member 'UPD_CharacterControllerData_C::MotionOffsetLength' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, MotionAffectVertexRange) == 0x0041A8, "Member 'UPD_CharacterControllerData_C::MotionAffectVertexRange' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, WeaponCases) == 0x0041B0, "Member 'UPD_CharacterControllerData_C::WeaponCases' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, IgnoreTimeDilation) == 0x0041C0, "Member 'UPD_CharacterControllerData_C::IgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, HiddenAfterEffect) == 0x0041C1, "Member 'UPD_CharacterControllerData_C::HiddenAfterEffect' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DissolveSmooth) == 0x0041C8, "Member 'UPD_CharacterControllerData_C::DissolveSmooth' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, MotionNoiseSpeed) == 0x004378, "Member 'UPD_CharacterControllerData_C::MotionNoiseSpeed' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, UseDitherEffect) == 0x004528, "Member 'UPD_CharacterControllerData_C::UseDitherEffect' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DitherRevertProperty) == 0x004529, "Member 'UPD_CharacterControllerData_C::DitherRevertProperty' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, DitherValue) == 0x004530, "Member 'UPD_CharacterControllerData_C::DitherValue' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, OtherCases) == 0x0046E0, "Member 'UPD_CharacterControllerData_C::OtherCases' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, CacheObject) == 0x0046F0, "Member 'UPD_CharacterControllerData_C::CacheObject' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, IsInitCacheObject) == 0x0046F8, "Member 'UPD_CharacterControllerData_C::IsInitCacheObject' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, CleanOriginEffect) == 0x0046F9, "Member 'UPD_CharacterControllerData_C::CleanOriginEffect' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, RimIntensity) == 0x004700, "Member 'UPD_CharacterControllerData_C::RimIntensity' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, CustomPartNames) == 0x0048B0, "Member 'UPD_CharacterControllerData_C::CustomPartNames' has a wrong offset!");
static_assert(offsetof(UPD_CharacterControllerData_C, TextureMaskRange) == 0x0048C0, "Member 'UPD_CharacterControllerData_C::TextureMaskRange' has a wrong offset!");

}

