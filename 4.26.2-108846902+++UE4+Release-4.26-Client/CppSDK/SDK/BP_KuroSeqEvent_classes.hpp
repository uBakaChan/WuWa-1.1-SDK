#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroSeqEvent

#include "Basic.hpp"

#include "SSeqCharacterBlend_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroSeqEvent.BP_KuroSeqEvent_C
// 0x0088 (0x0330 - 0x02A8)
class ABP_KuroSeqEvent_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____0__Direction_D5AF32B047C17E633B8B4FBCA8F1E7AB; // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     __t_0;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveLocation;                                      // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Move;                                           // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Move_Rotation;                                     // 0x02D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRotate;                                          // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         BlendActorList;                                    // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FTransform>                     BlendTargetTransform;                              // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsBlending;                                       // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LerpAlpha;                                         // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSSeqCharacterBlend>            CharacterBlendGroup;                               // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_KuroSeqEvent(int32 EntryPoint);
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void __t_0__UpdateFunc();
	void __t_0__FinishedFunc();
	void Play_Subtitle(const struct FSSubtitleSettings& InSubtitle);
	void JumpToSequenceNode(class FName InSeqNodeID);
	void PauseSequence();
	void ResumeSequnece();
	void EnableUIInput();
	void JumpToSequenceNodeWithOption();
	void JumpToOtherSeqNetwrok(class FName InRowName, class UDataTable* InSeqNetworks);
	void Interaction(const struct FSSubtitleSettings& InSubtitleSettings);
	void GeneralEvent(class FName InEventID);
	void NPC_Rotate(float __);
	void PlayerUIMovie(class UFileMediaSource* MediaSource, bool IsMove, const struct FVector& Inlocation, bool IsTotate, const struct FRotator& InRotation);
	void MoveAfterMoviePlay();
	void DirectInteraction(class FName InteractionID);
	void SetCharacterBinding(const class FString& InTag);
	void BlendingCharacter(const struct FSSeqCharacterBlendGroup& InSettings);
	void BlendHelper();
	void Set_Motion_Blur(bool _);
	void ChangeWeather(int32 __Id, bool __, float ____);
	void ChangeTimeOfDay(bool __, int32 ___0, int32 ___1, int32 ___p, int32 ____, int32 _____0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroSeqEvent_C">();
	}
	static class ABP_KuroSeqEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KuroSeqEvent_C>();
	}
};
static_assert(alignof(ABP_KuroSeqEvent_C) == 0x000008, "Wrong alignment on ABP_KuroSeqEvent_C");
static_assert(sizeof(ABP_KuroSeqEvent_C) == 0x000330, "Wrong size on ABP_KuroSeqEvent_C");
static_assert(offsetof(ABP_KuroSeqEvent_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_KuroSeqEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_KuroSeqEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, ____0__Direction_D5AF32B047C17E633B8B4FBCA8F1E7AB) == 0x0002B8, "Member 'ABP_KuroSeqEvent_C::____0__Direction_D5AF32B047C17E633B8B4FBCA8F1E7AB' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, __t_0) == 0x0002C0, "Member 'ABP_KuroSeqEvent_C::__t_0' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, MoveLocation) == 0x0002C8, "Member 'ABP_KuroSeqEvent_C::MoveLocation' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, Is_Move) == 0x0002D4, "Member 'ABP_KuroSeqEvent_C::Is_Move' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, Move_Rotation) == 0x0002D8, "Member 'ABP_KuroSeqEvent_C::Move_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, IsRotate) == 0x0002E4, "Member 'ABP_KuroSeqEvent_C::IsRotate' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, BlendActorList) == 0x0002E8, "Member 'ABP_KuroSeqEvent_C::BlendActorList' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, BlendTargetTransform) == 0x0002F8, "Member 'ABP_KuroSeqEvent_C::BlendTargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, bIsBlending) == 0x000308, "Member 'ABP_KuroSeqEvent_C::bIsBlending' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, LerpAlpha) == 0x000310, "Member 'ABP_KuroSeqEvent_C::LerpAlpha' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, CharacterBlendGroup) == 0x000320, "Member 'ABP_KuroSeqEvent_C::CharacterBlendGroup' has a wrong offset!");

}

