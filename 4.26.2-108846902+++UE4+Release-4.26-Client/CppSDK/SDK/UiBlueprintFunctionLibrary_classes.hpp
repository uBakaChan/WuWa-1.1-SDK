#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UiBlueprintFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EWeaponViewName_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass UiBlueprintFunctionLibrary.UiBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UUiBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void TempModuleStart(class UObject* __WorldContext);
	static void AreaBeginOverlap(float AreaId, class UObject* __WorldContext);
	static void AreaEndOverlap(float AreaId, class UObject* __WorldContext);
	static TArray<class ATsBaseCharacter_C*> GetAllFormationRole(class UObject* __WorldContext);
	static void ChangeRole(bool bUseGoBattleSkill, int32 Position, class UObject* __WorldContext);
	static void InitializeOfflineFormationInstance(int32 AConfigId, int32 bConfigId, int32 CConfigId, class UObject* __WorldContext);
	static void OpenBattleView(class UObject* __WorldContext);
	static int32 GetCurrentRoleConfigId(class UObject* __WorldContext);
	static bool CheckGuideStatus(int32 GuideGroupId, int32 Status, const class FString& Operator, class UObject* __WorldContext);
	static bool CheckTeleport(int32 TeleportId, class UObject* __WorldContext);
	static void UnLockedTeleport(int32 TeleportId, class UObject* __WorldContext);
	static int32 GetItemCountByConfigId(int32 ItemConfigId, class UObject* __WorldContext);
	static void InitUiRoot(class UObject* __WorldContext);
	static int32 GetPlayerLevel(class UObject* __WorldContext);
	static int32 GetPlayerId(class UObject* __WorldContext);
	static class FString GetAccount(class UObject* __WorldContext);
	static void SetUiRootActive(bool Value, class UObject* __WorldContext);
	static void OpenShop(float ShopId, class UObject* __WorldContext);
	static void CloseShop(class UObject* __WorldContext);
	static void OpenDragonPoolView(int32 DragonPoolId, class UObject* __WorldContext);
	static void ConnectServer(const class FString& HttpResult, class UObject* __WorldContext);
	static void ApplyUiCameraAnimationSettings(const class FString& UniqueName, class UObject* __WorldContext);
	static void ResetUiCameraAnimationHandle(const class FString& UniqueName, class UObject* __WorldContext);
	static void ClearAllUiCameraAnimationHandles(class UObject* __WorldContext);
	static void PlayPlayUiCameraBlendAnimationFromCurrentHandle(const class FString& TargetAnimationHandleUniqueName, const class FString& AnimationBlendDataUniqueName, class UObject* __WorldContext);
	static void OpenUiScene(const class FString& UiScenePath, class UObject* __WorldContext);
	static void CloseUiScene(class UObject* __WorldContext);
	static void BeginScreenEffect(const class FString& EffectPath, float Priority, class UObject* __WorldContext);
	static void EndScreenEffect(const class FString& EffectPath, class UObject* __WorldContext);
	static float GetRoleMeshId(int32 RoleInfoId, class UObject* __WorldContext);
	static float GetRoleEntityId(int32 RoleInfoId, class UObject* __WorldContext);
	static TMap<int32, float> GetRoleBaseAttrList(int32 RoleInfoId, class UObject* __WorldContext);
	static TMap<int32, float> GetRoleAddAttrList(int32 RoleInfoId, class UObject* __WorldContext);
	static class FString GetRoleCameraConfig(int32 RoleInfoId, class UObject* __WorldContext);
	static float GetRoleProperty(int32 RoleInfoId, class UObject* __WorldContext);
	static TArray<int32> GetRoleDamageData(int32 DamageId, class UObject* __WorldContext);
	static void OpenGmView(class UObject* __WorldContext);
	static void OpenWorldMapView(class UObject* __WorldContext);
	static void BackLoginView(class UObject* __WorldContext);
	static void SetDamageViewVisible(bool bVisible, class UObject* __WorldContext);
	static void SetHeadStateVisible(bool bVisible, class UObject* __WorldContext);
	static void SetBossStateVisible(bool bVisible, class UObject* __WorldContext);
	static void TestSceneLogin(const class FString& LevelName, class UObject* __WorldContext);
	static bool TestSceneLoadNetMode(class UObject* __WorldContext);
	static void TestSceneSaveNetMode(bool Value, class UObject* __WorldContext);
	static class FString TestSceneLoadAccount(class UObject* __WorldContext);
	static void TestSceneSaveAccount(const class FString& Account, class UObject* __WorldContext);
	static void SetTempLocation(const struct FVector& CameraLocation, class UObject* __WorldContext);
	static void RefreshInputTag(class UObject* __WorldContext);
	static void TestSceneSaveBornMode1(bool Mode1, class UObject* __WorldContext);
	static bool TestSceneLoadGender(class UObject* __WorldContext);
	static void TestSceneSaveGender(bool IsMale, class UObject* __WorldContext);
	static void SetPartStateVisible(float EntityId, const class FString& boneName, bool bVisible, class UObject* __WorldContext);
	static class FString TestSceneLoadServerIp(class UObject* __WorldContext);
	static void TestSceneSaveServerIp(const class FString& ServerIp, class UObject* __WorldContext);
	static bool IsPlayerLookAtCameraInPhoto(class UObject* __WorldContext);
	static bool IsOpenPhotograph(class UObject* __WorldContext);
	static class FText GetTopViewName(class UObject* __WorldContext);
	static void SetUiStartSequenceFrame(float Frame, class UObject* __WorldContext);
	static void SetUiEndSequenceFrame(float Frame, class UObject* __WorldContext);
	static float GetUiWeaponBreachLevel(class UObject* __WorldContext);
	static EWeaponViewName GetWeaponViewName(class UObject* __WorldContext);
	static void EndGachaScene(class UObject* __WorldContext);
	static bool IsGamepadNow(class UObject* __WorldContext);
	static void GachaClick(bool IsPress, class UObject* __WorldContext);
	static void GachaInteractFinish(class UObject* __WorldContext);
	static void SetIsSilentLogin(bool Value, class UObject* __WorldContext);
	static void PlaySequenceEventByStringParam(const class FString& Param, class UObject* __WorldContext);
	static bool IsGameInited(class UObject* __WorldContext);
	static bool IsMobileNow(class UObject* __WorldContext);
	static bool IsLongPressExploreButton(class UObject* __WorldContext);
	static void PlayBattleCountdownTip(const class FString& TextKey, float Duration, float Countdown, class UObject* __WorldContext);
	static void PlayBattleNormalTip(const class FString& TextKey, float Duration, class UObject* __WorldContext);
	static void ShowGenericPrompt(const class FString& Id, class UObject* __WorldContext);
	static struct FVector TestSceneLoadBornLocation(class UObject* __WorldContext);
	static class FString GetLocalGameDataPath(class UObject* __WorldContext);
	static void ActivitySequenceEmitEvent(const class FString& Param, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UiBlueprintFunctionLibrary_C">();
	}
	static class UUiBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUiBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UUiBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UUiBlueprintFunctionLibrary_C");
static_assert(sizeof(UUiBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UUiBlueprintFunctionLibrary_C");

}

