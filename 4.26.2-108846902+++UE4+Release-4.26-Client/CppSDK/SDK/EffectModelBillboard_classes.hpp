#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EffectModelBillboard

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroGameplay_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass EffectModelBillboard.EffectModelBillboard_C
// 0x0018 (0x0070 - 0x0058)
class UEffectModelBillboard_C final : public UEffectModelBase
{
public:
	bool                                          IsUpdateEveryFrame;                                // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFixSize;                                         // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleSize;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBillboardMode                                OrientAxis;                                        // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSize;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EffectModelBillboard_C">();
	}
	static class UEffectModelBillboard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectModelBillboard_C>();
	}
};
static_assert(alignof(UEffectModelBillboard_C) == 0x000008, "Wrong alignment on UEffectModelBillboard_C");
static_assert(sizeof(UEffectModelBillboard_C) == 0x000070, "Wrong size on UEffectModelBillboard_C");
static_assert(offsetof(UEffectModelBillboard_C, IsUpdateEveryFrame) == 0x000058, "Member 'UEffectModelBillboard_C::IsUpdateEveryFrame' has a wrong offset!");
static_assert(offsetof(UEffectModelBillboard_C, IsFixSize) == 0x000059, "Member 'UEffectModelBillboard_C::IsFixSize' has a wrong offset!");
static_assert(offsetof(UEffectModelBillboard_C, ScaleSize) == 0x00005C, "Member 'UEffectModelBillboard_C::ScaleSize' has a wrong offset!");
static_assert(offsetof(UEffectModelBillboard_C, MaxDistance) == 0x000060, "Member 'UEffectModelBillboard_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(UEffectModelBillboard_C, OrientAxis) == 0x000064, "Member 'UEffectModelBillboard_C::OrientAxis' has a wrong offset!");
static_assert(offsetof(UEffectModelBillboard_C, MinSize) == 0x000068, "Member 'UEffectModelBillboard_C::MinSize' has a wrong offset!");

}

