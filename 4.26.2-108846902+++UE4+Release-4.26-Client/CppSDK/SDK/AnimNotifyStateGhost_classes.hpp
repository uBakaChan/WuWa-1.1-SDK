#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotifyStateGhost

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass AnimNotifyStateGhost.AnimNotifyStateGhost_C
// 0x0040 (0x0088 - 0x0048)
class UAnimNotifyStateGhost_C final : public UKuroAnimNotifyState
{
public:
	float                                         SpawnRate;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GhostLifeTime;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UEffectModelBase>        EffectDataAssetRef;                                // 0x0050(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	bool                                          UseSpawnRate;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnInterval;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool K2_ValidateAssets();

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotifyStateGhost_C">();
	}
	static class UAnimNotifyStateGhost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyStateGhost_C>();
	}
};
static_assert(alignof(UAnimNotifyStateGhost_C) == 0x000008, "Wrong alignment on UAnimNotifyStateGhost_C");
static_assert(sizeof(UAnimNotifyStateGhost_C) == 0x000088, "Wrong size on UAnimNotifyStateGhost_C");
static_assert(offsetof(UAnimNotifyStateGhost_C, SpawnRate) == 0x000048, "Member 'UAnimNotifyStateGhost_C::SpawnRate' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateGhost_C, GhostLifeTime) == 0x00004C, "Member 'UAnimNotifyStateGhost_C::GhostLifeTime' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateGhost_C, EffectDataAssetRef) == 0x000050, "Member 'UAnimNotifyStateGhost_C::EffectDataAssetRef' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateGhost_C, UseSpawnRate) == 0x000080, "Member 'UAnimNotifyStateGhost_C::UseSpawnRate' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateGhost_C, SpawnInterval) == 0x000084, "Member 'UAnimNotifyStateGhost_C::SpawnInterval' has a wrong offset!");

}

