#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsGameplayBlueprintFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EVisionType_structs.hpp"
#include "EAimViewState_structs.hpp"
#include "ECharViewDirectionState_structs.hpp"
#include "ECharParentMoveState_structs.hpp"
#include "ECharState_structs.hpp"
#include "EHitAnim_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsGameplayBlueprintFunctionLibrary.TsGameplayBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UTsGameplayBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static bool ContainsTag(int32 EntityId, const struct FGameplayTag& Tag, class UObject* __WorldContext);
	static void AddTag(int32 EntityId, const struct FGameplayTag& Tag, class UObject* __WorldContext);
	static void AddTagWithDuration(int32 EntityId, float Duration, const struct FGameplayTag& Tag, class UObject* __WorldContext);
	static void AddTagByName(int32 EntityId, const class FString& TagName, class UObject* __WorldContext);
	static void RemoveTag(int32 EntityId, const struct FGameplayTag& Tag, class UObject* __WorldContext);
	static void RemoveTagByName(int32 EntityId, const class FString& TagName, class UObject* __WorldContext);
	static bool IsLogicAutonomousProxy(int32 EntityId, class UObject* __WorldContext);
	static bool RemoveActiveGameplayEffect(int32 EntityId, const struct FActiveGameplayEffectHandle& Handle, float StacksToRemove, class UObject* __WorldContext);
	static void RemoveBuffByTag(int32 EntityId, const struct FGameplayTag& Tag, class UObject* __WorldContext);
	static void AddPassiveSkill(int32 EntityId, int64 PassiveSkillId, class UObject* __WorldContext);
	static void RemovePassiveSkill(int32 EntityId, int64 PassiveSkillId, class UObject* __WorldContext);
	static void AddBuffForDebug(int32 InstigatorEntityId, int32 TargetEntityId, int64 buffId, class UObject* __WorldContext);
	static void AddBuffFromGA(int32 EntityId, class ATsBaseCharacter_C* Target, int64 buffId, const class FString& SkillId, int32 AddCount, class UObject* __WorldContext);
	static void RemoveBuffById(int32 EntityId, int64 buffId, int32 StackCount, class UObject* __WorldContext);
	static int32 GetBuffCountById(int32 EntityId, int64 buffId, bool EnforceOnGoingCheck, class UObject* __WorldContext);
	static void AddGameplayCueLocal(int32 EntityId, float Duration, int64 CueId, class UObject* __WorldContext);
	static class FString GetGeDebugString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetTagDebugStrings(int32 EntityId, class UObject* __WorldContext);
	static class FString GetBuffDebugStrings(int32 EntityId, const class FString& buffStr, class UObject* __WorldContext);
	static class FString GetShieldDebugString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetPassiveSkillDebugString(int32 EntityId, class UObject* __WorldContext);
	static float GetShieldValue(int32 EntityId, int32 ShieldCid, class UObject* __WorldContext);
	static class FString GetAttributeDebugString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetAllAttributeDebugStrings(int32 EntityId, class UObject* __WorldContext);
	static class FString GetServerBuffString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetServerTagString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetServerAttributeString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetServerPartString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetServerHateString(int32 EntityId, class UObject* __WorldContext);
	static class FString GetServerShieldString(int32 EntityId, class UObject* __WorldContext);
	static void ServerDebugInfoRequest(int32 EntityId, class UObject* __WorldContext);
	static bool GetServerDebugInfoDirty(int32 EntityId, class UObject* __WorldContext);
	static void SetServerDebugInfoDirty(int32 EntityId, bool Val, class UObject* __WorldContext);
	static void DebugResetBaseVal(int32 EntityId, float Id, float Val, class UObject* __WorldContext);
	static void DebugResetFormationValue(int32 Id, float Val, class UObject* __WorldContext);
	static class FString Record(int32 EntityId, bool Param_Record, class UObject* __WorldContext);
	static void RefreshEntityListView(class UListView* ListView, class UObject* __WorldContext);
	static void RefreshEntityComboBox(class UComboBoxString* ComboBox, class UObject* __WorldContext);
	static void SetEntityComboBox(class UComboBoxString* ComboBox, int32 EntityId, class UObject* __WorldContext);
	static void SetDebugEntityId(int32 EntityId, class UObject* __WorldContext);
	static int32 GetDebugEntityId(class UObject* __WorldContext);
	static void RefreshBuffListView(int32 EntityId, class UListView* ListView, const class FString& FilterStr, class UObject* __WorldContext);
	static int64 GetBuffIdByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static int32 GetBuffServerIdByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffDescByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static bool GetBuffActivateByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffInstigatorStringByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffPeriodStringByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffDurationStringByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static float GetBuffDurationProgress(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffLivingStatusStringByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffLevelStringByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffStackStringByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static class FString GetBuffDebugStringByHandle(int32 EntityId, int32 Handle, class UObject* __WorldContext);
	static void SetDistance(int32 EntityId, float Max, class UObject* __WorldContext);
	static class FString GetAllMovementHistory(int32 EntityId, class UObject* __WorldContext);
	static float GetAttributeCurrentValue(int32 EntityId, int32 AttributeId, class UObject* __WorldContext);
	static float GetAttributeBaseValue(int32 EntityId, int32 AttributeId, class UObject* __WorldContext);
	static void SetRageModeId(int32 EntityId, int32 Id, class UObject* __WorldContext);
	static void SetHardnessModeId(int32 EntityId, int32 Id, class UObject* __WorldContext);
	static void OnHit(int32 EntityId, const struct FSHitInformation& HitData, class UObject* __WorldContext);
	static void SetBeHitIgnoreRotate(int32 EntityId, bool IgnoreRotate, class UObject* __WorldContext);
	static bool CheckHasPart(int32 EntityId, class UObject* __WorldContext);
	static float GetPartRemainedLife(int32 EntityId, const struct FGameplayTag& Tag, class UObject* __WorldContext);
	static void ResetPartLife(int32 EntityId, const struct FGameplayTag& Tag, class UObject* __WorldContext);
	static void ActiveStiff(int32 EntityId, class UObject* __WorldContext);
	static void DeActiveStiff(int32 EntityId, class UObject* __WorldContext);
	static bool GetAcceptedNewBeHitAndReset(int32 EntityId, class UObject* __WorldContext);
	static bool GetEnterFkAndReset(int32 EntityId, class UObject* __WorldContext);
	static bool IsStiff(int32 EntityId, class UObject* __WorldContext);
	static float GetRageModeId(int32 EntityId, class UObject* __WorldContext);
	static float GetHardnessModeId(int32 EntityId, class UObject* __WorldContext);
	static class FName GetBeHitBone(int32 EntityId, class UObject* __WorldContext);
	static float GetToughDecreaseValue(int32 EntityId, class UObject* __WorldContext);
	static struct FSCounterAttack GetCounterAttackInfoInternal(int32 EntityId, class UObject* __WorldContext);
	static float GetBeHitTime(int32 EntityId, class UObject* __WorldContext);
	static EHitAnim GetBeHitAnim(int32 EntityId, class UObject* __WorldContext);
	static bool GetEnterFk(int32 EntityId, class UObject* __WorldContext);
	static struct FVector GetBeHitDirect(int32 EntityId, class UObject* __WorldContext);
	static struct FVector GetBeHitLocation(int32 EntityId, class UObject* __WorldContext);
	static void AddCheckBuffList(int32 EntityId, const struct FSCounterAttackBuff& AddValue, class UObject* __WorldContext);
	static void ClearCheckBuffList(int32 EntityId, class UObject* __WorldContext);
	static void CounterAttackEnd(int32 EntityId, class UObject* __WorldContext);
	static void VisionCounterAttackEnd(int32 EntityId, class UObject* __WorldContext);
	static void SetCounterAttackEndTime(int32 EntityId, float baseTime, class UObject* __WorldContext);
	static bool IsTriggerCounterAttack(int32 EntityId, class UObject* __WorldContext);
	static void ResetTarget(int32 EntityId, class UObject* __WorldContext);
	static void SetShowTarget(int32 EntityId, class AActor* Actor, class UObject* __WorldContext);
	static void ExitLockDirection(int32 EntityId, class UObject* __WorldContext);
	static void EnterLockDirection(int32 EntityId, class UObject* __WorldContext);
	static class ATsBaseCharacter_C* GetCurrentTarget(int32 EntityId, class UObject* __WorldContext);
	static void SetLockOnDebugLine(int32 EntityId, bool IsShow, class UObject* __WorldContext);
	static bool ManipulateValid(int32 EntityId, class UObject* __WorldContext);
	static class AActor* ManipulateGetDrawTarget(int32 EntityId, class UObject* __WorldContext);
	static class AActor* ManipulateGetCastTarget(int32 EntityId, class UObject* __WorldContext);
	static float ManipulateGetDrawTargetChantTime(int32 EntityId, class UObject* __WorldContext);
	static bool ManipulateChant(int32 EntityId, class UKuroBooleanEventBinder* EventBinder, class UObject* __WorldContext);
	static bool ManipulateDraw(int32 EntityId, class UObject* __WorldContext);
	static bool ManipulateCast(int32 EntityId, float Direction, class UObject* __WorldContext);
	static void ManipulateReset(int32 EntityId, class UObject* __WorldContext);
	static bool ManipulateChangeToProjectileState(int32 EntityId, class UObject* __WorldContext);
	static bool ManipulateChangeToNormalState(int32 EntityId, class UObject* __WorldContext);
	static class AActor* GetHoldingActor(int32 EntityId, class UObject* __WorldContext);
	static void SetDebugDraw(int32 EntityId, bool IsActive, class UObject* __WorldContext);
	static void ExtraAction(int32 EntityId, class UObject* __WorldContext);
	static void SetQtePosition(int32 EntityId, float Rotate, float Length, float Height, bool ReferenceTarget, bool AdjustWithMonster, float AddHeight, int32 QteType, class UObject* __WorldContext);
	static class UDataTable* GetDtSkillInfo(int32 EntityId, class UObject* __WorldContext);
	static float GetLastActivateSkillTime(int32 EntityId, class UObject* __WorldContext);
	static void SetLastActivateSkillTime(int32 EntityId, float Time, class UObject* __WorldContext);
	static float GetSkillElevationAngle(int32 EntityId, class UObject* __WorldContext);
	static void SetSkillElevationAngle(int32 EntityId, float Angle, class UObject* __WorldContext);
	static class FString CurrentSkillId(int32 EntityId, class UObject* __WorldContext);
	static int32 CurrentPriority(int32 EntityId, class UObject* __WorldContext);
	static void SetCurrentPriority(int32 EntityId, int32 Priority, class UObject* __WorldContext);
	static bool HasAbility(int32 EntityId, const class FString& SkillId, class UObject* __WorldContext);
	static struct FSSkillInfo GetSkillInfo(int32 EntityId, const class FString& SkillId, class UObject* __WorldContext);
	static void SetSkillPriority(int32 EntityId, const class FString& SkillId, float Priority, class UObject* __WorldContext);
	static void EndSkill(int32 EntityId, const class FString& SkillId, bool IsSyn, bool IsNotEnd, class UObject* __WorldContext);
	static bool BeginSkill(int32 EntityId, class FName SkillId, bool IsSyn, class AActor* Target, class FName SocketName, class UObject* __WorldContext);
	static class AActor* GetSkillTarget(int32 EntityId, class UObject* __WorldContext);
	static void SetSkillTarget(int32 EntityId, class AActor* Target, class UObject* __WorldContext);
	static bool IsHasInputDir(int32 EntityId, class UObject* __WorldContext);
	static class FString GetSkillIdWithGroupId(int32 EntityId, int32 GroupId, class UObject* __WorldContext);
	static bool GetSkillAcceptInput(int32 EntityId, class UObject* __WorldContext);
	static void SetSkillAcceptInput(int32 EntityId, bool SkillAcceptInput, class UObject* __WorldContext);
	static void SetCommonSkillCanBeInterrupt(int32 EntityId, bool CanBeInterrupt, class UObject* __WorldContext);
	static bool GetCommonSkillCanBeInterrupt(int32 EntityId, class UObject* __WorldContext);
	static float OnActivateAbility(int32 EntityId, class UGameplayAbility* Ga, bool IsCommitSuccess, class UObject* __WorldContext);
	static void OnEndAbility(int32 EntityId, class UGameplayAbility* Ga, bool WasCancelled, class UObject* __WorldContext);
	static float GetPriority(int32 EntityId, const class FString& SkillId, class UObject* __WorldContext);
	static float GetActivePriority(int32 EntityId, const class FString& SkillId, class UObject* __WorldContext);
	static class UAnimMontage* GetSkillMontageInstance(int32 EntityId, const class FString& SkillId, int32 Param_Index, class UObject* __WorldContext);
	static void SetSkillRotateLocation(int32 EntityId, const struct FVector& Location, class UObject* __WorldContext);
	static void SetSkillRotateDirect(int32 EntityId, const struct FVector& Direct, class UObject* __WorldContext);
	static void CallAnimBreakPoint(int32 EntityId, class UObject* __WorldContext);
	static void RollingGround(int32 EntityId, class UObject* __WorldContext);
	static TArray<int32> GetVisionIdList(int32 EntityId, class UObject* __WorldContext);
	static void ExitMultiSkillStateOfMorphVision(int32 EntityId, class UObject* __WorldContext);
	static void SetKeepMultiSkillState(int32 EntityId, bool KeepOnMorphEnd, bool KeepOnGoDown, class UObject* __WorldContext);
	static TArray<int32> GetVisionLevelList(int32 EntityId, class UObject* __WorldContext);
	static int32 GetVisionSkillId(int32 EntityId, float VisionId, float Level, class UObject* __WorldContext);
	static void InterruptSkill(int32 EntityId, const class FString& SkillId, bool IsSyn, class UObject* __WorldContext);
	static void DeleteSkills(int32 EntityId, class UObject* __WorldContext);
	static class FString GetCurrentMontageCorrespondingSkillId(int32 EntityId, class UObject* __WorldContext);
	static void SetSocketName(int32 EntityId, const class FString& SocketName, class UObject* __WorldContext);
	static class FString GetSocketName(int32 EntityId, class UObject* __WorldContext);
	static struct FTransform GetPointTransform(int32 EntityId, const class FString& boneName, class UObject* __WorldContext);
	static void PlaySkillMontage2Server(int32 EntityId, const class FString& SkillId, float MontageIndex, float Rate, const class FString& StartSection, float StartTimeSeconds, class UObject* __WorldContext);
	static void EndSkillMontage(int32 EntityId, const class FString& SkillId, float MontageIndex, class UObject* __WorldContext);
	static bool CanActivateFixHook(int32 EntityId, class UObject* __WorldContext);
	static struct FVector FixHookTargetLocation(int32 EntityId, class UObject* __WorldContext);
	static struct FVector FixHookTargetForward(int32 EntityId, class UObject* __WorldContext);
	static struct FVector NextFixHookTargetLocation(int32 EntityId, class UObject* __WorldContext);
	static bool FixHookTargetInheritSpeed(int32 EntityId, class UObject* __WorldContext);
	static bool FixHookTargetIsClimb(int32 EntityId, class UObject* __WorldContext);
	static void SetIgnoreSocketName(int32 EntityId, const class FString& SocketName, class UObject* __WorldContext);
	static void DeleteIgnoreSocketName(int32 EntityId, const class FString& SocketName, class UObject* __WorldContext);
	static float GetToTargetSocketDistance(int32 EntityId, class UObject* __WorldContext);
	static void SetPredictProjectileInfo(int32 EntityId, bool ReturnValue, TArray<struct FVector>& OutPathPosition, const struct FVector& OutLastTraceDestination, const struct FHitResult& OutHit, class UObject* __WorldContext);
	static void SetVisible(int32 EntityId, bool IsShow, class UObject* __WorldContext);
	static ECharState GetCharUnifiedMoveState(int32 EntityId, class UObject* __WorldContext);
	static ECharParentMoveState GetCharUnifiedPositionState(int32 EntityId, class UObject* __WorldContext);
	static void ExitHitState(int32 EntityId, class UObject* __WorldContext);
	static void SetDirectionState(int32 EntityId, ECharViewDirectionState NewViewState, class UObject* __WorldContext);
	static ECharViewDirectionState GetDirectionState(int32 EntityId, class UObject* __WorldContext);
	static bool GetIsInGame(int32 EntityId, class UObject* __WorldContext);
	static void SprintPress(int32 EntityId, class UObject* __WorldContext);
	static void SprintRelease(int32 EntityId, class UObject* __WorldContext);
	static void StandPress(int32 EntityId, class UObject* __WorldContext);
	static void SwingPress(int32 EntityId, class UObject* __WorldContext);
	static void SwingRelease(int32 EntityId, class UObject* __WorldContext);
	static void CustomSetWalkOrRun(int32 EntityId, bool IsWalk, class UObject* __WorldContext);
	static void EnterAimStatus(int32 EntityId, EAimViewState AimViewState, class UObject* __WorldContext);
	static void ExitAimStatus(int32 EntityId, class UObject* __WorldContext);
	static void EnableEntity(int32 EntityId, bool IsEnable, class UObject* __WorldContext);
	static void UpdateAnimInfoHit(int32 EntityId, class UBP_ABPLogicParams_C* AnimLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoFk(int32 EntityId, class UBP_ABPLogicParams_C* AnimLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoUnifiedState(int32 EntityId, class UBP_ABPLogicParams_C* AnimLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoUnifiedStateRoleNpc(int32 EntityId, class UBP_ABPLogicParams_C* AnimLogicParams, class UObject* __WorldContext);
	static bool GetIsCharRotateWithCameraWhenManipulate(int32 EntityId, class UObject* __WorldContext);
	static bool GetIsUseCatapultUpAnim(int32 EntityId, class UObject* __WorldContext);
	static float GetNextMultiSkillId(int32 EntityId, int32 SkillId, class UObject* __WorldContext);
	static bool StartManipulateInteract(int32 EntityId, class UObject* __WorldContext);
	static void EndManipulateInteract(int32 EntityId, class UObject* __WorldContext);
	static struct FVector GetManipulateInteractLocation(int32 EntityId, class UObject* __WorldContext);
	static void EnvironmentInfoDetect(int32 EntityId, const struct FVector& Location, class UObject* __WorldContext);
	static void LockOnSpecifyTarget(int32 EntityId, int32 TargetEntityId, class UObject* __WorldContext);
	static bool IsSkillInCd(int32 EntityId, int32 SkillId, class UObject* __WorldContext);
	static void SendHookSkillUseLogData(int32 EntityId, bool HasTarget, class UObject* __WorldContext);
	static void SendManipulateSkillUseLogData(int32 EntityId, bool HasTarget, class UObject* __WorldContext);
	static void SendScanSkillUseLogData(int32 EntityId, bool HasTarget, class UObject* __WorldContext);
	static void DynamicAttachEntityToActor(int32 EntityId, int32 TargetEntityId, class FName SocketName, class UObject* __WorldContext);
	static struct FSVisionCounterAttack GetVisionCounterAttackInfoInternal(int32 EntityId, class UObject* __WorldContext);
	static bool ActivateAbilityVision(int32 EntityId, EVisionType VisionType, class UObject* __WorldContext);
	static bool EndAbilityVision(int32 EntityId, EVisionType VisionType, class UObject* __WorldContext);
	static void ResetBaseValueLocal(int32 EntityId, int32 Id, float Val, class UObject* __WorldContext);
	static void SetEntityEnable(int32 EntityId, bool Enable, class UObject* CallObject, const class FString& Reason, class UObject* __WorldContext);
	static void SetPassiveGaSkillId(int32 EntityId, class UObject* CallObject, class UObject* __WorldContext);
	static void SetEnableAttackInputActionOfMorphVision(int32 EntityId, bool bEnable, class UObject* __WorldContext);
	static void DynamicDetachEntityFromActor(int32 EntityId, class UObject* __WorldContext);
	static class FString GetSpecialBuffToSkillId(int64 buffId, const class FString& SkillId, class UObject* __WorldContext);
	static class AActor* FixHookTargetActor(int32 EntityId, class UObject* __WorldContext);
	static bool FixHookTargetIsSuiGuangType(int32 EntityId, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsGameplayBlueprintFunctionLibrary_C">();
	}
	static class UTsGameplayBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsGameplayBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UTsGameplayBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UTsGameplayBlueprintFunctionLibrary_C");
static_assert(sizeof(UTsGameplayBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UTsGameplayBlueprintFunctionLibrary_C");

}

