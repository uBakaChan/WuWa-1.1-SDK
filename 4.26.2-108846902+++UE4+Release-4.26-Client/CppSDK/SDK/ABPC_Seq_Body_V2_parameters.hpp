#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABPC_Seq_Body_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.SetAnimDataVectorByOwner
// 0x0140 (0x0140 - 0x0000)
struct ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner final
{
public:
	TMap<class FName, struct FVector>             VectorMap;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FName                                   ___name_Variable;                                  // 0x0050(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_1;                                // 0x005C(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value;                           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_1;                         // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_2;                                // 0x00A0(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_3;                                // 0x00AC(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_2;                         // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_3;                         // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_2;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_4;                                // 0x0108(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_4;                         // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_3;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner) == 0x000008, "Wrong alignment on ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner");
static_assert(sizeof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner) == 0x000140, "Wrong size on ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, VectorMap) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::VectorMap' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable) == 0x000050, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_1) == 0x00005C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value) == 0x000068, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue) == 0x000074, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_1) == 0x000078, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_1) == 0x000084, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X) == 0x000088, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y) == 0x00008C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z) == 0x000090, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue) == 0x000094, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_2) == 0x0000A0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_3) == 0x0000AC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_2) == 0x0000B8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_2) == 0x0000C4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_1) == 0x0000C8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_1) == 0x0000CC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_1) == 0x0000D0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_3) == 0x0000D4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_3) == 0x0000E0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_1) == 0x0000E4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_2) == 0x0000F0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_2) == 0x0000F4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_2) == 0x0000F8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_2) == 0x0000FC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_4) == 0x000108, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_4) == 0x000114, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_4) == 0x000120, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_3) == 0x000124, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_3) == 0x000128, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_3) == 0x00012C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_3) == 0x000130, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.SetAnimDataFloatByOwner
// 0x0010 (0x0010 - 0x0000)
struct ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner final
{
public:
	TArray<struct FNamedCurveValue>               InCurves;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner) == 0x000008, "Wrong alignment on ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner");
static_assert(sizeof(ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner) == 0x000010, "Wrong size on ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner, InCurves) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner::InCurves' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.ProcessEye
// 0x00DC (0x00DC - 0x0000)
struct ABPC_Seq_Body_V2_C_ProcessEye final
{
public:
	struct FVector                                EyeLookAt;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleScale;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue;                 // 0x001C(0x0010)(NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_1;               // 0x0040(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_2;               // 0x0058(0x0010)(NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_3;               // 0x006C(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_4;               // 0x0084(0x0010)(NoDestructor)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_5;               // 0x0094(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_6;               // 0x00B4(0x0010)(NoDestructor)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_7;               // 0x00C4(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_ProcessEye) == 0x000004, "Wrong alignment on ABPC_Seq_Body_V2_C_ProcessEye");
static_assert(sizeof(ABPC_Seq_Body_V2_C_ProcessEye) == 0x0000DC, "Wrong size on ABPC_Seq_Body_V2_C_ProcessEye");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, EyeLookAt) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::EyeLookAt' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, AngleScale) == 0x00000C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::AngleScale' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_BreakVector_X) == 0x000010, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_BreakVector_Y) == 0x000014, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue) == 0x00001C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Abs_ReturnValue) == 0x00002C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000030, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Abs_ReturnValue_1) == 0x000034, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000038, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_1) == 0x000040, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_1) == 0x000050, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000054, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_2) == 0x000058, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_3) == 0x00006C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_2) == 0x00007C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_3) == 0x000080, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_4) == 0x000084, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_5) == 0x000094, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_4) == 0x0000A4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_5) == 0x0000A8, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_FClamp_ReturnValue_1) == 0x0000B0, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_6) == 0x0000B4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_7) == 0x0000C4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_6) == 0x0000D4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_7) == 0x0000D8, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.GetCurveValue
// 0x0010 (0x0010 - 0x0000)
struct ABPC_Seq_Body_V2_C_GetCurveValue final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_GetCurveValue) == 0x000004, "Wrong alignment on ABPC_Seq_Body_V2_C_GetCurveValue");
static_assert(sizeof(ABPC_Seq_Body_V2_C_GetCurveValue) == 0x000010, "Wrong size on ABPC_Seq_Body_V2_C_GetCurveValue");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetCurveValue, CurveName) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_GetCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetCurveValue, ReturnValue) == 0x00000C, "Member 'ABPC_Seq_Body_V2_C_GetCurveValue::ReturnValue' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.GetCurves
// 0x0010 (0x0010 - 0x0000)
struct ABPC_Seq_Body_V2_C_GetCurves final
{
public:
	TArray<struct FNamedCurveValue>               OutValues;                                         // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_GetCurves) == 0x000008, "Wrong alignment on ABPC_Seq_Body_V2_C_GetCurves");
static_assert(sizeof(ABPC_Seq_Body_V2_C_GetCurves) == 0x000010, "Wrong size on ABPC_Seq_Body_V2_C_GetCurves");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetCurves, OutValues) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_GetCurves::OutValues' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.GetBindingName
// 0x000C (0x000C - 0x0000)
struct ABPC_Seq_Body_V2_C_GetBindingName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_GetBindingName) == 0x000004, "Wrong alignment on ABPC_Seq_Body_V2_C_GetBindingName");
static_assert(sizeof(ABPC_Seq_Body_V2_C_GetBindingName) == 0x00000C, "Wrong size on ABPC_Seq_Body_V2_C_GetBindingName");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetBindingName, ReturnValue) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_GetBindingName::ReturnValue' has a wrong offset!");

}

