#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAiController

#include "Basic.hpp"

#include "ECharacterState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SAiConditions_structs.hpp"


namespace SDK::Params
{

// Function TsAiController.TsAiController_C.AicApplyBuffToTarget
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C_AicApplyBuffToTarget final
{
public:
	int32                                         TargetId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         buffId;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AicApplyBuffToTarget) == 0x000008, "Wrong alignment on TsAiController_C_AicApplyBuffToTarget");
static_assert(sizeof(TsAiController_C_AicApplyBuffToTarget) == 0x000010, "Wrong size on TsAiController_C_AicApplyBuffToTarget");
static_assert(offsetof(TsAiController_C_AicApplyBuffToTarget, TargetId) == 0x000000, "Member 'TsAiController_C_AicApplyBuffToTarget::TargetId' has a wrong offset!");
static_assert(offsetof(TsAiController_C_AicApplyBuffToTarget, buffId) == 0x000008, "Member 'TsAiController_C_AicApplyBuffToTarget::buffId' has a wrong offset!");

// Function TsAiController.TsAiController_C.GetDebugStateMachine
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C_GetDebugStateMachine final
{
public:
	TArray<class FText>                           Output;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(TsAiController_C_GetDebugStateMachine) == 0x000008, "Wrong alignment on TsAiController_C_GetDebugStateMachine");
static_assert(sizeof(TsAiController_C_GetDebugStateMachine) == 0x000010, "Wrong size on TsAiController_C_GetDebugStateMachine");
static_assert(offsetof(TsAiController_C_GetDebugStateMachine, Output) == 0x000000, "Member 'TsAiController_C_GetDebugStateMachine::Output' has a wrong offset!");

// Function TsAiController.TsAiController_C.b¶:¶
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C__b_____ final
{
public:
	TArray<class FString>                         States;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(TsAiController_C__b_____) == 0x000008, "Wrong alignment on TsAiController_C__b_____");
static_assert(sizeof(TsAiController_C__b_____) == 0x000010, "Wrong size on TsAiController_C__b_____");
static_assert(offsetof(TsAiController_C__b_____, States) == 0x000000, "Member 'TsAiController_C__b_____::States' has a wrong offset!");

// Function TsAiController.TsAiController_C.Àå¶:¶
// 0x0018 (0x0018 - 0x0000)
struct TsAiController_C________ final
{
public:
	TArray<class FString>                         States;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsAiController_C________) == 0x000008, "Wrong alignment on TsAiController_C________");
static_assert(sizeof(TsAiController_C________) == 0x000018, "Wrong size on TsAiController_C________");
static_assert(offsetof(TsAiController_C________, States) == 0x000000, "Member 'TsAiController_C________::States' has a wrong offset!");
static_assert(offsetof(TsAiController_C________, ReturnValue) == 0x000010, "Member 'TsAiController_C________::ReturnValue' has a wrong offset!");

// Function TsAiController.TsAiController_C.¶bö
// 0x0003 (0x0003 - 0x0000)
struct TsAiController_C____b_ final
{
public:
	ECharacterState                               OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterState                               NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsAutonomousProxy;                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsAiController_C____b_) == 0x000001, "Wrong alignment on TsAiController_C____b_");
static_assert(sizeof(TsAiController_C____b_) == 0x000003, "Wrong size on TsAiController_C____b_");
static_assert(offsetof(TsAiController_C____b_, OldState) == 0x000000, "Member 'TsAiController_C____b_::OldState' has a wrong offset!");
static_assert(offsetof(TsAiController_C____b_, NewState) == 0x000001, "Member 'TsAiController_C____b_::NewState' has a wrong offset!");
static_assert(offsetof(TsAiController_C____b_, Param_IsAutonomousProxy) == 0x000002, "Member 'TsAiController_C____b_::Param_IsAutonomousProxy' has a wrong offset!");

// Function TsAiController.TsAiController_C.û¨;§
// 0x0001 (0x0001 - 0x0000)
struct TsAiController_C_____ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsAiController_C_____) == 0x000001, "Wrong alignment on TsAiController_C_____");
static_assert(sizeof(TsAiController_C_____) == 0x000001, "Wrong size on TsAiController_C_____");
static_assert(offsetof(TsAiController_C_____, ReturnValue) == 0x000000, "Member 'TsAiController_C_____::ReturnValue' has a wrong offset!");

// Function TsAiController.TsAiController_C.;‘;§
// 0x0001 (0x0001 - 0x0000)
struct TsAiController_C_____ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsAiController_C_____) == 0x000001, "Wrong alignment on TsAiController_C_____");
static_assert(sizeof(TsAiController_C_____) == 0x000001, "Wrong size on TsAiController_C_____");
static_assert(offsetof(TsAiController_C_____, ReturnValue) == 0x000000, "Member 'TsAiController_C_____::ReturnValue' has a wrong offset!");

// Function TsAiController.TsAiController_C.StartCooldownTimer
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_StartCooldownTimer final
{
public:
	int32                                         Id;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_StartCooldownTimer) == 0x000004, "Wrong alignment on TsAiController_C_StartCooldownTimer");
static_assert(sizeof(TsAiController_C_StartCooldownTimer) == 0x000008, "Wrong size on TsAiController_C_StartCooldownTimer");
static_assert(offsetof(TsAiController_C_StartCooldownTimer, Id) == 0x000000, "Member 'TsAiController_C_StartCooldownTimer::Id' has a wrong offset!");
static_assert(offsetof(TsAiController_C_StartCooldownTimer, Duration) == 0x000004, "Member 'TsAiController_C_StartCooldownTimer::Duration' has a wrong offset!");

// Function TsAiController.TsAiController_C.InitCooldownEvent
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C_InitCooldownEvent final
{
public:
	int32                                         Id;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroBooleanEventBinder*                EventBinder;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_InitCooldownEvent) == 0x000008, "Wrong alignment on TsAiController_C_InitCooldownEvent");
static_assert(sizeof(TsAiController_C_InitCooldownEvent) == 0x000010, "Wrong size on TsAiController_C_InitCooldownEvent");
static_assert(offsetof(TsAiController_C_InitCooldownEvent, Id) == 0x000000, "Member 'TsAiController_C_InitCooldownEvent::Id' has a wrong offset!");
static_assert(offsetof(TsAiController_C_InitCooldownEvent, EventBinder) == 0x000008, "Member 'TsAiController_C_InitCooldownEvent::EventBinder' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetCoolDown
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_SetCoolDown final
{
public:
	int32                                         Id;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cd;                                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_SetCoolDown) == 0x000004, "Wrong alignment on TsAiController_C_SetCoolDown");
static_assert(sizeof(TsAiController_C_SetCoolDown) == 0x000008, "Wrong size on TsAiController_C_SetCoolDown");
static_assert(offsetof(TsAiController_C_SetCoolDown, Id) == 0x000000, "Member 'TsAiController_C_SetCoolDown::Id' has a wrong offset!");
static_assert(offsetof(TsAiController_C_SetCoolDown, Cd) == 0x000004, "Member 'TsAiController_C_SetCoolDown::Cd' has a wrong offset!");

// Function TsAiController.TsAiController_C.GetCoolDownRemainTime
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_GetCoolDownRemainTime final
{
public:
	int32                                         Id;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_GetCoolDownRemainTime) == 0x000004, "Wrong alignment on TsAiController_C_GetCoolDownRemainTime");
static_assert(sizeof(TsAiController_C_GetCoolDownRemainTime) == 0x000008, "Wrong size on TsAiController_C_GetCoolDownRemainTime");
static_assert(offsetof(TsAiController_C_GetCoolDownRemainTime, Id) == 0x000000, "Member 'TsAiController_C_GetCoolDownRemainTime::Id' has a wrong offset!");
static_assert(offsetof(TsAiController_C_GetCoolDownRemainTime, ReturnValue) == 0x000004, "Member 'TsAiController_C_GetCoolDownRemainTime::ReturnValue' has a wrong offset!");

// Function TsAiController.TsAiController_C.GetCoolDownDone
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_GetCoolDownDone final
{
public:
	int32                                         Id;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsAiController_C_GetCoolDownDone) == 0x000004, "Wrong alignment on TsAiController_C_GetCoolDownDone");
static_assert(sizeof(TsAiController_C_GetCoolDownDone) == 0x000008, "Wrong size on TsAiController_C_GetCoolDownDone");
static_assert(offsetof(TsAiController_C_GetCoolDownDone, Id) == 0x000000, "Member 'TsAiController_C_GetCoolDownDone::Id' has a wrong offset!");
static_assert(offsetof(TsAiController_C_GetCoolDownDone, ReturnValue) == 0x000004, "Member 'TsAiController_C_GetCoolDownDone::ReturnValue' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetAiAlertConfig
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C_SetAiAlertConfig final
{
public:
	class FString                                 ConfigId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_SetAiAlertConfig) == 0x000008, "Wrong alignment on TsAiController_C_SetAiAlertConfig");
static_assert(sizeof(TsAiController_C_SetAiAlertConfig) == 0x000010, "Wrong size on TsAiController_C_SetAiAlertConfig");
static_assert(offsetof(TsAiController_C_SetAiAlertConfig, ConfigId) == 0x000000, "Member 'TsAiController_C_SetAiAlertConfig::ConfigId' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddAlertEventBinder
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AddAlertEventBinder final
{
public:
	class UKuroBooleanEventBinder*                EventBinder;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddAlertEventBinder) == 0x000008, "Wrong alignment on TsAiController_C_AddAlertEventBinder");
static_assert(sizeof(TsAiController_C_AddAlertEventBinder) == 0x000008, "Wrong size on TsAiController_C_AddAlertEventBinder");
static_assert(offsetof(TsAiController_C_AddAlertEventBinder, EventBinder) == 0x000000, "Member 'TsAiController_C_AddAlertEventBinder::EventBinder' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetAiHateConfig
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C_SetAiHateConfig final
{
public:
	class FString                                 ConfigId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_SetAiHateConfig) == 0x000008, "Wrong alignment on TsAiController_C_SetAiHateConfig");
static_assert(sizeof(TsAiController_C_SetAiHateConfig) == 0x000010, "Wrong size on TsAiController_C_SetAiHateConfig");
static_assert(offsetof(TsAiController_C_SetAiHateConfig, ConfigId) == 0x000000, "Member 'TsAiController_C_SetAiHateConfig::ConfigId' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddSceneItemDestroyEventBinder
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C_AddSceneItemDestroyEventBinder final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroActorEventBinder*                  EventBinder;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddSceneItemDestroyEventBinder) == 0x000008, "Wrong alignment on TsAiController_C_AddSceneItemDestroyEventBinder");
static_assert(sizeof(TsAiController_C_AddSceneItemDestroyEventBinder) == 0x000010, "Wrong size on TsAiController_C_AddSceneItemDestroyEventBinder");
static_assert(offsetof(TsAiController_C_AddSceneItemDestroyEventBinder, Distance) == 0x000000, "Member 'TsAiController_C_AddSceneItemDestroyEventBinder::Distance' has a wrong offset!");
static_assert(offsetof(TsAiController_C_AddSceneItemDestroyEventBinder, EventBinder) == 0x000008, "Member 'TsAiController_C_AddSceneItemDestroyEventBinder::EventBinder' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetPerceptionEventState
// 0x0003 (0x0003 - 0x0000)
struct TsAiController_C_SetPerceptionEventState final
{
public:
	bool                                          IncludeFriend;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          IncludeEnemy;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          IncludeNeutral;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(TsAiController_C_SetPerceptionEventState) == 0x000001, "Wrong alignment on TsAiController_C_SetPerceptionEventState");
static_assert(sizeof(TsAiController_C_SetPerceptionEventState) == 0x000003, "Wrong size on TsAiController_C_SetPerceptionEventState");
static_assert(offsetof(TsAiController_C_SetPerceptionEventState, IncludeFriend) == 0x000000, "Member 'TsAiController_C_SetPerceptionEventState::IncludeFriend' has a wrong offset!");
static_assert(offsetof(TsAiController_C_SetPerceptionEventState, IncludeEnemy) == 0x000001, "Member 'TsAiController_C_SetPerceptionEventState::IncludeEnemy' has a wrong offset!");
static_assert(offsetof(TsAiController_C_SetPerceptionEventState, IncludeNeutral) == 0x000002, "Member 'TsAiController_C_SetPerceptionEventState::IncludeNeutral' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddHateOutRangeEventBinder
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AddHateOutRangeEventBinder final
{
public:
	class UKuroPerceptionEventBinder*             Handler;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddHateOutRangeEventBinder) == 0x000008, "Wrong alignment on TsAiController_C_AddHateOutRangeEventBinder");
static_assert(sizeof(TsAiController_C_AddHateOutRangeEventBinder) == 0x000008, "Wrong size on TsAiController_C_AddHateOutRangeEventBinder");
static_assert(offsetof(TsAiController_C_AddHateOutRangeEventBinder, Handler) == 0x000000, "Member 'TsAiController_C_AddHateOutRangeEventBinder::Handler' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddPerceptionEventBinder
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AddPerceptionEventBinder final
{
public:
	class UKuroPerceptionEventBinder*             Handler;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddPerceptionEventBinder) == 0x000008, "Wrong alignment on TsAiController_C_AddPerceptionEventBinder");
static_assert(sizeof(TsAiController_C_AddPerceptionEventBinder) == 0x000008, "Wrong size on TsAiController_C_AddPerceptionEventBinder");
static_assert(offsetof(TsAiController_C_AddPerceptionEventBinder, Handler) == 0x000000, "Member 'TsAiController_C_AddPerceptionEventBinder::Handler' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddHateEventBinder
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AddHateEventBinder final
{
public:
	class UKuroPerceptionEventBinder*             Handler1;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddHateEventBinder) == 0x000008, "Wrong alignment on TsAiController_C_AddHateEventBinder");
static_assert(sizeof(TsAiController_C_AddHateEventBinder) == 0x000008, "Wrong size on TsAiController_C_AddHateEventBinder");
static_assert(offsetof(TsAiController_C_AddHateEventBinder, Handler1) == 0x000000, "Member 'TsAiController_C_AddHateEventBinder::Handler1' has a wrong offset!");

// Function TsAiController.TsAiController_C.EnableAiSenseByType
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_EnableAiSenseByType final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(TsAiController_C_EnableAiSenseByType) == 0x000004, "Wrong alignment on TsAiController_C_EnableAiSenseByType");
static_assert(sizeof(TsAiController_C_EnableAiSenseByType) == 0x000008, "Wrong size on TsAiController_C_EnableAiSenseByType");
static_assert(offsetof(TsAiController_C_EnableAiSenseByType, Type) == 0x000000, "Member 'TsAiController_C_EnableAiSenseByType::Type' has a wrong offset!");
static_assert(offsetof(TsAiController_C_EnableAiSenseByType, Enable) == 0x000004, "Member 'TsAiController_C_EnableAiSenseByType::Enable' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddOrRemoveAiSense
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AddOrRemoveAiSense final
{
public:
	int32                                         AiSenseId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Add;                                               // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(TsAiController_C_AddOrRemoveAiSense) == 0x000004, "Wrong alignment on TsAiController_C_AddOrRemoveAiSense");
static_assert(sizeof(TsAiController_C_AddOrRemoveAiSense) == 0x000008, "Wrong size on TsAiController_C_AddOrRemoveAiSense");
static_assert(offsetof(TsAiController_C_AddOrRemoveAiSense, AiSenseId) == 0x000000, "Member 'TsAiController_C_AddOrRemoveAiSense::AiSenseId' has a wrong offset!");
static_assert(offsetof(TsAiController_C_AddOrRemoveAiSense, Add) == 0x000004, "Member 'TsAiController_C_AddOrRemoveAiSense::Add' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetAiSenseEnable
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_SetAiSenseEnable final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(TsAiController_C_SetAiSenseEnable) == 0x000004, "Wrong alignment on TsAiController_C_SetAiSenseEnable");
static_assert(sizeof(TsAiController_C_SetAiSenseEnable) == 0x000008, "Wrong size on TsAiController_C_SetAiSenseEnable");
static_assert(offsetof(TsAiController_C_SetAiSenseEnable, Param_Index) == 0x000000, "Member 'TsAiController_C_SetAiSenseEnable::Param_Index' has a wrong offset!");
static_assert(offsetof(TsAiController_C_SetAiSenseEnable, Enable) == 0x000004, "Member 'TsAiController_C_SetAiSenseEnable::Enable' has a wrong offset!");

// Function TsAiController.TsAiController_C.LogReport
// 0x0004 (0x0004 - 0x0000)
struct TsAiController_C_LogReport final
{
public:
	int32                                         LogId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_LogReport) == 0x000004, "Wrong alignment on TsAiController_C_LogReport");
static_assert(sizeof(TsAiController_C_LogReport) == 0x000004, "Wrong size on TsAiController_C_LogReport");
static_assert(offsetof(TsAiController_C_LogReport, LogId) == 0x000000, "Member 'TsAiController_C_LogReport::LogId' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetAiEnable
// 0x0018 (0x0018 - 0x0000)
struct TsAiController_C_SetAiEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_SetAiEnable) == 0x000008, "Wrong alignment on TsAiController_C_SetAiEnable");
static_assert(sizeof(TsAiController_C_SetAiEnable) == 0x000018, "Wrong size on TsAiController_C_SetAiEnable");
static_assert(offsetof(TsAiController_C_SetAiEnable, Enable) == 0x000000, "Member 'TsAiController_C_SetAiEnable::Enable' has a wrong offset!");
static_assert(offsetof(TsAiController_C_SetAiEnable, Key) == 0x000008, "Member 'TsAiController_C_SetAiEnable::Key' has a wrong offset!");

// Function TsAiController.TsAiController_C.AicRemoveTag
// 0x000C (0x000C - 0x0000)
struct TsAiController_C_AicRemoveTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AicRemoveTag) == 0x000004, "Wrong alignment on TsAiController_C_AicRemoveTag");
static_assert(sizeof(TsAiController_C_AicRemoveTag) == 0x00000C, "Wrong size on TsAiController_C_AicRemoveTag");
static_assert(offsetof(TsAiController_C_AicRemoveTag, Tag) == 0x000000, "Member 'TsAiController_C_AicRemoveTag::Tag' has a wrong offset!");

// Function TsAiController.TsAiController_C.AicAddTag
// 0x000C (0x000C - 0x0000)
struct TsAiController_C_AicAddTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AicAddTag) == 0x000004, "Wrong alignment on TsAiController_C_AicAddTag");
static_assert(sizeof(TsAiController_C_AicAddTag) == 0x00000C, "Wrong size on TsAiController_C_AicAddTag");
static_assert(offsetof(TsAiController_C_AicAddTag, Tag) == 0x000000, "Member 'TsAiController_C_AicAddTag::Tag' has a wrong offset!");

// Function TsAiController.TsAiController_C.AicRemoveBuff
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AicRemoveBuff final
{
public:
	int64                                         buffId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AicRemoveBuff) == 0x000008, "Wrong alignment on TsAiController_C_AicRemoveBuff");
static_assert(sizeof(TsAiController_C_AicRemoveBuff) == 0x000008, "Wrong size on TsAiController_C_AicRemoveBuff");
static_assert(offsetof(TsAiController_C_AicRemoveBuff, buffId) == 0x000000, "Member 'TsAiController_C_AicRemoveBuff::buffId' has a wrong offset!");

// Function TsAiController.TsAiController_C.AicApplyBuff
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AicApplyBuff final
{
public:
	int64                                         buffId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AicApplyBuff) == 0x000008, "Wrong alignment on TsAiController_C_AicApplyBuff");
static_assert(sizeof(TsAiController_C_AicApplyBuff) == 0x000008, "Wrong size on TsAiController_C_AicApplyBuff");
static_assert(offsetof(TsAiController_C_AicApplyBuff, buffId) == 0x000000, "Member 'TsAiController_C_AicApplyBuff::buffId' has a wrong offset!");

// Function TsAiController.TsAiController_C.TestChangeAi
// 0x0010 (0x0010 - 0x0000)
struct TsAiController_C_TestChangeAi final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_TestChangeAi) == 0x000008, "Wrong alignment on TsAiController_C_TestChangeAi");
static_assert(sizeof(TsAiController_C_TestChangeAi) == 0x000010, "Wrong size on TsAiController_C_TestChangeAi");
static_assert(offsetof(TsAiController_C_TestChangeAi, Id) == 0x000000, "Member 'TsAiController_C_TestChangeAi::Id' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddBattleWanderEndTime
// 0x0004 (0x0004 - 0x0000)
struct TsAiController_C_AddBattleWanderEndTime final
{
public:
	float                                         AddTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddBattleWanderEndTime) == 0x000004, "Wrong alignment on TsAiController_C_AddBattleWanderEndTime");
static_assert(sizeof(TsAiController_C_AddBattleWanderEndTime) == 0x000004, "Wrong size on TsAiController_C_AddBattleWanderEndTime");
static_assert(offsetof(TsAiController_C_AddBattleWanderEndTime, AddTime) == 0x000000, "Member 'TsAiController_C_AddBattleWanderEndTime::AddTime' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetBattleWanderIndex
// 0x0004 (0x0004 - 0x0000)
struct TsAiController_C_SetBattleWanderIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_SetBattleWanderIndex) == 0x000004, "Wrong alignment on TsAiController_C_SetBattleWanderIndex");
static_assert(sizeof(TsAiController_C_SetBattleWanderIndex) == 0x000004, "Wrong size on TsAiController_C_SetBattleWanderIndex");
static_assert(offsetof(TsAiController_C_SetBattleWanderIndex, Param_Index) == 0x000000, "Member 'TsAiController_C_SetBattleWanderIndex::Param_Index' has a wrong offset!");

// Function TsAiController.TsAiController_C.ClearHatred
// 0x0004 (0x0004 - 0x0000)
struct TsAiController_C_ClearHatred final
{
public:
	int32                                         EntityId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_ClearHatred) == 0x000004, "Wrong alignment on TsAiController_C_ClearHatred");
static_assert(sizeof(TsAiController_C_ClearHatred) == 0x000004, "Wrong size on TsAiController_C_ClearHatred");
static_assert(offsetof(TsAiController_C_ClearHatred, EntityId) == 0x000000, "Member 'TsAiController_C_ClearHatred::EntityId' has a wrong offset!");

// Function TsAiController.TsAiController_C.ChangeHatred
// 0x000C (0x000C - 0x0000)
struct TsAiController_C_ChangeHatred final
{
public:
	int32                                         EntityId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Abs;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_ChangeHatred) == 0x000004, "Wrong alignment on TsAiController_C_ChangeHatred");
static_assert(sizeof(TsAiController_C_ChangeHatred) == 0x00000C, "Wrong size on TsAiController_C_ChangeHatred");
static_assert(offsetof(TsAiController_C_ChangeHatred, EntityId) == 0x000000, "Member 'TsAiController_C_ChangeHatred::EntityId' has a wrong offset!");
static_assert(offsetof(TsAiController_C_ChangeHatred, Rate) == 0x000004, "Member 'TsAiController_C_ChangeHatred::Rate' has a wrong offset!");
static_assert(offsetof(TsAiController_C_ChangeHatred, Abs) == 0x000008, "Member 'TsAiController_C_ChangeHatred::Abs' has a wrong offset!");

// Function TsAiController.TsAiController_C.GetDebugText
// 0x0018 (0x0018 - 0x0000)
struct TsAiController_C_GetDebugText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(TsAiController_C_GetDebugText) == 0x000008, "Wrong alignment on TsAiController_C_GetDebugText");
static_assert(sizeof(TsAiController_C_GetDebugText) == 0x000018, "Wrong size on TsAiController_C_GetDebugText");
static_assert(offsetof(TsAiController_C_GetDebugText, ReturnValue) == 0x000000, "Member 'TsAiController_C_GetDebugText::ReturnValue' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddComplicatedEventBinder
// 0x00C0 (0x00C0 - 0x0000)
struct TsAiController_C_AddComplicatedEventBinder final
{
public:
	struct FSAiConditions                         Conditions;                                        // 0x0000(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UKuroBooleanEventBinder*                EventBinder;                                       // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddComplicatedEventBinder) == 0x000008, "Wrong alignment on TsAiController_C_AddComplicatedEventBinder");
static_assert(sizeof(TsAiController_C_AddComplicatedEventBinder) == 0x0000C0, "Wrong size on TsAiController_C_AddComplicatedEventBinder");
static_assert(offsetof(TsAiController_C_AddComplicatedEventBinder, Conditions) == 0x000000, "Member 'TsAiController_C_AddComplicatedEventBinder::Conditions' has a wrong offset!");
static_assert(offsetof(TsAiController_C_AddComplicatedEventBinder, EventBinder) == 0x0000B8, "Member 'TsAiController_C_AddComplicatedEventBinder::EventBinder' has a wrong offset!");

// Function TsAiController.TsAiController_C.SetBattleWanderTime
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_SetBattleWanderTime final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_SetBattleWanderTime) == 0x000004, "Wrong alignment on TsAiController_C_SetBattleWanderTime");
static_assert(sizeof(TsAiController_C_SetBattleWanderTime) == 0x000008, "Wrong size on TsAiController_C_SetBattleWanderTime");
static_assert(offsetof(TsAiController_C_SetBattleWanderTime, Min) == 0x000000, "Member 'TsAiController_C_SetBattleWanderTime::Min' has a wrong offset!");
static_assert(offsetof(TsAiController_C_SetBattleWanderTime, Max) == 0x000004, "Member 'TsAiController_C_SetBattleWanderTime::Max' has a wrong offset!");

// Function TsAiController.TsAiController_C.AddSkillCd
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_AddSkillCd final
{
public:
	int32                                         SkillInfoId;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CdAdd;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_AddSkillCd) == 0x000004, "Wrong alignment on TsAiController_C_AddSkillCd");
static_assert(sizeof(TsAiController_C_AddSkillCd) == 0x000008, "Wrong size on TsAiController_C_AddSkillCd");
static_assert(offsetof(TsAiController_C_AddSkillCd, SkillInfoId) == 0x000000, "Member 'TsAiController_C_AddSkillCd::SkillInfoId' has a wrong offset!");
static_assert(offsetof(TsAiController_C_AddSkillCd, CdAdd) == 0x000004, "Member 'TsAiController_C_AddSkillCd::CdAdd' has a wrong offset!");

// Function TsAiController.TsAiController_C.ActivateSkillGroup
// 0x0008 (0x0008 - 0x0000)
struct TsAiController_C_ActivateSkillGroup final
{
public:
	int32                                         SkillGroupIndex;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activate;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsAiController_C_ActivateSkillGroup) == 0x000004, "Wrong alignment on TsAiController_C_ActivateSkillGroup");
static_assert(sizeof(TsAiController_C_ActivateSkillGroup) == 0x000008, "Wrong size on TsAiController_C_ActivateSkillGroup");
static_assert(offsetof(TsAiController_C_ActivateSkillGroup, SkillGroupIndex) == 0x000000, "Member 'TsAiController_C_ActivateSkillGroup::SkillGroupIndex' has a wrong offset!");
static_assert(offsetof(TsAiController_C_ActivateSkillGroup, Activate) == 0x000004, "Member 'TsAiController_C_ActivateSkillGroup::Activate' has a wrong offset!");

// Function TsAiController.TsAiController_C.ExecuteUbergraph_TsAiController
// 0x0004 (0x0004 - 0x0000)
struct TsAiController_C_ExecuteUbergraph_TsAiController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsAiController_C_ExecuteUbergraph_TsAiController) == 0x000004, "Wrong alignment on TsAiController_C_ExecuteUbergraph_TsAiController");
static_assert(sizeof(TsAiController_C_ExecuteUbergraph_TsAiController) == 0x000004, "Wrong size on TsAiController_C_ExecuteUbergraph_TsAiController");
static_assert(offsetof(TsAiController_C_ExecuteUbergraph_TsAiController, EntryPoint) == 0x000000, "Member 'TsAiController_C_ExecuteUbergraph_TsAiController::EntryPoint' has a wrong offset!");

}

