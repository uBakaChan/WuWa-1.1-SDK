#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleHolographicComponent

#include "Basic.hpp"

#include "SimpleHolographicComponent_classes.hpp"
#include "SimpleHolographicComponent_parameters.hpp"


namespace SDK
{

// Function SimpleHolographicComponent.SimpleHolographicComponent_C.ExecuteUbergraph_SimpleHolographicComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleHolographicComponent_C::ExecuteUbergraph_SimpleHolographicComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "ExecuteUbergraph_SimpleHolographicComponent");

	Params::SimpleHolographicComponent_C_ExecuteUbergraph_SimpleHolographicComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleHolographicComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "ReceiveTick");

	Params::SimpleHolographicComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.CacheMaterialParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSMaterialControllerFloatParameter>Floats                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSMaterialControllerColorParameter>Colors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UMaterialInstanceDynamic*         Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReplaceMaterial                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSMaterialParamCache             Result                                                 (Parm, OutParm, HasGetValueTypeHash)

void USimpleHolographicComponent_C::CacheMaterialParameters(TArray<struct FSMaterialControllerFloatParameter>& Floats, TArray<struct FSMaterialControllerColorParameter>& Colors, class UMaterialInstanceDynamic* Material, bool bReplaceMaterial, int32 Param_Index, struct FSMaterialParamCache* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "CacheMaterialParameters");

	Params::SimpleHolographicComponent_C_CacheMaterialParameters Parms{};

	Parms.Floats = std::move(Floats);
	Parms.Colors = std::move(Colors);
	Parms.Material = Material;
	Parms.bReplaceMaterial = bReplaceMaterial;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	Floats = std::move(Parms.Floats);
	Colors = std::move(Parms.Colors);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.CacheAndReplace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSHolographicData                SHolographicData                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UPrimitiveComponent*              Self2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// int32                                   ElementIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSMaterialParamCache             CacheResult                                            (Parm, OutParm, HasGetValueTypeHash)

class UMaterialInstanceDynamic* USimpleHolographicComponent_C::CacheAndReplace(const struct FSHolographicData& SHolographicData, class UPrimitiveComponent* Self2, int32 ElementIndex, class UMaterialInstanceDynamic* Material, struct FSMaterialParamCache* CacheResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "CacheAndReplace");

	Params::SimpleHolographicComponent_C_CacheAndReplace Parms{};

	Parms.SHolographicData = std::move(SHolographicData);
	Parms.Self2 = Self2;
	Parms.ElementIndex = ElementIndex;
	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);

	if (CacheResult != nullptr)
		*CacheResult = std::move(Parms.CacheResult);

	return Parms.ReturnValue;
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.RevertMaterialParamters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSMaterialParamCache             MaterialCache                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleHolographicComponent_C::RevertMaterialParamters(const struct FSMaterialParamCache& MaterialCache, class UMaterialInstanceDynamic** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "RevertMaterialParamters");

	Params::SimpleHolographicComponent_C_RevertMaterialParamters Parms{};

	Parms.MaterialCache = std::move(MaterialCache);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.Clear
// (Public, BlueprintCallable, BlueprintEvent)

void USimpleHolographicComponent_C::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.RemoveNpcEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void USimpleHolographicComponent_C::RemoveNpcEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "RemoveNpcEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.UpdateMaterialsWithDa
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> Materials                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FSHolographicData                SHolographicData                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void USimpleHolographicComponent_C::UpdateMaterialsWithDa(TArray<class UMaterialInstanceDynamic*>& Materials, const struct FSHolographicData& SHolographicData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "UpdateMaterialsWithDa");

	Params::SimpleHolographicComponent_C_UpdateMaterialsWithDa Parms{};

	Parms.Materials = std::move(Materials);
	Parms.SHolographicData = std::move(SHolographicData);

	UObject::ProcessEvent(Func, &Parms);

	Materials = std::move(Parms.Materials);
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.EndEffect
// (Public, BlueprintCallable, BlueprintEvent)

void USimpleHolographicComponent_C::EndEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "EndEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SimpleHolographicComponent.SimpleHolographicComponent_C.StartEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void USimpleHolographicComponent_C::StartEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHolographicComponent_C", "StartEffect");

	UObject::ProcessEvent(Func, nullptr);
}

}

