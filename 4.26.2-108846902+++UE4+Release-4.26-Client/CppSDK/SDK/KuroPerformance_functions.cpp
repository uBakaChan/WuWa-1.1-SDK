#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroPerformance

#include "Basic.hpp"

#include "KuroPerformance_classes.hpp"
#include "KuroPerformance_parameters.hpp"


namespace SDK
{

// Function KuroPerformance.KuroPerformanceBPLibrary.BoostCPU
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrequencyPercentage                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoostDurationInMilliSecond                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBoostMemory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPerformanceBPLibrary::BoostCPU(int32 FrequencyPercentage, int32 BoostDurationInMilliSecond, bool bBoostMemory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "BoostCPU");

	Params::KuroPerformanceBPLibrary_BoostCPU Parms{};

	Parms.FrequencyPercentage = FrequencyPercentage;
	Parms.BoostDurationInMilliSecond = BoostDurationInMilliSecond;
	Parms.bBoostMemory = bBoostMemory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.BoostGPU
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrequencyPercentage                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoostDurationInMilliSecond                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBoostMemory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPerformanceBPLibrary::BoostGPU(int32 FrequencyPercentage, int32 BoostDurationInMilliSecond, bool bBoostMemory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "BoostGPU");

	Params::KuroPerformanceBPLibrary_BoostGPU Parms{};

	Parms.FrequencyPercentage = FrequencyPercentage;
	Parms.BoostDurationInMilliSecond = BoostDurationInMilliSecond;
	Parms.bBoostMemory = bBoostMemory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.GetCurrentTemperatureData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bResult, float CurrentTemperature, float TempBudget)>Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UKuroPerformanceBPLibrary::GetCurrentTemperatureData(const TDelegate<void(bool bResult, float CurrentTemperature, float TempBudget)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "GetCurrentTemperatureData");

	Params::KuroPerformanceBPLibrary_GetCurrentTemperatureData Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.GetTickedPerformanceReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKuroPerformanceReport           PerformanceReport                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKuroPerformanceBPLibrary::GetTickedPerformanceReport(struct FKuroPerformanceReport* PerformanceReport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "GetTickedPerformanceReport");

	Params::KuroPerformanceBPLibrary_GetTickedPerformanceReport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PerformanceReport != nullptr)
		*PerformanceReport = std::move(Parms.PerformanceReport);
}


// Function KuroPerformance.KuroPerformanceBPLibrary.IsPerformanceAdaptiveRunning
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPerformanceBPLibrary::IsPerformanceAdaptiveRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "IsPerformanceAdaptiveRunning");

	Params::KuroPerformanceBPLibrary_IsPerformanceAdaptiveRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.PredictWorkload
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CPULoadScale                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GPULoadScale                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPerformanceBPLibrary::PredictWorkload(int32 CPULoadScale, int32 GPULoadScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "PredictWorkload");

	Params::KuroPerformanceBPLibrary_PredictWorkload Parms{};

	Parms.CPULoadScale = CPULoadScale;
	Parms.GPULoadScale = GPULoadScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.SetPerformanceAdaptiveStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroPerformanceBPLibrary::SetPerformanceAdaptiveStatus(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "SetPerformanceAdaptiveStatus");

	Params::KuroPerformanceBPLibrary_SetPerformanceAdaptiveStatus Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.SetTargetFPS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FPS                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ThreadId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPerformanceBPLibrary::SetTargetFPS(int32 FPS, int32 ThreadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "SetTargetFPS");

	Params::KuroPerformanceBPLibrary_SetTargetFPS Parms{};

	Parms.FPS = FPS;
	Parms.ThreadId = ThreadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.StartPerformanceAdaptiveService
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   EServiceFlags                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPerformanceBPLibrary::StartPerformanceAdaptiveService(int32 EServiceFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "StartPerformanceAdaptiveService");

	Params::KuroPerformanceBPLibrary_StartPerformanceAdaptiveService Parms{};

	Parms.EServiceFlags = EServiceFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.StopPerformanceAdaptiveService
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   EServiceFlags                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPerformanceBPLibrary::StopPerformanceAdaptiveService(int32 EServiceFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "StopPerformanceAdaptiveService");

	Params::KuroPerformanceBPLibrary_StopPerformanceAdaptiveService Parms{};

	Parms.EServiceFlags = EServiceFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.Tick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKuroPerformanceBPLibrary::Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "Tick");

	Params::KuroPerformanceBPLibrary_Tick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPerformance.KuroPerformanceBPLibrary.TickPerfReport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKuroPerformanceBPLibrary::TickPerfReport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPerformanceBPLibrary", "TickPerfReport");

	Params::KuroPerformanceBPLibrary_TickPerfReport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

