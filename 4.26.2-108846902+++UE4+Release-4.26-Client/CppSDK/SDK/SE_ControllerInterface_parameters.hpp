#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SE_ControllerInterface

#include "Basic.hpp"


namespace SDK::Params
{

// Function SE_ControllerInterface.SE_ControllerInterface_C.Start
// 0x0004 (0x0004 - 0x0000)
struct SE_ControllerInterface_C_Start final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SE_ControllerInterface_C_Start) == 0x000004, "Wrong alignment on SE_ControllerInterface_C_Start");
static_assert(sizeof(SE_ControllerInterface_C_Start) == 0x000004, "Wrong size on SE_ControllerInterface_C_Start");
static_assert(offsetof(SE_ControllerInterface_C_Start, Time) == 0x000000, "Member 'SE_ControllerInterface_C_Start::Time' has a wrong offset!");

// Function SE_ControllerInterface.SE_ControllerInterface_C.Loop
// 0x0004 (0x0004 - 0x0000)
struct SE_ControllerInterface_C_Loop final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SE_ControllerInterface_C_Loop) == 0x000004, "Wrong alignment on SE_ControllerInterface_C_Loop");
static_assert(sizeof(SE_ControllerInterface_C_Loop) == 0x000004, "Wrong size on SE_ControllerInterface_C_Loop");
static_assert(offsetof(SE_ControllerInterface_C_Loop, Time) == 0x000000, "Member 'SE_ControllerInterface_C_Loop::Time' has a wrong offset!");

// Function SE_ControllerInterface.SE_ControllerInterface_C.End
// 0x0004 (0x0004 - 0x0000)
struct SE_ControllerInterface_C_End final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SE_ControllerInterface_C_End) == 0x000004, "Wrong alignment on SE_ControllerInterface_C_End");
static_assert(sizeof(SE_ControllerInterface_C_End) == 0x000004, "Wrong size on SE_ControllerInterface_C_End");
static_assert(offsetof(SE_ControllerInterface_C_End, Time) == 0x000000, "Member 'SE_ControllerInterface_C_End::Time' has a wrong offset!");

// Function SE_ControllerInterface.SE_ControllerInterface_C.ApplyAlpha
// 0x0004 (0x0004 - 0x0000)
struct SE_ControllerInterface_C_ApplyAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SE_ControllerInterface_C_ApplyAlpha) == 0x000004, "Wrong alignment on SE_ControllerInterface_C_ApplyAlpha");
static_assert(sizeof(SE_ControllerInterface_C_ApplyAlpha) == 0x000004, "Wrong size on SE_ControllerInterface_C_ApplyAlpha");
static_assert(offsetof(SE_ControllerInterface_C_ApplyAlpha, Alpha) == 0x000000, "Member 'SE_ControllerInterface_C_ApplyAlpha::Alpha' has a wrong offset!");

// Function SE_ControllerInterface.SE_ControllerInterface_C.ApplyVisibility
// 0x0001 (0x0001 - 0x0000)
struct SE_ControllerInterface_C_ApplyVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SE_ControllerInterface_C_ApplyVisibility) == 0x000001, "Wrong alignment on SE_ControllerInterface_C_ApplyVisibility");
static_assert(sizeof(SE_ControllerInterface_C_ApplyVisibility) == 0x000001, "Wrong size on SE_ControllerInterface_C_ApplyVisibility");
static_assert(offsetof(SE_ControllerInterface_C_ApplyVisibility, Visibility) == 0x000000, "Member 'SE_ControllerInterface_C_ApplyVisibility::Visibility' has a wrong offset!");

// Function SE_ControllerInterface.SE_ControllerInterface_C.ApplyEnvironmentFactor
// 0x0004 (0x0004 - 0x0000)
struct SE_ControllerInterface_C_ApplyEnvironmentFactor final
{
public:
	float                                         EnvironmentFactor;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SE_ControllerInterface_C_ApplyEnvironmentFactor) == 0x000004, "Wrong alignment on SE_ControllerInterface_C_ApplyEnvironmentFactor");
static_assert(sizeof(SE_ControllerInterface_C_ApplyEnvironmentFactor) == 0x000004, "Wrong size on SE_ControllerInterface_C_ApplyEnvironmentFactor");
static_assert(offsetof(SE_ControllerInterface_C_ApplyEnvironmentFactor, EnvironmentFactor) == 0x000000, "Member 'SE_ControllerInterface_C_ApplyEnvironmentFactor::EnvironmentFactor' has a wrong offset!");

}

