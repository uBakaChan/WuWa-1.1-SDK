#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroPortalCapture

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.RoleTeleport__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature) == 0x000004, "Wrong alignment on BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature");
static_assert(sizeof(BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature) == 0x00000C, "Wrong size on BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature");
static_assert(offsetof(BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature, Velocity) == 0x000000, "Member 'BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature::Velocity' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.ExecuteUbergraph_BP_KuroPortalCapture
// 0x0290 (0x0290 - 0x0000)
struct BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0030(0x0094)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_BaseItem_C*                         K2Node_DynamicCast_AsBP_Base_Item;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0100(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0xC];                                      // 0x0184(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0190(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01F0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0240(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetActorByPbDataId_ReturnValue;           // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture) == 0x000010, "Wrong alignment on BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture");
static_assert(sizeof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture) == 0x000290, "Wrong size on BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, EntryPoint) == 0x000000, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000010, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_ComponentBoundEvent_OtherActor) == 0x000018, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_ComponentBoundEvent_OtherComp) == 0x000020, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000028, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_ComponentBoundEvent_bFromSweep) == 0x00002C, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_ComponentBoundEvent_SweepResult) == 0x000030, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_GetComponentByClass_ReturnValue) == 0x0000C8, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_IsValid_ReturnValue_1) == 0x0000D0, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000D4, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_DynamicCast_AsBP_Base_Item) == 0x0000E0, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_DynamicCast_AsBP_Base_Item' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Roll) == 0x0000EC, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Pitch) == 0x0000F0, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Yaw) == 0x0000F4, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_GetTransform_ReturnValue) == 0x000100, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_GetComponentVelocity_ReturnValue) == 0x000130, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakTransform_Location) == 0x00013C, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakTransform_Rotation) == 0x000148, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakTransform_Scale) == 0x000154, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000160, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Roll_1) == 0x00016C, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Pitch_1) == 0x000170, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Yaw_1) == 0x000174, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Roll_2) == 0x000178, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Pitch_2) == 0x00017C, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Yaw_2) == 0x000180, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_GetTransform_ReturnValue_1) == 0x000190, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_MakeRotator_ReturnValue) == 0x0001C0, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakTransform_Location_1) == 0x0001CC, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakTransform_Rotation_1) == 0x0001D8, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakTransform_Scale_1) == 0x0001E4, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_MakeTransform_ReturnValue) == 0x0001F0, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Roll_3) == 0x000220, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Pitch_3) == 0x000224, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_BreakRotator_Yaw_3) == 0x000228, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_MakeRotator_ReturnValue_1) == 0x00022C, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000238, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_MakeTransform_ReturnValue_1) == 0x000240, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_Event_DeltaSeconds) == 0x000270, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_GetActorByPbDataId_ReturnValue) == 0x000278, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_GetActorByPbDataId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000280, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_IsValid_ReturnValue_2) == 0x000281, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroPortalCapture_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_KuroPortalCapture_C_ReceiveTick");
static_assert(sizeof(BP_KuroPortalCapture_C_ReceiveTick) == 0x000004, "Wrong size on BP_KuroPortalCapture_C_ReceiveTick");
static_assert(offsetof(BP_KuroPortalCapture_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_KuroPortalCapture_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B8 (0x00B8 - 0x0000)
struct BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0094)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B8, "Wrong size on BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_KuroPortalCapture_C_BndEvt__BP_Portal_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.CameraCacl
// 0x0290 (0x0290 - 0x0000)
struct BP_KuroPortalCapture_C_CameraCacl final
{
public:
	struct FTransform                             TempTrans;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             ModelView;                                         // 0x0030(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetInverseTransform_ReturnValue;          // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_KuroPortalCapture_C*                K2Node_DynamicCast_AsBP_Kuro_Portal_Capture;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0110(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x0140(0x0030)(IsPlainOldData, NoDestructor)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0178(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0xC];                                      // 0x0224(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_2;          // 0x0260(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_CameraCacl) == 0x000010, "Wrong alignment on BP_KuroPortalCapture_C_CameraCacl");
static_assert(sizeof(BP_KuroPortalCapture_C_CameraCacl) == 0x000290, "Wrong size on BP_KuroPortalCapture_C_CameraCacl");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, TempTrans) == 0x000000, "Member 'BP_KuroPortalCapture_C_CameraCacl::TempTrans' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, ModelView) == 0x000030, "Member 'BP_KuroPortalCapture_C_CameraCacl::ModelView' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_GetInverseTransform_ReturnValue) == 0x000060, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_GetInverseTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_ComposeTransforms_ReturnValue) == 0x0000C0, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_IsValid_ReturnValue) == 0x0000F0, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, K2Node_DynamicCast_AsBP_Kuro_Portal_Capture) == 0x0000F8, "Member 'BP_KuroPortalCapture_C_CameraCacl::K2Node_DynamicCast_AsBP_Kuro_Portal_Capture' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'BP_KuroPortalCapture_C_CameraCacl::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_GetTransform_ReturnValue) == 0x000110, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_ComposeTransforms_ReturnValue_1) == 0x000140, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000170, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000178, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_GetCameraRotation_ReturnValue) == 0x00020C, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_GetCameraLocation_ReturnValue) == 0x000218, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_MakeTransform_ReturnValue_1) == 0x000230, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_CameraCacl, CallFunc_ComposeTransforms_ReturnValue_2) == 0x000260, "Member 'BP_KuroPortalCapture_C_CameraCacl::CallFunc_ComposeTransforms_ReturnValue_2' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.Teleport
// 0x0520 (0x0520 - 0x0000)
struct BP_KuroPortalCapture_C_Teleport final
{
public:
	struct FTransform                             InTrans;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class AActor*                                 InActor;                                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRole;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               VelocityRotator;                                   // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Loc;                                               // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SourceTrans;                                       // 0x0060(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             TempTrans;                                         // 0x0090(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetComponentByClass_ReturnValue_1;        // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue;                // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0280(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_3;           // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0310(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0340(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetInverseTransform_ReturnValue;          // 0x0370(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x03A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x03D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x0400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0xC];                                      // 0x0424(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_2;          // 0x0430(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue_1;              // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0470(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x047C(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_Teleport) == 0x000010, "Wrong alignment on BP_KuroPortalCapture_C_Teleport");
static_assert(sizeof(BP_KuroPortalCapture_C_Teleport) == 0x000520, "Wrong size on BP_KuroPortalCapture_C_Teleport");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, InTrans) == 0x000000, "Member 'BP_KuroPortalCapture_C_Teleport::InTrans' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, InActor) == 0x000030, "Member 'BP_KuroPortalCapture_C_Teleport::InActor' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, IsRole) == 0x000038, "Member 'BP_KuroPortalCapture_C_Teleport::IsRole' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, VelocityRotator) == 0x00003C, "Member 'BP_KuroPortalCapture_C_Teleport::VelocityRotator' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, Loc) == 0x000048, "Member 'BP_KuroPortalCapture_C_Teleport::Loc' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, SourceTrans) == 0x000060, "Member 'BP_KuroPortalCapture_C_Teleport::SourceTrans' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, TempTrans) == 0x000090, "Member 'BP_KuroPortalCapture_C_Teleport::TempTrans' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Roll) == 0x0000C0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Pitch) == 0x0000C4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Yaw) == 0x0000C8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000CC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Roll_1) == 0x0000D8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Pitch_1) == 0x0000DC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Yaw_1) == 0x0000E0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue) == 0x0000E4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeRotator_ReturnValue) == 0x0000F0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Normal_ReturnValue) == 0x0000FC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetComponentByClass_ReturnValue) == 0x000108, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_VSize_ReturnValue) == 0x000110, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000114, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location) == 0x000120, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation) == 0x00012C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale) == 0x000138, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_1) == 0x000180, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_1) == 0x00018C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_1) == 0x000198, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetComponentByClass_ReturnValue_1) == 0x0001A8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue_1) == 0x0001B0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x0001BC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Normal_ReturnValue_1) == 0x0001C8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_VSize_ReturnValue_1) == 0x0001D4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0001D8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_2) == 0x0001E4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_2) == 0x0001F0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_2) == 0x0001FC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_TeleportTo_ReturnValue) == 0x000208, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_TeleportTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue_2) == 0x00020C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_3) == 0x000218, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_3) == 0x000224, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_3) == 0x000230, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x00023C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Roll_2) == 0x000248, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Pitch_2) == 0x00024C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Yaw_2) == 0x000250, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_4) == 0x000254, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_4) == 0x000260, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_4) == 0x00026C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetTransform_ReturnValue) == 0x000280, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Roll_3) == 0x0002B0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Pitch_3) == 0x0002B4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Yaw_3) == 0x0002B8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_5) == 0x0002BC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_5) == 0x0002C8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_5) == 0x0002D4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeRotator_ReturnValue_1) == 0x0002E0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue_3) == 0x0002EC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0002F8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeRotator_ReturnValue_2) == 0x000304, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue_1) == 0x000310, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue_2) == 0x000340, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetInverseTransform_ReturnValue) == 0x000370, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetInverseTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue) == 0x0003A0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue_1) == 0x0003D0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_6) == 0x000400, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_6) == 0x00040C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_6) == 0x000418, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue_2) == 0x000430, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_TeleportTo_ReturnValue_1) == 0x000460, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_TeleportTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Add_VectorVector_ReturnValue) == 0x000464, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000470, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x00047C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_IsValid_ReturnValue) == 0x000510, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.SetPair
// 0x0008 (0x0008 - 0x0000)
struct BP_KuroPortalCapture_C_SetPair final
{
public:
	class AActor*                                 Pair;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_SetPair) == 0x000008, "Wrong alignment on BP_KuroPortalCapture_C_SetPair");
static_assert(sizeof(BP_KuroPortalCapture_C_SetPair) == 0x000008, "Wrong size on BP_KuroPortalCapture_C_SetPair");
static_assert(offsetof(BP_KuroPortalCapture_C_SetPair, Pair) == 0x000000, "Member 'BP_KuroPortalCapture_C_SetPair::Pair' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.SetCaptureTextureTarget
// 0x0008 (0x0008 - 0x0000)
struct BP_KuroPortalCapture_C_SetCaptureTextureTarget final
{
public:
	class UTextureRenderTarget2D*                 Rendertarget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_SetCaptureTextureTarget) == 0x000008, "Wrong alignment on BP_KuroPortalCapture_C_SetCaptureTextureTarget");
static_assert(sizeof(BP_KuroPortalCapture_C_SetCaptureTextureTarget) == 0x000008, "Wrong size on BP_KuroPortalCapture_C_SetCaptureTextureTarget");
static_assert(offsetof(BP_KuroPortalCapture_C_SetCaptureTextureTarget, Rendertarget) == 0x000000, "Member 'BP_KuroPortalCapture_C_SetCaptureTextureTarget::Rendertarget' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.SetPbDataId
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroPortalCapture_C_SetPbDataId final
{
public:
	int32                                         Param_PbdataId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_SetPbDataId) == 0x000004, "Wrong alignment on BP_KuroPortalCapture_C_SetPbDataId");
static_assert(sizeof(BP_KuroPortalCapture_C_SetPbDataId) == 0x000004, "Wrong size on BP_KuroPortalCapture_C_SetPbDataId");
static_assert(offsetof(BP_KuroPortalCapture_C_SetPbDataId, Param_PbdataId) == 0x000000, "Member 'BP_KuroPortalCapture_C_SetPbDataId::Param_PbdataId' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.GetPortalTrans
// 0x0060 (0x0060 - 0x0000)
struct BP_KuroPortalCapture_C_GetPortalTrans final
{
public:
	struct FTransform                             NewParam;                                          // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_GetPortalTrans) == 0x000010, "Wrong alignment on BP_KuroPortalCapture_C_GetPortalTrans");
static_assert(sizeof(BP_KuroPortalCapture_C_GetPortalTrans) == 0x000060, "Wrong size on BP_KuroPortalCapture_C_GetPortalTrans");
static_assert(offsetof(BP_KuroPortalCapture_C_GetPortalTrans, NewParam) == 0x000000, "Member 'BP_KuroPortalCapture_C_GetPortalTrans::NewParam' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_GetPortalTrans, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'BP_KuroPortalCapture_C_GetPortalTrans::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

}

