#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BulletBlueprintFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass BulletBlueprintFunctionLibrary.BulletBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UBulletBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static class AActor* GetBulletActorById(int32 Id, class UObject* __WorldContext);
	static bool DestroyBullet(int32 Id, bool IsSummonChildBullet, class UObject* __WorldContext);
	static void FrozenBulletTimeByBulletName(class ATsBaseCharacter_C* Character, const class FString& bulletDataName, float Time, class UObject* __WorldContext);
	static void SetEntityIdByCustomKey(int32 AttackerId, const class FString& CustomKey, int32 TargetId, class UObject* __WorldContext);
	static TArray<int32> GetAllBullet(class UObject* __WorldContext);
	static void DebugShowBulletTrace(bool IsShow, int32 EntityId1, class UObject* __WorldContext);
	static TArray<int32> GetCharacterLaunchedBulletIds(int32 CharacterId, class UObject* __WorldContext);
	static struct FTransform GetBulletTransform(int32 Id, class UObject* __WorldContext);
	static class ATsBaseCharacter_C* GetBulletAttacker(int32 Id, class UObject* __WorldContext);
	static class UPrimitiveComponent* GetBulletCollision(int32 Id, class UObject* __WorldContext);
	static class FString GetBulletName(int32 Id, class UObject* __WorldContext);
	static void SetBulletStopHitTrue(int32 Id, class UObject* __WorldContext);
	static void SetBulletTarget(int32 Id, class ATsBaseCharacter_C* Character, class UObject* __WorldContext);
	static void SetBulletSummon(int32 Id, class UObject* __WorldContext);
	static void SetBulletTransform(int32 Id, const struct FTransform& NewTransform, class UObject* __WorldContext);
	static void SetBeginSpeed(int32 Id, float NewSpeed, class UObject* __WorldContext);
	static void DebugShowBulletCollision(bool IsShow, int32 EntityId, class UObject* __WorldContext);
	static bool GetIsShowBulletTrace(int32 EntityId, class UObject* __WorldContext);
	static bool GetIsShowBulletCollision(int32 EntityId, class UObject* __WorldContext);
	static void CalcPipe(const struct FVector& CenterPoint, const struct FVector& Forward, const struct FVector& Up, float OutsideRadius, float InsideRadius, float Height, int32 SectionNum, TArray<struct FVector>& OutVerticesRef, TArray<int32>& OutTrianglesRef, class UObject* __WorldContext);
	static void CalcSector(const struct FVector& CenterPoint, const struct FVector& Forward, const struct FVector& Up, float InAngle, float Radius, float Height, int32 SectionNum, TArray<struct FVector>& VerticesArrayRef, TArray<int32>& TrianglesArrayRef, class UObject* __WorldContext);
	static struct FVector CalcBulletInitLocation(const struct FSReBulletDataMain& DataMain, class AActor* Attacker, const struct FTransform& Target, class UObject* __WorldContext);
	static void AttachToBone(class USkeletalMeshComponent* MeshComp, class AActor* bulletActor, const struct FSReBulletDataMain& DataMain, class UObject* __WorldContext);
	static struct FRotator CalcBulletInitRotator(const struct FSReBulletDataMain& DataMain, class AActor* bulletActor, class AActor* Attacker, const struct FTransform& Target, class AActor* ParentBulletActor, class UObject* __WorldContext);
	static struct FRotator CalcBulletRotator(const struct FSReBulletDataMain& DataMain, class AActor* bulletActor, class AActor* Attacker, const struct FVector& Target, float Delta, class UObject* __WorldContext);
	static struct FVector CalcBulletLocation(const struct FSReBulletDataMain& DataMain, class AActor* bulletActor, float Delta, class UObject* __WorldContext);
	static void DestroyAllBullet(bool SummonChild, class UObject* __WorldContext);
	static int32 CreateBulletFromGA(class ATsBaseCharacter_C* Owner, const class FString& bulletRowName, const struct FTransform& InitialTransform, const class FString& SkillId, bool NeedSync, const struct FVector& TargetLocation, class UObject* __WorldContext);
	static float CreateBulletForDebug(class ATsBaseCharacter_C* Owner, const class FString& bulletRowName, class UObject* __WorldContext);
	static class FString GetSpecialBulletToSkillId(const class FString& bulletRowName, const class FString& SkillId, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BulletBlueprintFunctionLibrary_C">();
	}
	static class UBulletBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBulletBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UBulletBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UBulletBlueprintFunctionLibrary_C");
static_assert(sizeof(UBulletBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UBulletBlueprintFunctionLibrary_C");

}

