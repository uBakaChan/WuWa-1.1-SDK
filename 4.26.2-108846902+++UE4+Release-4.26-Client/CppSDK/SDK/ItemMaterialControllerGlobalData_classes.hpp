#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemMaterialControllerGlobalData

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "KuroCurve_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass ItemMaterialControllerGlobalData.ItemMaterialControllerGlobalData_C
// 0x0D98 (0x0DD0 - 0x0038)
class UItemMaterialControllerGlobalData_C final : public UPrimaryDataAsset
{
public:
	float                                         StartTime;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoopTime;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndTime;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableBaseColorScale;                              // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        BaseColorScale;                                    // 0x0048(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableAddEmissionColor;                            // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  AddEmissionColor;                                  // 0x00E0(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableRimLight;                                    // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  AddRimLightColor;                                  // 0x0308(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableScanningOutline;                             // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  ScanningOutlineColor;                              // 0x0530(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        ScanningOutlineWidth;                              // 0x0750(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        RimWidth;                                          // 0x07E0(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        RimPower;                                          // 0x0870(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        RimMix;                                            // 0x0900(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  ScanningOutlineTexScaleOffset;                     // 0x0990(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  ScanningBrokenTexScaleOffset;                      // 0x0BB0(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemMaterialControllerGlobalData_C">();
	}
	static class UItemMaterialControllerGlobalData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemMaterialControllerGlobalData_C>();
	}
};
static_assert(alignof(UItemMaterialControllerGlobalData_C) == 0x000008, "Wrong alignment on UItemMaterialControllerGlobalData_C");
static_assert(sizeof(UItemMaterialControllerGlobalData_C) == 0x000DD0, "Wrong size on UItemMaterialControllerGlobalData_C");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, StartTime) == 0x000038, "Member 'UItemMaterialControllerGlobalData_C::StartTime' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, LoopTime) == 0x00003C, "Member 'UItemMaterialControllerGlobalData_C::LoopTime' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, EndTime) == 0x000040, "Member 'UItemMaterialControllerGlobalData_C::EndTime' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, EnableBaseColorScale) == 0x000044, "Member 'UItemMaterialControllerGlobalData_C::EnableBaseColorScale' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, BaseColorScale) == 0x000048, "Member 'UItemMaterialControllerGlobalData_C::BaseColorScale' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, EnableAddEmissionColor) == 0x0000D8, "Member 'UItemMaterialControllerGlobalData_C::EnableAddEmissionColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, AddEmissionColor) == 0x0000E0, "Member 'UItemMaterialControllerGlobalData_C::AddEmissionColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, EnableRimLight) == 0x000300, "Member 'UItemMaterialControllerGlobalData_C::EnableRimLight' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, AddRimLightColor) == 0x000308, "Member 'UItemMaterialControllerGlobalData_C::AddRimLightColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, EnableScanningOutline) == 0x000528, "Member 'UItemMaterialControllerGlobalData_C::EnableScanningOutline' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, ScanningOutlineColor) == 0x000530, "Member 'UItemMaterialControllerGlobalData_C::ScanningOutlineColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, ScanningOutlineWidth) == 0x000750, "Member 'UItemMaterialControllerGlobalData_C::ScanningOutlineWidth' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, RimWidth) == 0x0007E0, "Member 'UItemMaterialControllerGlobalData_C::RimWidth' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, RimPower) == 0x000870, "Member 'UItemMaterialControllerGlobalData_C::RimPower' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, RimMix) == 0x000900, "Member 'UItemMaterialControllerGlobalData_C::RimMix' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, ScanningOutlineTexScaleOffset) == 0x000990, "Member 'UItemMaterialControllerGlobalData_C::ScanningOutlineTexScaleOffset' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerGlobalData_C, ScanningBrokenTexScaleOffset) == 0x000BB0, "Member 'UItemMaterialControllerGlobalData_C::ScanningBrokenTexScaleOffset' has a wrong offset!");

}

