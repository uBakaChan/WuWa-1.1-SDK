#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Portal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Portal.BP_Portal_C
// 0x0158 (0x0400 - 0x02A8)
class ABP_Portal_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneCaptureComponent2D*               CapturePosition1;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PortalPlane1;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PortalPlane2;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CapturePosition2;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PortalWorldTransform1;                             // 0x02E0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         PortalSize2;                                       // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NearClipPlane2;                                    // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PortalWorldTransform2;                             // 0x0320(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         PortalCameraOffset2;                               // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DMI_Portal1;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Portal2;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PortalColor1;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PortalColor2;                                      // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DebugActor1;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DebugActor2;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Portal1Enable;                                     // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Portal2Enable;                                     // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39A[0x6];                                      // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RT2;                                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimShowLen_Portal1;                               // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimFadeLen_Portal1;                               // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimIsShowing_Portal1;                             // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AnimShowCurve_Portal1;                             // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AnimFadeCurve_Portal1;                             // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimCounter_Portal1;                               // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimShowLen_Portal2;                               // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimFadeLen_Portal2;                               // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimIsShowing_Portal2;                             // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D5[0x3];                                      // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AnimShowCurve_Portal2;                             // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AnimFadeCurve_Portal2;                             // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimCounter_Portal2;                               // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PortalSize1;                                       // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NearClipPlane1;                                    // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PortalCameraOffset1;                               // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT1;                                               // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Portal(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void One();
	void SetPortal1Transform(const struct FTransform& Transform, const struct FTransform& CaptureTransform);
	void SetPortal2Transform(const struct FTransform& Transform, const struct FTransform& CaptureTransform);
	void EnablePortal2Rendering();
	void DisablePortal2Rendering();
	void DisablePortal1Rendering();
	void EnablePortal1Rendering();
	void Two();
	void DEBUG_s_1();
	void DEBUG_s_2();
	void UpdatePortalAnimation(float ShowLen, float FadeLen, bool IsShown, class UCurveFloat* ShowCurve, class UCurveFloat* FadeCurve, float Counter, class UStaticMeshComponent* SM, class UStaticMeshComponent* DMI, float* OutputCounter, float* Factor);
	void UpdatePortalsCameraPosition();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Portal_C">();
	}
	static class ABP_Portal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Portal_C>();
	}
};
static_assert(alignof(ABP_Portal_C) == 0x000010, "Wrong alignment on ABP_Portal_C");
static_assert(sizeof(ABP_Portal_C) == 0x000400, "Wrong size on ABP_Portal_C");
static_assert(offsetof(ABP_Portal_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_Portal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CapturePosition1) == 0x0002B0, "Member 'ABP_Portal_C::CapturePosition1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalPlane1) == 0x0002B8, "Member 'ABP_Portal_C::PortalPlane1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalPlane2) == 0x0002C0, "Member 'ABP_Portal_C::PortalPlane2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CapturePosition2) == 0x0002C8, "Member 'ABP_Portal_C::CapturePosition2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_Portal_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalWorldTransform1) == 0x0002E0, "Member 'ABP_Portal_C::PortalWorldTransform1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalSize2) == 0x000310, "Member 'ABP_Portal_C::PortalSize2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, NearClipPlane2) == 0x000314, "Member 'ABP_Portal_C::NearClipPlane2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalWorldTransform2) == 0x000320, "Member 'ABP_Portal_C::PortalWorldTransform2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalCameraOffset2) == 0x000350, "Member 'ABP_Portal_C::PortalCameraOffset2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DMI_Portal1) == 0x000358, "Member 'ABP_Portal_C::DMI_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DMI_Portal2) == 0x000360, "Member 'ABP_Portal_C::DMI_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalColor1) == 0x000368, "Member 'ABP_Portal_C::PortalColor1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalColor2) == 0x000378, "Member 'ABP_Portal_C::PortalColor2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DebugActor1) == 0x000388, "Member 'ABP_Portal_C::DebugActor1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DebugActor2) == 0x000390, "Member 'ABP_Portal_C::DebugActor2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, Portal1Enable) == 0x000398, "Member 'ABP_Portal_C::Portal1Enable' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, Portal2Enable) == 0x000399, "Member 'ABP_Portal_C::Portal2Enable' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, RT2) == 0x0003A0, "Member 'ABP_Portal_C::RT2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowLen_Portal1) == 0x0003A8, "Member 'ABP_Portal_C::AnimShowLen_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeLen_Portal1) == 0x0003AC, "Member 'ABP_Portal_C::AnimFadeLen_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimIsShowing_Portal1) == 0x0003B0, "Member 'ABP_Portal_C::AnimIsShowing_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowCurve_Portal1) == 0x0003B8, "Member 'ABP_Portal_C::AnimShowCurve_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeCurve_Portal1) == 0x0003C0, "Member 'ABP_Portal_C::AnimFadeCurve_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimCounter_Portal1) == 0x0003C8, "Member 'ABP_Portal_C::AnimCounter_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowLen_Portal2) == 0x0003CC, "Member 'ABP_Portal_C::AnimShowLen_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeLen_Portal2) == 0x0003D0, "Member 'ABP_Portal_C::AnimFadeLen_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimIsShowing_Portal2) == 0x0003D4, "Member 'ABP_Portal_C::AnimIsShowing_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowCurve_Portal2) == 0x0003D8, "Member 'ABP_Portal_C::AnimShowCurve_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeCurve_Portal2) == 0x0003E0, "Member 'ABP_Portal_C::AnimFadeCurve_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimCounter_Portal2) == 0x0003E8, "Member 'ABP_Portal_C::AnimCounter_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalSize1) == 0x0003EC, "Member 'ABP_Portal_C::PortalSize1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, NearClipPlane1) == 0x0003F0, "Member 'ABP_Portal_C::NearClipPlane1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalCameraOffset1) == 0x0003F4, "Member 'ABP_Portal_C::PortalCameraOffset1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, RT1) == 0x0003F8, "Member 'ABP_Portal_C::RT1' has a wrong offset!");

}

