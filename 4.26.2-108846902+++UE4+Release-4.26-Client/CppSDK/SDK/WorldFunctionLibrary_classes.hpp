#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldFunctionLibrary

#include "Basic.hpp"

#include "EPawnChannel_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EDetachType_structs.hpp"
#include "ERelation_structs.hpp"
#include "EWeatherState_structs.hpp"
#include "EWuYinQuState_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass WorldFunctionLibrary.WorldFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UWorldFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static bool DetachActor(class UObject* CallObject, class AActor* SrcActor, bool Destroy, const class FString& Reason, EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, class UObject* __WorldContext);
	static bool AttachToComponent(class UObject* CallObject, class AActor* Actor, class USceneComponent* ParentComponent, EDetachType DetachType, const class FString& Reason, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies, bool DoAttach, class UObject* __WorldContext);
	static bool AttachToActor(class UObject* CallObject1, class AActor* Actor1, class AActor* ParentActor1, EDetachType DetachType1, const class FString& Reason1, class FName SocketName1, EAttachmentRule LocationRule1, EAttachmentRule RotationRule1, EAttachmentRule ScaleRule1, bool bWeldSimulatedBodies1, bool DoAttach, class UObject* __WorldContext);
	static TArray<int32> GetEntitiesInRange(int32 Distance, ERelation Relation, class UObject* __WorldContext);
	static void SetRotatorValuesByEntity(int32 EntityId, const class FString& Key, TArray<struct FRotator>& Values, class UObject* __WorldContext);
	static void SetVectorValuesByEntity(int32 EntityId, const class FString& Key, TArray<struct FVector>& Values, class UObject* __WorldContext);
	static void SetStringValuesByEntity(int32 EntityId, const class FString& Key, TArray<class FString>& Values, class UObject* __WorldContext);
	static void SetFloatValuesByEntity(int32 EntityId, const class FString& Key, TArray<float>& Values, class UObject* __WorldContext);
	static void SetLongValuesByEntity(int32 EntityId, const class FString& Key, TArray<int64>& Values, class UObject* __WorldContext);
	static void SetIntValuesByEntity(int32 EntityId, const class FString& Key, TArray<int32>& Values, class UObject* __WorldContext);
	static int32 GetRoleIdIgnoreTrial(int32 EntityId, class UObject* __WorldContext);
	static float GetTimeDilation(class UObject* __WorldContext);
	static TArray<class AActor*> GetFormationControlledRoles(class UObject* __WorldContext);
	static bool GetEntityEnable(int32 EntityId, class UObject* __WorldContext);
	static class AActor* GetActorByEntityId(int32 EntityId, class UObject* __WorldContext);
	static bool EntityIsInit(int32 EntityId, class UObject* __WorldContext);
	static void SetTimeDilation(float TimeDilation, class UObject* __WorldContext);
	static TArray<class AActor*> GetActorsByPbDataIdArray(TArray<int32>& PbDataIdArray, class UObject* __WorldContext);
	static class AActor* GetEntityActorByChildActor(class AActor* ChildActor, class UObject* __WorldContext);
	static bool GetEntityDestructible(int32 EntityId, class UObject* __WorldContext);
	static int32 GetVisionId(int32 VisionEntityId, class UObject* __WorldContext);
	static TArray<int32> GetSummonEntityIds(int32 OwnerEntityId, class UObject* __WorldContext);
	static void ChangeRoleInExitSkill(class AActor* GoDownPlayer, class AActor* GoBattlePlayer, class UObject* __WorldContext);
	static int32 GetSummonerEntityId(int32 EntityId, class UObject* __WorldContext);
	static void UiCameraAnimationBroadSequenceEvent(const class FString& SequenceEventName, class UObject* __WorldContext);
	static int32 GetControlVisionEntityId(int32 OwnerEntityId, class UObject* __WorldContext);
	static void UiCameraAnimationDisableCustomCreatureActor(int32 Position1, class UObject* __WorldContext);
	static void UiCameraAnimationEnablePlayerActor(class UObject* __WorldContext);
	static void UiCameraAnimationDisablePlayerActor(class UObject* __WorldContext);
	static void SetCustomEntityEnable(int32 OwnerEntityId, int32 Pos, bool Enable, class UObject* CallObject, const class FString& Reason, class UObject* __WorldContext);
	static void SetNewUiSceneDebugOpen(bool UseNewUiSceneWorkflow, class UObject* __WorldContext);
	static class USplineComponent* InitGameSplineBySplineEntity(int32 PbDataId1, class ATsGameSplineActor_C* InSplineActor1, class UObject* __WorldContext);
	static void ChangeRole(int32 Pos, class UObject* __WorldContext);
	static bool GetEnableCollisionDebug(int32 EntityId1, class UObject* __WorldContext);
	static void ShowCharacterCollision(bool IsShow, int32 EntityId1, class UObject* __WorldContext);
	static TArray<class FString> GetTestSpawnTemplateEntityString(class UObject* __WorldContext);
	static void SetEntityRotation(int32 EntityId, const struct FRotator& Rotation, bool Sweep, class UObject* __WorldContext);
	static void SetEntityLocationAndRotation(int32 EntityId, const struct FVector& Location, const struct FRotator& Rotation, bool Sweep, class UObject* __WorldContext);
	static void SetEntityLocation(int32 EntityId1, const struct FVector& Location, bool Sweep, bool Teleport, class UObject* __WorldContext);
	static bool IsGameRunning(class UObject* __WorldContext);
	static void SetCollisionResponseToPawn(class ATsBaseCharacter_C* Actor, EPawnChannel PawnChannel, ECollisionResponse NewResponse, class UObject* __WorldContext);
	static TMap<int32, bool> GetFormationAllEntityId(class UObject* __WorldContext);
	static void SetCameraShakeModify(float Modify, class UObject* __WorldContext);
	static bool EnableCreatureCollision(class AActor* Actor, class UObject* CallObject, int32 Handle, class UObject* __WorldContext);
	static int32 DisableCreatureCollision(class AActor* Actor, class UObject* CallObject, const class FString& Reason, class UObject* __WorldContext);
	static bool EnableCreatureActor(class AActor* Actor, class UObject* CallObject, int32 Handle, class UObject* __WorldContext);
	static int32 DisableCreatureActor(class AActor* Actor, class UObject* CallObject, const class FString& Reason, class UObject* __WorldContext);
	static struct FVector GetInitPositionByEntity(int32 EntityId1, class UObject* __WorldContext);
	static class FString EvalScript(const class FString& Script, class UObject* __WorldContext);
	static bool IsNeedPostEffect(class AActor* Actor, class UObject* __WorldContext);
	static int64 GetServerIdByEntityId(int32 EntityId, class UObject* __WorldContext);
	static void SetVisionEnable(int32 OwnerEntityId, bool Enable, class UObject* __WorldContext);
	static int32 GetCustomEntityId(int32 OwnerEntityId, int32 Pos, class UObject* __WorldContext);
	static int32 GetVisionEntityId(int32 OwnerEntityId, class UObject* __WorldContext);
	static void MonsterBoomRequest(int64 CreatureDataId, float Delay, class UObject* __WorldContext);
	static void ChangeSubLevel(TArray<class FString>& UnloadLevels, TArray<class FString>& Levels, int32 ScreenEffect, const struct FVector& Location, const struct FRotator& Rotator, class UObject* __WorldContext);
	static class AActor* GetActorByPbDataId(int32 PbDataId, class UObject* __WorldContext);
	static class AActor* GetActorByCreatureDataId(int64 CreatureDataId, class UObject* __WorldContext);
	static class UTsEntityDebugInfoManager_C* GetEntityDebugInfoManager(class UObject* __WorldContext);
	static int32 GetChangeFootStepMaterialId(class UObject* __WorldContext);
	static bool GetChangeFootStep(class UObject* __WorldContext);
	static void TestSpawnTemplateEntityPush(int64 CreatureDataId, int32 ConfigId, int32 Level, const struct FTransform& Transform, int32 ExtraRatioConfigId, class UObject* __WorldContext);
	static TArray<class FString> GetWuYinQuDebugInfo(class UObject* __WorldContext);
	static int32 GetMonsterType(class AActor* Actor, class UObject* __WorldContext);
	static int32 GetConfigIdByActor(class AActor* Actor, class UObject* __WorldContext);
	static int32 GetEntityTypeByActor(class AActor* Actor, class UObject* __WorldContext);
	static int32 GetEntityTypeByEntity(int32 EntityId, class UObject* __WorldContext);
	static void ChangeEntityState(int32 EntityId1, const class FString& State1, class AActor* ChangerstActor, int32 ChangerstEntityId, class UObject* __WorldContext);
	static void SwitchServerLogMode(class UObject* __WorldContext);
	static bool GetServerLogMode(class UObject* __WorldContext);
	static void SwitchBuffSyncMode(class UObject* __WorldContext);
	static bool GetBuffSyncMode(class UObject* __WorldContext);
	static void SwitchBattleMode(class UObject* __WorldContext);
	static bool GetBattleMode(class UObject* __WorldContext);
	static EWeatherState GetCurrentWeatherState(class UObject* __WorldContext);
	static float GetCurrentDayState(class UObject* __WorldContext);
	static void AiChangeBattleState(const class FString& battleActorName, EWuYinQuState TargetState, class UObject* __WorldContext);
	static void RemoveSummonEntityRequest(int32 SkillId, int32 SummonerId, int32 RemoveId, class UObject* __WorldContext);
	static void ChangeBattleState(class ULevelSequenceDirector* Director, const class FString& battleActorName, EWuYinQuState TargetState, class UObject* __WorldContext);
	static void JumpToMarkLevelSequence(class ULevelSequenceDirector* Director, const class FString& MarkName, class UObject* __WorldContext);
	static int64 SummonRequest(int32 SkillId, bool IsVisible, const struct FTransform& Transform, int32 SummonerId, int32 SummonConfigId, class UObject* __WorldContext);
	static int32 GetRoleId(int32 EntityId, class UObject* __WorldContext);
	static bool IsOpenWorld(class UObject* __WorldContext);
	static void PlayWuYinLevelSequence(int32 LoopStartFrame, class ULevelSequenceDirector* Director, const class FString& SequenceActorName, class UObject* __WorldContext);
	static void PlayWuYinSequence(const class FString& SequenceName, class UObject* __WorldContext);
	static void StartStandalone(class UObject* __WorldContext);
	static bool CheckConfigIdByActor(class AActor* Actor, float ConfigId, class UObject* __WorldContext);
	static bool ActorHasSceneItemTag(class AActor* Actor, float Tag, class UObject* __WorldContext);
	static void RemovePrivateTags(float EntityId, TArray<class FString>& Tags, class UObject* __WorldContext);
	static void AddPrivateTags(float EntityId, TArray<class FString>& Tags, class UObject* __WorldContext);
	static int64 GetOwnerIdByEntity(int32 EntityId, class UObject* __WorldContext);
	static void UiCameraAnimationEnableCustomCreatureActor(class UObject* __WorldContext);
	static int32 GetRoleElementId(int32 EntityId, class UObject* __WorldContext);
	static int32 GetPlayerIdByEntity(int32 EntityId, class UObject* __WorldContext);
	static int64 GetCreatureDataIdByEntity(int32 EntityId, class UObject* __WorldContext);
	static int32 GetEntityIdByCreature(int64 CreatureDataId, class UObject* __WorldContext);
	static int64 GenUniqueId(class UObject* __WorldContext);
	static int32 GetWorldOwner(class UObject* __WorldContext);
	static class AActor* GetDynamicEntity(int32 EntityId, class UObject* __WorldContext);
	static void RemoveStandaloneEntity(int32 EntityId, int32 RemoveEntityType, class UObject* __WorldContext);
	static class FString GetBlackboardInfosByEntity(int32 EntityId, class UObject* __WorldContext);
	static void SetEntityIdsByEntity(int32 EntityId1, const class FString& Key1, TArray<int32>& Values1, class UObject* __WorldContext);
	static TArray<int32> GetEntityIdsByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetEntityIdByEntity(int32 EntityId, const class FString& Key, int32 Value, class UObject* __WorldContext);
	static int32 GetEntityIdByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static TArray<struct FRotator> GetRotatorValuesByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetRotatorValueByEntity(int32 EntityId, const class FString& Key, const struct FRotator& Value, class UObject* __WorldContext);
	static struct FRotator GetRotatorValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static TArray<struct FVector> GetVectorValuesByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetVectorValueByEntity(int32 EntityId, const class FString& Key, const struct FVector& Value, class UObject* __WorldContext);
	static struct FVector GetVectorValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static bool HasValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void RemoveValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static TArray<class FString> GetStringValuesByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetStringValueByEntity(int32 EntityId, const class FString& Key, const class FString& Value, class UObject* __WorldContext);
	static class FString GetStringValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static TArray<float> GetFloatValuesByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetFloatValueByEntity(int32 EntityId, const class FString& Key, float Value, class UObject* __WorldContext);
	static float GetFloatValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetBooleanValueByEntity(int32 EntityId, const class FString& Key, bool Value, class UObject* __WorldContext);
	static bool GetBooleanValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static TArray<int64> GetLongValuesByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetLongValueByEntity(int32 EntityId, const class FString& Key, int64 Value, class UObject* __WorldContext);
	static int64 GetLongValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static TArray<int32> GetIntValuesByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void SetIntValueByEntityWithCharacter(class ATsBaseCharacter_C* Entity, const class FString& Key, int32 Value, class UObject* __WorldContext);
	static void SetIntValueByEntity(int32 EntityId, const class FString& Key, int32 Value, class UObject* __WorldContext);
	static int32 GetIntValueByEntityWithCharacter(class ATsBaseCharacter_C* Entity, const class FString& Key, class UObject* __WorldContext);
	static int32 GetIntValueByEntity(int32 EntityId, const class FString& Key, class UObject* __WorldContext);
	static void RemovePublicTags(float EntityId1, TArray<class FString>& Tags1, class UObject* __WorldContext);
	static void AddPublicTags(float EntityId1, TArray<class FString>& Tags1, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WorldFunctionLibrary_C">();
	}
	static class UWorldFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldFunctionLibrary_C>();
	}
};
static_assert(alignof(UWorldFunctionLibrary_C) == 0x000008, "Wrong alignment on UWorldFunctionLibrary_C");
static_assert(sizeof(UWorldFunctionLibrary_C) == 0x000030, "Wrong size on UWorldFunctionLibrary_C");

}

