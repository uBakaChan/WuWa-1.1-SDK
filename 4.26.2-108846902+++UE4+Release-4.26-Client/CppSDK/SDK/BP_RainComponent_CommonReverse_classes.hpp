#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RainComponent_CommonReverse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RainComponent_CommonReverse.BP_RainComponent_CommonReverse_C
// 0x0180 (0x03B0 - 0x0230)
class UBP_RainComponent_CommonReverse_C final : public UKuroRainComponent
{
public:
	uint8                                         Pad_228[0x8];                                      // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         RandomSpawnerHandle;                               // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArraySpawnerHandle;                                // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CycleBoxHandle;                                    // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0244(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WindHandle;                                        // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GravityHandle;                                     // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DragHandle;                                        // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempSpawnSpeed;                                    // 0x025C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPDA_RainConfig_CommonReverse_C*        RainConfig;                                        // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            ArraySpawnerHandles;                               // 0x0270(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TMap<int32, int32>                            RandomSpawnerHandles;                              // 0x02C0(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	float                                         PassTime;                                          // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PerformanceGravity;                                // 0x0314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PerformanceDrag;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PerformanceWind;                                   // 0x0324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PerformanceSpawnScale;                             // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shape;                                             // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CustomRandomHandle;                                // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         GravityCurveSampleTaskHandle;                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         WindCurveSampleTaskHandle;                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         DragCurveSampleTaskHandle;                         // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         SpawnCurveSampleTaskHandle;                        // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnScale;                                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPendingDeactivate;                               // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActualSpawnCenter;                                 // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWind;                                        // 0x0374(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlobalDensity;                                     // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimeDilationCurveSampleTaskHandle;                 // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocitySpawnScale;                                // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NiagaraValid;                                      // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainFogDensity;                                    // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DeactivateRain();
	void StopRain();
	void Start_Rain();
	void PreSolveRainParticles(float DeltaSeconds);
	void SetupRainEmitters();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ExecuteUbergraph_BP_RainComponent_CommonReverse(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RainComponent_CommonReverse_C">();
	}
	static class UBP_RainComponent_CommonReverse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_RainComponent_CommonReverse_C>();
	}
};
static_assert(alignof(UBP_RainComponent_CommonReverse_C) == 0x000010, "Wrong alignment on UBP_RainComponent_CommonReverse_C");
static_assert(sizeof(UBP_RainComponent_CommonReverse_C) == 0x0003B0, "Wrong size on UBP_RainComponent_CommonReverse_C");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, UberGraphFrame) == 0x000230, "Member 'UBP_RainComponent_CommonReverse_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, RandomSpawnerHandle) == 0x000238, "Member 'UBP_RainComponent_CommonReverse_C::RandomSpawnerHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, ArraySpawnerHandle) == 0x00023C, "Member 'UBP_RainComponent_CommonReverse_C::ArraySpawnerHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, CycleBoxHandle) == 0x000240, "Member 'UBP_RainComponent_CommonReverse_C::CycleBoxHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, Center) == 0x000244, "Member 'UBP_RainComponent_CommonReverse_C::Center' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, WindHandle) == 0x000250, "Member 'UBP_RainComponent_CommonReverse_C::WindHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, GravityHandle) == 0x000254, "Member 'UBP_RainComponent_CommonReverse_C::GravityHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, DragHandle) == 0x000258, "Member 'UBP_RainComponent_CommonReverse_C::DragHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, TempSpawnSpeed) == 0x00025C, "Member 'UBP_RainComponent_CommonReverse_C::TempSpawnSpeed' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, RainConfig) == 0x000268, "Member 'UBP_RainComponent_CommonReverse_C::RainConfig' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, ArraySpawnerHandles) == 0x000270, "Member 'UBP_RainComponent_CommonReverse_C::ArraySpawnerHandles' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, RandomSpawnerHandles) == 0x0002C0, "Member 'UBP_RainComponent_CommonReverse_C::RandomSpawnerHandles' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, PassTime) == 0x000310, "Member 'UBP_RainComponent_CommonReverse_C::PassTime' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, PerformanceGravity) == 0x000314, "Member 'UBP_RainComponent_CommonReverse_C::PerformanceGravity' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, PerformanceDrag) == 0x000320, "Member 'UBP_RainComponent_CommonReverse_C::PerformanceDrag' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, PerformanceWind) == 0x000324, "Member 'UBP_RainComponent_CommonReverse_C::PerformanceWind' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, PerformanceSpawnScale) == 0x000330, "Member 'UBP_RainComponent_CommonReverse_C::PerformanceSpawnScale' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, Shape) == 0x000334, "Member 'UBP_RainComponent_CommonReverse_C::Shape' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, CustomRandomHandle) == 0x000338, "Member 'UBP_RainComponent_CommonReverse_C::CustomRandomHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, GravityCurveSampleTaskHandle) == 0x000340, "Member 'UBP_RainComponent_CommonReverse_C::GravityCurveSampleTaskHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, WindCurveSampleTaskHandle) == 0x000348, "Member 'UBP_RainComponent_CommonReverse_C::WindCurveSampleTaskHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, DragCurveSampleTaskHandle) == 0x000350, "Member 'UBP_RainComponent_CommonReverse_C::DragCurveSampleTaskHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, SpawnCurveSampleTaskHandle) == 0x000358, "Member 'UBP_RainComponent_CommonReverse_C::SpawnCurveSampleTaskHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, SpawnScale) == 0x000360, "Member 'UBP_RainComponent_CommonReverse_C::SpawnScale' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, IsPendingDeactivate) == 0x000364, "Member 'UBP_RainComponent_CommonReverse_C::IsPendingDeactivate' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, ActualSpawnCenter) == 0x000368, "Member 'UBP_RainComponent_CommonReverse_C::ActualSpawnCenter' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, GlobalWind) == 0x000374, "Member 'UBP_RainComponent_CommonReverse_C::GlobalWind' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, GlobalDensity) == 0x000380, "Member 'UBP_RainComponent_CommonReverse_C::GlobalDensity' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, TimeDilationCurveSampleTaskHandle) == 0x000388, "Member 'UBP_RainComponent_CommonReverse_C::TimeDilationCurveSampleTaskHandle' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, VelocitySpawnScale) == 0x000390, "Member 'UBP_RainComponent_CommonReverse_C::VelocitySpawnScale' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, NiagaraComponent) == 0x000398, "Member 'UBP_RainComponent_CommonReverse_C::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, NiagaraValid) == 0x0003A0, "Member 'UBP_RainComponent_CommonReverse_C::NiagaraValid' has a wrong offset!");
static_assert(offsetof(UBP_RainComponent_CommonReverse_C, RainFogDensity) == 0x0003A4, "Member 'UBP_RainComponent_CommonReverse_C::RainFogDensity' has a wrong offset!");

}

