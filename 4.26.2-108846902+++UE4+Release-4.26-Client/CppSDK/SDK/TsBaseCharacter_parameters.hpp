#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsBaseCharacter

#include "Basic.hpp"

#include "ECharacterDitherType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TsBaseCharacter.TsBaseCharacter_C.ExecuteUbergraph_TsBaseCharacter
// 0x0020 (0x0020 - 0x0000)
struct TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_PrevMovementMode;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_NewMovementMode;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_PrevCustomMode;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_NewCustomMode;                        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_OldController;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter) == 0x000008, "Wrong alignment on TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter");
static_assert(sizeof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter) == 0x000020, "Wrong size on TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, EntryPoint) == 0x000000, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, K2Node_Event_PrevMovementMode) == 0x000004, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::K2Node_Event_PrevMovementMode' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, K2Node_Event_NewMovementMode) == 0x000005, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::K2Node_Event_NewMovementMode' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, K2Node_Event_PrevCustomMode) == 0x000006, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::K2Node_Event_PrevCustomMode' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, K2Node_Event_NewCustomMode) == 0x000007, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::K2Node_Event_NewCustomMode' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, K2Node_Event_NewController) == 0x000008, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, K2Node_Event_OldController) == 0x000010, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter, K2Node_Event_DeltaTime) == 0x000018, "Member 'TsBaseCharacter_C_ExecuteUbergraph_TsBaseCharacter::K2Node_Event_DeltaTime' has a wrong offset!");

// Function TsBaseCharacter.TsBaseCharacter_C.K2_UpdateCustomMovement
// 0x0004 (0x0004 - 0x0000)
struct TsBaseCharacter_C_K2_UpdateCustomMovement final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBaseCharacter_C_K2_UpdateCustomMovement) == 0x000004, "Wrong alignment on TsBaseCharacter_C_K2_UpdateCustomMovement");
static_assert(sizeof(TsBaseCharacter_C_K2_UpdateCustomMovement) == 0x000004, "Wrong size on TsBaseCharacter_C_K2_UpdateCustomMovement");
static_assert(offsetof(TsBaseCharacter_C_K2_UpdateCustomMovement, DeltaTime) == 0x000000, "Member 'TsBaseCharacter_C_K2_UpdateCustomMovement::DeltaTime' has a wrong offset!");

// Function TsBaseCharacter.TsBaseCharacter_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct TsBaseCharacter_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBaseCharacter_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on TsBaseCharacter_C_ReceiveUnpossessed");
static_assert(sizeof(TsBaseCharacter_C_ReceiveUnpossessed) == 0x000008, "Wrong size on TsBaseCharacter_C_ReceiveUnpossessed");
static_assert(offsetof(TsBaseCharacter_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'TsBaseCharacter_C_ReceiveUnpossessed::OldController' has a wrong offset!");

// Function TsBaseCharacter.TsBaseCharacter_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct TsBaseCharacter_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBaseCharacter_C_ReceivePossessed) == 0x000008, "Wrong alignment on TsBaseCharacter_C_ReceivePossessed");
static_assert(sizeof(TsBaseCharacter_C_ReceivePossessed) == 0x000008, "Wrong size on TsBaseCharacter_C_ReceivePossessed");
static_assert(offsetof(TsBaseCharacter_C_ReceivePossessed, NewController) == 0x000000, "Member 'TsBaseCharacter_C_ReceivePossessed::NewController' has a wrong offset!");

// Function TsBaseCharacter.TsBaseCharacter_C.K2_OnMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct TsBaseCharacter_C_K2_OnMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBaseCharacter_C_K2_OnMovementModeChanged) == 0x000001, "Wrong alignment on TsBaseCharacter_C_K2_OnMovementModeChanged");
static_assert(sizeof(TsBaseCharacter_C_K2_OnMovementModeChanged) == 0x000004, "Wrong size on TsBaseCharacter_C_K2_OnMovementModeChanged");
static_assert(offsetof(TsBaseCharacter_C_K2_OnMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'TsBaseCharacter_C_K2_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_K2_OnMovementModeChanged, NewMovementMode) == 0x000001, "Member 'TsBaseCharacter_C_K2_OnMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_K2_OnMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'TsBaseCharacter_C_K2_OnMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_K2_OnMovementModeChanged, NewCustomMode) == 0x000003, "Member 'TsBaseCharacter_C_K2_OnMovementModeChanged::NewCustomMode' has a wrong offset!");

// Function TsBaseCharacter.TsBaseCharacter_C.FightCommand
// 0x0001 (0x0001 - 0x0000)
struct TsBaseCharacter_C_FightCommand final
{
public:
	bool                                          IsInAir;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsBaseCharacter_C_FightCommand) == 0x000001, "Wrong alignment on TsBaseCharacter_C_FightCommand");
static_assert(sizeof(TsBaseCharacter_C_FightCommand) == 0x000001, "Wrong size on TsBaseCharacter_C_FightCommand");
static_assert(offsetof(TsBaseCharacter_C_FightCommand, IsInAir) == 0x000000, "Member 'TsBaseCharacter_C_FightCommand::IsInAir' has a wrong offset!");

// Function TsBaseCharacter.TsBaseCharacter_C.SetDitherEffect
// 0x0008 (0x0008 - 0x0000)
struct TsBaseCharacter_C_SetDitherEffect final
{
public:
	float                                         Dither;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDitherType                          DitherType;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBaseCharacter_C_SetDitherEffect) == 0x000004, "Wrong alignment on TsBaseCharacter_C_SetDitherEffect");
static_assert(sizeof(TsBaseCharacter_C_SetDitherEffect) == 0x000008, "Wrong size on TsBaseCharacter_C_SetDitherEffect");
static_assert(offsetof(TsBaseCharacter_C_SetDitherEffect, Dither) == 0x000000, "Member 'TsBaseCharacter_C_SetDitherEffect::Dither' has a wrong offset!");
static_assert(offsetof(TsBaseCharacter_C_SetDitherEffect, DitherType) == 0x000004, "Member 'TsBaseCharacter_C_SetDitherEffect::DitherType' has a wrong offset!");

// Function TsBaseCharacter.TsBaseCharacter_C.GetEntityId
// 0x0004 (0x0004 - 0x0000)
struct TsBaseCharacter_C_GetEntityId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBaseCharacter_C_GetEntityId) == 0x000004, "Wrong alignment on TsBaseCharacter_C_GetEntityId");
static_assert(sizeof(TsBaseCharacter_C_GetEntityId) == 0x000004, "Wrong size on TsBaseCharacter_C_GetEntityId");
static_assert(offsetof(TsBaseCharacter_C_GetEntityId, ReturnValue) == 0x000000, "Member 'TsBaseCharacter_C_GetEntityId::ReturnValue' has a wrong offset!");

}

