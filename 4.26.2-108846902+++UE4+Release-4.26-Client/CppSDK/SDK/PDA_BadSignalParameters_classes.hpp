#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PDA_BadSignalParameters

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PDA_BadSignalParameters.PDA_BadSignalParameters_C
// 0x00A0 (0x00D8 - 0x0038)
class UPDA_BadSignalParameters_C final : public UPrimaryDataAsset
{
public:
	float                                         SignalBiasStrength;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalBiasDirectionRange;                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalBiasStrengthWiggle;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalBiasStrengthWiggleRate;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalBiasSubWiggle;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalExplodeRate;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalExplodeHoldMin;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalExplodeHoldMax;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalBiasExplodeStrength;                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalBiasExplodeSubWiggle;                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignalExplodeAttenuation;                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RimRange;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RimColor;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlineWidth;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OutlineColor;                                      // 0x007C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainTexColorTint;                                  // 0x008C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StripMaskProportionSide;                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StripMaskProportionCenter;                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StripMaskVScale;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StripMaskVSpeed;                                   // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DistortionMaskTexture;                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistortionHold;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistortionUScale;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistortionVScale;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistortionProportion;                              // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistortionExplodeProportion;                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrapStrength;                                      // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrapBiasSpeed;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrapFrequecy;                                      // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PDA_BadSignalParameters_C">();
	}
	static class UPDA_BadSignalParameters_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPDA_BadSignalParameters_C>();
	}
};
static_assert(alignof(UPDA_BadSignalParameters_C) == 0x000008, "Wrong alignment on UPDA_BadSignalParameters_C");
static_assert(sizeof(UPDA_BadSignalParameters_C) == 0x0000D8, "Wrong size on UPDA_BadSignalParameters_C");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalBiasStrength) == 0x000038, "Member 'UPDA_BadSignalParameters_C::SignalBiasStrength' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalBiasDirectionRange) == 0x00003C, "Member 'UPDA_BadSignalParameters_C::SignalBiasDirectionRange' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalBiasStrengthWiggle) == 0x000040, "Member 'UPDA_BadSignalParameters_C::SignalBiasStrengthWiggle' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalBiasStrengthWiggleRate) == 0x000044, "Member 'UPDA_BadSignalParameters_C::SignalBiasStrengthWiggleRate' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalBiasSubWiggle) == 0x000048, "Member 'UPDA_BadSignalParameters_C::SignalBiasSubWiggle' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalExplodeRate) == 0x00004C, "Member 'UPDA_BadSignalParameters_C::SignalExplodeRate' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalExplodeHoldMin) == 0x000050, "Member 'UPDA_BadSignalParameters_C::SignalExplodeHoldMin' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalExplodeHoldMax) == 0x000054, "Member 'UPDA_BadSignalParameters_C::SignalExplodeHoldMax' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalBiasExplodeStrength) == 0x000058, "Member 'UPDA_BadSignalParameters_C::SignalBiasExplodeStrength' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalBiasExplodeSubWiggle) == 0x00005C, "Member 'UPDA_BadSignalParameters_C::SignalBiasExplodeSubWiggle' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, SignalExplodeAttenuation) == 0x000060, "Member 'UPDA_BadSignalParameters_C::SignalExplodeAttenuation' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, RimRange) == 0x000064, "Member 'UPDA_BadSignalParameters_C::RimRange' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, RimColor) == 0x000068, "Member 'UPDA_BadSignalParameters_C::RimColor' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, OutlineWidth) == 0x000078, "Member 'UPDA_BadSignalParameters_C::OutlineWidth' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, OutlineColor) == 0x00007C, "Member 'UPDA_BadSignalParameters_C::OutlineColor' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, MainTexColorTint) == 0x00008C, "Member 'UPDA_BadSignalParameters_C::MainTexColorTint' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, StripMaskProportionSide) == 0x00009C, "Member 'UPDA_BadSignalParameters_C::StripMaskProportionSide' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, StripMaskProportionCenter) == 0x0000A0, "Member 'UPDA_BadSignalParameters_C::StripMaskProportionCenter' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, StripMaskVScale) == 0x0000A4, "Member 'UPDA_BadSignalParameters_C::StripMaskVScale' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, StripMaskVSpeed) == 0x0000A8, "Member 'UPDA_BadSignalParameters_C::StripMaskVSpeed' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, DistortionMaskTexture) == 0x0000B0, "Member 'UPDA_BadSignalParameters_C::DistortionMaskTexture' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, DistortionHold) == 0x0000B8, "Member 'UPDA_BadSignalParameters_C::DistortionHold' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, DistortionUScale) == 0x0000BC, "Member 'UPDA_BadSignalParameters_C::DistortionUScale' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, DistortionVScale) == 0x0000C0, "Member 'UPDA_BadSignalParameters_C::DistortionVScale' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, DistortionProportion) == 0x0000C4, "Member 'UPDA_BadSignalParameters_C::DistortionProportion' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, DistortionExplodeProportion) == 0x0000C8, "Member 'UPDA_BadSignalParameters_C::DistortionExplodeProportion' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, WrapStrength) == 0x0000CC, "Member 'UPDA_BadSignalParameters_C::WrapStrength' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, WrapBiasSpeed) == 0x0000D0, "Member 'UPDA_BadSignalParameters_C::WrapBiasSpeed' has a wrong offset!");
static_assert(offsetof(UPDA_BadSignalParameters_C, WrapFrequecy) == 0x0000D4, "Member 'UPDA_BadSignalParameters_C::WrapFrequecy' has a wrong offset!");

}

