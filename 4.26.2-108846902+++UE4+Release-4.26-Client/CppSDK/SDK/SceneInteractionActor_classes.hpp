#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SceneInteractionActor

#include "Basic.hpp"

#include "SScenePropertyEffect_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"
#include "SSceneInteractionitem_structs.hpp"
#include "ESceneInteractionEffect_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SSceneInteractionTags_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass SceneInteractionActor.SceneInteractionActor_C
// 0x0268 (0x0510 - 0x02A8)
class ASceneInteractionActor_C final : public AKuroSceneInteractionActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<EKuroSceneInteractionState, struct FSSceneInteractionitem> States;                                            // 0x02B0(0x0050)(Edit, BlueprintVisible)
	TMap<class FString, class AActor*>            ReferenceActors;                                   // 0x0300(0x0050)(Edit, BlueprintVisible)
	TArray<class AActor*>                         CollisionActors;                                   // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class FString                                 LevelName;                                         // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         HandleId;                                          // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESceneInteractionEffect, class ABP_EffectActor_C*> EndEffects;                                        // 0x0378(0x0050)(Edit, BlueprintVisible)
	TMap<ESceneInteractionEffect, struct FSScenePropertyEffect> Effects;                                           // 0x03C8(0x0050)(Edit, BlueprintVisible)
	TArray<class AActor*>                         InteractionEffectHookActors;                       // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ATsBaseCharacter_C*                     CharacterForOrgan;                                 // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TMap<struct FGameplayTag, struct FSSceneInteractionTags> TagsAndCorrespondingEffects;                       // 0x0430(0x0050)(Edit, BlueprintVisible)
	TArray<class AActor*>                         ActorsForProjection;                               // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<class AActor*, struct FGameplayTag>      PartCollisionActorsAndCorrespondingTags;           // 0x0490(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class UMaterialInstance*                      MaterialForProjection;                             // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASkeletalMeshActor*>             SkeletalMeshActors;                                // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         ReceivingDecalsActors;                             // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ABP_InteractionMaterialController_C*    InteractionMaterialController;                     // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddNewEffect();
	void AddNewState();
	void UpdateTimeDilation();
	void AddNewEndEffect();
	void AddMatrialDataForChildrenActor(class AActor* Actor, class UItemMaterialControllerActorData_C* MaterialData);
	void ResetTagActorHide(const struct FGameplayTag& Tag);
	void StopExtraEffectOnTagsChange(const struct FGameplayTag& Tag);
	class ALevelSequenceActor* GetDirectorBySequence(class ULevelSequence* Sequence);
	void DestroySelf();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SceneInteractionActor_C">();
	}
	static class ASceneInteractionActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASceneInteractionActor_C>();
	}
};
static_assert(alignof(ASceneInteractionActor_C) == 0x000008, "Wrong alignment on ASceneInteractionActor_C");
static_assert(sizeof(ASceneInteractionActor_C) == 0x000510, "Wrong size on ASceneInteractionActor_C");
static_assert(offsetof(ASceneInteractionActor_C, DefaultSceneRoot) == 0x0002A8, "Member 'ASceneInteractionActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, States) == 0x0002B0, "Member 'ASceneInteractionActor_C::States' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, ReferenceActors) == 0x000300, "Member 'ASceneInteractionActor_C::ReferenceActors' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, CollisionActors) == 0x000350, "Member 'ASceneInteractionActor_C::CollisionActors' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, LevelName) == 0x000360, "Member 'ASceneInteractionActor_C::LevelName' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, HandleId) == 0x000370, "Member 'ASceneInteractionActor_C::HandleId' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, EndEffects) == 0x000378, "Member 'ASceneInteractionActor_C::EndEffects' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, Effects) == 0x0003C8, "Member 'ASceneInteractionActor_C::Effects' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, InteractionEffectHookActors) == 0x000418, "Member 'ASceneInteractionActor_C::InteractionEffectHookActors' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, CharacterForOrgan) == 0x000428, "Member 'ASceneInteractionActor_C::CharacterForOrgan' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, TagsAndCorrespondingEffects) == 0x000430, "Member 'ASceneInteractionActor_C::TagsAndCorrespondingEffects' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, ActorsForProjection) == 0x000480, "Member 'ASceneInteractionActor_C::ActorsForProjection' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, PartCollisionActorsAndCorrespondingTags) == 0x000490, "Member 'ASceneInteractionActor_C::PartCollisionActorsAndCorrespondingTags' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, MaterialForProjection) == 0x0004E0, "Member 'ASceneInteractionActor_C::MaterialForProjection' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, SkeletalMeshActors) == 0x0004E8, "Member 'ASceneInteractionActor_C::SkeletalMeshActors' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, ReceivingDecalsActors) == 0x0004F8, "Member 'ASceneInteractionActor_C::ReceivingDecalsActors' has a wrong offset!");
static_assert(offsetof(ASceneInteractionActor_C, InteractionMaterialController) == 0x000508, "Member 'ASceneInteractionActor_C::InteractionMaterialController' has a wrong offset!");

}

