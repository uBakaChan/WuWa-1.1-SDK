#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Audio_Multi_Base

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Audio_Multi_Base.Audio_Multi_Base_C.ExecuteUbergraph_Audio_Multi_Base
// 0x0008 (0x0008 - 0x0000)
struct Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base) == 0x000004, "Wrong alignment on Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base");
static_assert(sizeof(Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base) == 0x000008, "Wrong size on Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base");
static_assert(offsetof(Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base, EntryPoint) == 0x000000, "Member 'Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base, K2Node_Event_EndPlayReason) == 0x000004, "Member 'Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct Audio_Multi_Base_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on Audio_Multi_Base_C_ReceiveEndPlay");
static_assert(sizeof(Audio_Multi_Base_C_ReceiveEndPlay) == 0x000001, "Wrong size on Audio_Multi_Base_C_ReceiveEndPlay");
static_assert(offsetof(Audio_Multi_Base_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'Audio_Multi_Base_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.Ô∆
// 0x0120 (0x0120 - 0x0000)
struct Audio_Multi_Base_C____ final
{
public:
	TArray<struct FTransform>                     MultiPos_Scale_6H;                                 // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         ___int_Array_Index_Variable;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_AddInstances_ReturnValue;                 // 0x0018(0x0010)(ReferenceParm)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0030(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C____) == 0x000010, "Wrong alignment on Audio_Multi_Base_C____");
static_assert(sizeof(Audio_Multi_Base_C____) == 0x000120, "Wrong size on Audio_Multi_Base_C____");
static_assert(offsetof(Audio_Multi_Base_C____, MultiPos_Scale_6H) == 0x000000, "Member 'Audio_Multi_Base_C____::MultiPos_Scale_6H' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, ___int_Array_Index_Variable) == 0x000010, "Member 'Audio_Multi_Base_C____::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_AddInstances_ReturnValue) == 0x000018, "Member 'Audio_Multi_Base_C____::CallFunc_AddInstances_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_GetMaterial_ReturnValue) == 0x000028, "Member 'Audio_Multi_Base_C____::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_GetBounds_ReturnValue) == 0x000030, "Member 'Audio_Multi_Base_C____::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000050, "Member 'Audio_Multi_Base_C____::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_SetStaticMesh_ReturnValue) == 0x000058, "Member 'Audio_Multi_Base_C____::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, ___int_Loop_Counter_Variable) == 0x00005C, "Member 'Audio_Multi_Base_C____::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Array_Get_Item) == 0x000060, "Member 'Audio_Multi_Base_C____::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_BreakTransform_Location) == 0x000090, "Member 'Audio_Multi_Base_C____::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'Audio_Multi_Base_C____::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'Audio_Multi_Base_C____::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Add_IntInt_ReturnValue) == 0x0000B4, "Member 'Audio_Multi_Base_C____::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'Audio_Multi_Base_C____::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Less_IntInt_ReturnValue) == 0x0000BC, "Member 'Audio_Multi_Base_C____::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000C0, "Member 'Audio_Multi_Base_C____::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000C4, "Member 'Audio_Multi_Base_C____::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C8, "Member 'Audio_Multi_Base_C____::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_MakeTransform_ReturnValue) == 0x0000E0, "Member 'Audio_Multi_Base_C____::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C____, CallFunc_Array_Add_ReturnValue) == 0x000110, "Member 'Audio_Multi_Base_C____::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.9nÖÑ)>pœ‡P
// 0x0008 (0x0008 - 0x0000)
struct Audio_Multi_Base_C_Ninen____p__P final
{
public:
	float                                         CallFunc________________;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Audio_Multi_Base_C_Ninen____p__P) == 0x000004, "Wrong alignment on Audio_Multi_Base_C_Ninen____p__P");
static_assert(sizeof(Audio_Multi_Base_C_Ninen____p__P) == 0x000008, "Wrong size on Audio_Multi_Base_C_Ninen____p__P");
static_assert(offsetof(Audio_Multi_Base_C_Ninen____p__P, CallFunc________________) == 0x000000, "Member 'Audio_Multi_Base_C_Ninen____p__P::CallFunc________________' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_Ninen____p__P, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'Audio_Multi_Base_C_Ninen____p__P::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.A›ª°ó
// 0x0018 (0x0018 - 0x0000)
struct Audio_Multi_Base_C_A_____ final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C_A_____) == 0x000004, "Wrong alignment on Audio_Multi_Base_C_A_____");
static_assert(sizeof(Audio_Multi_Base_C_A_____) == 0x000018, "Wrong size on Audio_Multi_Base_C_A_____");
static_assert(offsetof(Audio_Multi_Base_C_A_____, CallFunc_BreakVector_X) == 0x000000, "Member 'Audio_Multi_Base_C_A_____::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_A_____, CallFunc_BreakVector_Y) == 0x000004, "Member 'Audio_Multi_Base_C_A_____::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_A_____, CallFunc_BreakVector_Z) == 0x000008, "Member 'Audio_Multi_Base_C_A_____::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_A_____, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'Audio_Multi_Base_C_A_____::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_A_____, CallFunc_FMax_ReturnValue_1) == 0x000010, "Member 'Audio_Multi_Base_C_A_____::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_A_____, CallFunc_FMin_ReturnValue) == 0x000014, "Member 'Audio_Multi_Base_C_A_____::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.Play
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) Audio_Multi_Base_C_Play final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> ___delegate_Variable;                              // 0x0000(0x0028)(ConstParm, ZeroConstructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C_Play) == 0x000008, "Wrong alignment on Audio_Multi_Base_C_Play");
static_assert(sizeof(Audio_Multi_Base_C_Play) == 0x000030, "Wrong size on Audio_Multi_Base_C_Play");
static_assert(offsetof(Audio_Multi_Base_C_Play, ___delegate_Variable) == 0x000000, "Member 'Audio_Multi_Base_C_Play::___delegate_Variable' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_Play, CallFunc_PostAkEvent_ReturnValue) == 0x000028, "Member 'Audio_Multi_Base_C_Play::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.pœJÑ)>‡P°ó
// 0x000C (0x000C - 0x0000)
struct Audio_Multi_Base_C_P_J____P__ final
{
public:
	float                                         P_J_;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C_P_J____P__) == 0x000004, "Wrong alignment on Audio_Multi_Base_C_P_J____P__");
static_assert(sizeof(Audio_Multi_Base_C_P_J____P__) == 0x00000C, "Wrong size on Audio_Multi_Base_C_P_J____P__");
static_assert(offsetof(Audio_Multi_Base_C_P_J____P__, P_J_) == 0x000000, "Member 'Audio_Multi_Base_C_P_J____P__::P_J_' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_P_J____P__, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'Audio_Multi_Base_C_P_J____P__::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_P_J____P__, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'Audio_Multi_Base_C_P_J____P__::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.Sp
// 0x0028 (0x0028 - 0x0000)
struct Audio_Multi_Base_C_Sp final
{
public:
	struct FVector                                CallFunc_GetActorBounds_Origin;                    // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorBounds_BoxExtent;                 // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C_Sp) == 0x000008, "Wrong alignment on Audio_Multi_Base_C_Sp");
static_assert(sizeof(Audio_Multi_Base_C_Sp) == 0x000028, "Wrong size on Audio_Multi_Base_C_Sp");
static_assert(offsetof(Audio_Multi_Base_C_Sp, CallFunc_GetActorBounds_Origin) == 0x000000, "Member 'Audio_Multi_Base_C_Sp::CallFunc_GetActorBounds_Origin' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_Sp, CallFunc_GetActorBounds_BoxExtent) == 0x00000C, "Member 'Audio_Multi_Base_C_Sp::CallFunc_GetActorBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_Sp, CallFunc_Conv_VectorToString_ReturnValue) == 0x000018, "Member 'Audio_Multi_Base_C_Sp::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.∑÷-√π
// 0x000C (0x000C - 0x0000)
struct Audio_Multi_Base_C___Minus__ final
{
public:
	struct FVector                                Minus__;                                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C___Minus__) == 0x000004, "Wrong alignment on Audio_Multi_Base_C___Minus__");
static_assert(sizeof(Audio_Multi_Base_C___Minus__) == 0x00000C, "Wrong size on Audio_Multi_Base_C___Minus__");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, Minus__) == 0x000000, "Member 'Audio_Multi_Base_C___Minus__::Minus__' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.>:A›ª
// 0x0018 (0x0018 - 0x0000)
struct Audio_Multi_Base_C___A___ final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C___A___) == 0x000004, "Wrong alignment on Audio_Multi_Base_C___A___");
static_assert(sizeof(Audio_Multi_Base_C___A___) == 0x000018, "Wrong size on Audio_Multi_Base_C___A___");
static_assert(offsetof(Audio_Multi_Base_C___A___, CallFunc_BreakVector_X) == 0x000000, "Member 'Audio_Multi_Base_C___A___::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___A___, CallFunc_BreakVector_Y) == 0x000004, "Member 'Audio_Multi_Base_C___A___::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___A___, CallFunc_BreakVector_Z) == 0x000008, "Member 'Audio_Multi_Base_C___A___::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___A___, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'Audio_Multi_Base_C___A___::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___A___, CallFunc_FMax_ReturnValue_1) == 0x000010, "Member 'Audio_Multi_Base_C___A___::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___A___, CallFunc_FMin_ReturnValue) == 0x000014, "Member 'Audio_Multi_Base_C___A___::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.Õæ-√π
// 0x0120 (0x0120 - 0x0000)
struct Audio_Multi_Base_C___Minus__ final
{
public:
	struct FVector                                ___;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MMn;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc__________;                                // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0088(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Audio_Multi_Base_C___Minus__) == 0x000010, "Wrong alignment on Audio_Multi_Base_C___Minus__");
static_assert(sizeof(Audio_Multi_Base_C___Minus__) == 0x000120, "Wrong size on Audio_Multi_Base_C___Minus__");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, ___) == 0x000000, "Member 'Audio_Multi_Base_C___Minus__::___' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, MMn) == 0x00000C, "Member 'Audio_Multi_Base_C___Minus__::MMn' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, ___int_Loop_Counter_Variable) == 0x000018, "Member 'Audio_Multi_Base_C___Minus__::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc_GetChildrenComponents_Children) == 0x000020, "Member 'Audio_Multi_Base_C___Minus__::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'Audio_Multi_Base_C___Minus__::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'Audio_Multi_Base_C___Minus__::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'Audio_Multi_Base_C___Minus__::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc__________) == 0x00003C, "Member 'Audio_Multi_Base_C___Minus__::CallFunc__________' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, ___int_Array_Index_Variable) == 0x000048, "Member 'Audio_Multi_Base_C___Minus__::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'Audio_Multi_Base_C___Minus__::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc_Array_Get_Item) == 0x000080, "Member 'Audio_Multi_Base_C___Minus__::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C___Minus__, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000088, "Member 'Audio_Multi_Base_C___Minus__::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");

// Function Audio_Multi_Base.Audio_Multi_Base_C.GamePlay
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) Audio_Multi_Base_C_GamePlay final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> ___delegate_Variable;                              // 0x0008(0x0028)(ConstParm, ZeroConstructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Audio_Multi_Base_C_GamePlay) == 0x000008, "Wrong alignment on Audio_Multi_Base_C_GamePlay");
static_assert(sizeof(Audio_Multi_Base_C_GamePlay) == 0x000038, "Wrong size on Audio_Multi_Base_C_GamePlay");
static_assert(offsetof(Audio_Multi_Base_C_GamePlay, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Audio_Multi_Base_C_GamePlay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_GamePlay, ___delegate_Variable) == 0x000008, "Member 'Audio_Multi_Base_C_GamePlay::___delegate_Variable' has a wrong offset!");
static_assert(offsetof(Audio_Multi_Base_C_GamePlay, CallFunc_PostAkEvent_ReturnValue) == 0x000030, "Member 'Audio_Multi_Base_C_GamePlay::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

}

