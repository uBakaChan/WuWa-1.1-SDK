#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrailSensorActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STrailDrawInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrailSensorActor.BP_TrailSensorActor_C
// 0x00E8 (0x0390 - 0x02A8)
class ABP_TrailSensorActor_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneRoot;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              WorldSize;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DrawMat;                                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CopyMat;                                           // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               EdgeMat;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BlurMat;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiddleRTSizeResolution;                            // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PixelWidth_Blured;                                 // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Drawn;                                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Save;                                              // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Edged;                                             // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Blured;                                            // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CurrentFrame;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Position;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EdgeOffsetWidth;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlurWidth;                                         // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTrailDrawInfo>                Drawers;                                           // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         Rotation;                                          // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightOffset;                                      // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastPosition;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowGrid;                                          // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLandActor_;                                      // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DrawEdge_Inst;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Blur_Inst;                                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecificBluredRT;                                  // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 NewBlurdRT;                                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdatePositionEveryFrame;                          // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UsePlayPosition;                                   // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A[0x2];                                      // 0x037A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DynamicRTSize;                                     // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Draw_Inst;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Copy_Inst;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsEnable(bool* Ret);
	void GetPlayerActor(class AActor** PlayerActor);
	void DrawIntoRenderTargets();
	void Init_Render_Targets();
	struct FVector2D UpDatePosition();
	void CreateRTandMat();
	void DrawToCurrentFrame(class UCanvas* Canvas, const struct FSTrailDrawInfo& DrawInfo);
	void UserConstructionScript();
	void Draw();
	void DrawFinished();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_TrailSensorActor(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrailSensorActor_C">();
	}
	static class ABP_TrailSensorActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrailSensorActor_C>();
	}
};
static_assert(alignof(ABP_TrailSensorActor_C) == 0x000008, "Wrong alignment on ABP_TrailSensorActor_C");
static_assert(sizeof(ABP_TrailSensorActor_C) == 0x000390, "Wrong size on ABP_TrailSensorActor_C");
static_assert(offsetof(ABP_TrailSensorActor_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_TrailSensorActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Billboard) == 0x0002B0, "Member 'ABP_TrailSensorActor_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Decal) == 0x0002B8, "Member 'ABP_TrailSensorActor_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, SceneRoot) == 0x0002C0, "Member 'ABP_TrailSensorActor_C::SceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, WorldSize) == 0x0002C8, "Member 'ABP_TrailSensorActor_C::WorldSize' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, DrawMat) == 0x0002D0, "Member 'ABP_TrailSensorActor_C::DrawMat' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, CopyMat) == 0x0002D8, "Member 'ABP_TrailSensorActor_C::CopyMat' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, EdgeMat) == 0x0002E0, "Member 'ABP_TrailSensorActor_C::EdgeMat' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, BlurMat) == 0x0002E8, "Member 'ABP_TrailSensorActor_C::BlurMat' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, MiddleRTSizeResolution) == 0x0002F0, "Member 'ABP_TrailSensorActor_C::MiddleRTSizeResolution' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, PixelWidth_Blured) == 0x0002F4, "Member 'ABP_TrailSensorActor_C::PixelWidth_Blured' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Drawn) == 0x0002F8, "Member 'ABP_TrailSensorActor_C::Drawn' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Save) == 0x000300, "Member 'ABP_TrailSensorActor_C::Save' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Edged) == 0x000308, "Member 'ABP_TrailSensorActor_C::Edged' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Blured) == 0x000310, "Member 'ABP_TrailSensorActor_C::Blured' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, CurrentFrame) == 0x000318, "Member 'ABP_TrailSensorActor_C::CurrentFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Position) == 0x000320, "Member 'ABP_TrailSensorActor_C::Position' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, EdgeOffsetWidth) == 0x000328, "Member 'ABP_TrailSensorActor_C::EdgeOffsetWidth' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, BlurWidth) == 0x00032C, "Member 'ABP_TrailSensorActor_C::BlurWidth' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Drawers) == 0x000330, "Member 'ABP_TrailSensorActor_C::Drawers' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Rotation) == 0x000340, "Member 'ABP_TrailSensorActor_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, HeightOffset) == 0x000344, "Member 'ABP_TrailSensorActor_C::HeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, LastPosition) == 0x000348, "Member 'ABP_TrailSensorActor_C::LastPosition' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, ShowGrid) == 0x000350, "Member 'ABP_TrailSensorActor_C::ShowGrid' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, IsLandActor_) == 0x000351, "Member 'ABP_TrailSensorActor_C::IsLandActor_' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, DrawEdge_Inst) == 0x000358, "Member 'ABP_TrailSensorActor_C::DrawEdge_Inst' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Blur_Inst) == 0x000360, "Member 'ABP_TrailSensorActor_C::Blur_Inst' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, SpecificBluredRT) == 0x000368, "Member 'ABP_TrailSensorActor_C::SpecificBluredRT' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, NewBlurdRT) == 0x000370, "Member 'ABP_TrailSensorActor_C::NewBlurdRT' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, UpdatePositionEveryFrame) == 0x000378, "Member 'ABP_TrailSensorActor_C::UpdatePositionEveryFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, UsePlayPosition) == 0x000379, "Member 'ABP_TrailSensorActor_C::UsePlayPosition' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, DynamicRTSize) == 0x00037C, "Member 'ABP_TrailSensorActor_C::DynamicRTSize' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Draw_Inst) == 0x000380, "Member 'ABP_TrailSensorActor_C::Draw_Inst' has a wrong offset!");
static_assert(offsetof(ABP_TrailSensorActor_C, Copy_Inst) == 0x000388, "Member 'ABP_TrailSensorActor_C::Copy_Inst' has a wrong offset!");

}

