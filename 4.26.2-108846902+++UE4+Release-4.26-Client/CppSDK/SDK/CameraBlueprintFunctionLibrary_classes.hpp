#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraBlueprintFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ECustomCameraMode_structs.hpp"
#include "ESequenceCameraAnsEffectiveClientType_structs.hpp"
#include "ECameraAnsEffectiveClientType_structs.hpp"
#include "EAimAssistMode_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass CameraBlueprintFunctionLibrary.CameraBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UCameraBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void OnPossess(class APawn* Pawn, class UObject* __WorldContext);
	static ECustomCameraMode GetCameraMode(class UObject* __WorldContext);
	static void SetCameraRotation(const struct FRotator& Rotator, class UObject* __WorldContext);
	static struct FVector GetTargetSocketLocation(class UObject* __WorldContext);
	static void SetWidgetCameraBlendParams(float blendTime, EViewTargetBlendFunction blendFunction, float blendExp, bool blendLocation, bool IsRelativeLocation, bool OverrideLocation, const struct FVector& NewLocation, bool blendRotation, bool IsRelativeRotation, bool OverrideRotation, const struct FRotator& NewRotation, class UObject* __WorldContext);
	static struct FVector GetFightCameraLocation(class UObject* __WorldContext);
	static void SetFightCameraFollow(bool Follow, class UObject* __WorldContext);
	static void ResetFightCameraPitchAndArmLength(class UObject* __WorldContext);
	static void EnterCameraExplore(int32 Id, const struct FVector& LookAt1, const struct FVector& LookAt2, float PrepTime, float FadeDistance, float ArmLengthMin, float ArmLengthMax, class UObject* __WorldContext);
	static void ExitCameraExplore(int32 Id, class UObject* __WorldContext);
	static void EnterSequenceDialogue(class AActor* Target, class UObject* __WorldContext);
	static void ExitSequenceDialogue(class UObject* __WorldContext);
	static void EnterCameraMode(ECustomCameraMode CameraMode, float blendTime, EViewTargetBlendFunction blendFunction, float blendExp, class UObject* __WorldContext);
	static void ExitCameraMode(ECustomCameraMode CameraMode, float blendTime, EViewTargetBlendFunction blendFunction, float blendExp, class UObject* __WorldContext);
	static void ReloadCameraConfig(class UObject* __WorldContext);
	static class ACameraActor* GetFightCameraActor(class UObject* __WorldContext);
	static void PlayCameraOrbital(class ULevelSequence* LevelSequence, const struct FVector& StartLocation1, const struct FVector& EndLocation1, float blendInTime1, float blendOutTime1, class UObject* __WorldContext);
	static void StopCameraOrbital(class UObject* __WorldContext);
	static bool IsRoleOnCameraRight(class UObject* __WorldContext);
	static void SetCameraDebugToolEnabled(bool InEnable, class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawSpringArm(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawFocusTargetLine(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawSpringArmEdgeRange(class UObject* __WorldContext);
	static TArray<struct FSCameraDebugTool_SubCameraModification> GetSubCameraModifications(class UObject* __WorldContext);
	static TArray<struct FSCameraDebugTool_ControllerModification> GetControllerModifications(class UObject* __WorldContext);
	static void SetAimAssistMode(EAimAssistMode Mode, class UObject* __WorldContext);
	static bool GetIsCameraTargetInScreen(class UObject* __WorldContext);
	static void ExitSpecialGameplayCamera(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawCameraCollision(class UObject* __WorldContext);
	static TMap<class FString, class FString> GetDebugDesiredCameraProps(class UObject* __WorldContext);
	static struct FSCameraDebugTool_CameraModeInfo GetCamereModeInfo(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawLockCameraMoveLine(class UObject* __WorldContext);
	static void ApplyCameraModify(const struct FGameplayTag& Tag, float Duration, float blendInTime, float blendOutTime, float breakBlendOutTime, const struct FSCameraModifier_Settings& CameraModifySettings, class UAnimMontage* Montage, const struct FSBaseCurve& blendInCurve, const struct FSBaseCurve& blendOutCurve, const class FString& CameraAttachSocket, int32 EntityId, ECameraAnsEffectiveClientType CameraEffectiveClientType, TArray<struct FSCameraModifier_Condition>& CameraModifierContions, class UObject* __WorldContext);
	static class ALevelSequenceActor* GetSequenceCameraActor(class UObject* __WorldContext);
	static class ACameraActor* GetWidgetCameraActor(class UObject* __WorldContext);
	static class ACameraActor* EnterSpecialGameplayCamera(int32 GameplayId, class UObject* __WorldContext);
	static void ExitSpecialGameplayCamera2(class UObject* __WorldContext);
	static void PlaySettlementCamera(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawSettlementCamera(class UObject* __WorldContext);
	static bool PlayCameraSequence(ESequenceCameraAnsEffectiveClientType _H_7_, int32 EntityId, const struct FSSequenceCamera_Settings& Settings, bool ResetLockOnCamera, const struct FRotator& AdditiveRotation, const class FString& CameraAttachSocket, const class FString& CameraDetectSocket, const struct FVector& ExtraSphereLocation, float ExtraDetectSphereRadius, bool IsShowExtraSphere, bool IsIgnoreCharacterCollision, bool DisableMovementInput, bool DisableLookAtInput, bool DisableMotionBlur, class UObject* __WorldContext);
	static bool IsTargetSocketLocationValid(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CameraBlueprintFunctionLibrary_C">();
	}
	static class UCameraBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UCameraBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UCameraBlueprintFunctionLibrary_C");
static_assert(sizeof(UCameraBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UCameraBlueprintFunctionLibrary_C");

}

